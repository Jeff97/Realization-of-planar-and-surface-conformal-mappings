(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    555102,      12096]
NotebookOptionsPosition[    550128,      12016]
NotebookOutlinePosition[    550501,      12032]
CellTagsIndexPosition[    550458,      12029]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData["Quit"], "Input",
 CellChangeTimes->{{3.8551149424607396`*^9, 3.8551149429550376`*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"c9b6af60-1e74-426b-ae69-164071080d25"],

Cell["Current position vector", "Text",
 CellChangeTimes->{{3.855061574895628*^9, 
  3.8550615872808037`*^9}},ExpressionUUID->"e295ffa2-1b1c-49f9-932f-\
5d982131a454"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"x1", "[", 
    RowBox[{"X_", ",", "Y_", ",", "Z_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"x1Z0", "[", 
     RowBox[{"X", ",", "Y"}], "]"}], "+", 
    RowBox[{"Z", " ", 
     RowBox[{"x1Z1", "[", 
      RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
    RowBox[{
     FractionBox["1", "2"], 
     SuperscriptBox["Z", "2"], 
     RowBox[{"x1Z2", "[", 
      RowBox[{"X", ",", "Y"}], "]"}]}]}]}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"+", 
      FractionBox["1", "6"]}], 
     SuperscriptBox["Z", "3"], 
     RowBox[{"x1Z3", "[", 
      RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
    RowBox[{
     FractionBox["1", "24"], 
     SuperscriptBox["Z", "4"], 
     RowBox[{"x1Z4", "[", 
      RowBox[{"X", ",", "Y"}], "]"}]}]}], "*)"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"x2", "[", 
    RowBox[{"X_", ",", "Y_", ",", "Z_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"x2Z0", "[", 
     RowBox[{"X", ",", "Y"}], "]"}], "+", 
    RowBox[{"Z", " ", 
     RowBox[{"x2Z1", "[", 
      RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
    RowBox[{
     FractionBox["1", "2"], 
     SuperscriptBox["Z", "2"], 
     RowBox[{"x2Z2", "[", 
      RowBox[{"X", ",", "Y"}], "]"}]}]}]}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"+", 
      FractionBox["1", "6"]}], 
     SuperscriptBox["Z", "3"], 
     RowBox[{"x2Z3", "[", 
      RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
    RowBox[{
     FractionBox["1", "24"], 
     SuperscriptBox["Z", "4"], 
     RowBox[{"x2Z4", "[", 
      RowBox[{"X", ",", "Y"}], "]"}]}]}], "*)"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"x3", "[", 
    RowBox[{"X_", ",", "Y_", ",", "Z_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"x3Z0", "[", 
     RowBox[{"X", ",", "Y"}], "]"}], "+", 
    RowBox[{"Z", " ", 
     RowBox[{"x3Z1", "[", 
      RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
    RowBox[{
     FractionBox["1", "2"], 
     SuperscriptBox["Z", "2"], 
     RowBox[{"x3Z2", "[", 
      RowBox[{"X", ",", "Y"}], "]"}]}]}]}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"+", 
      FractionBox["1", "6"]}], 
     SuperscriptBox["Z", "3"], 
     RowBox[{"x3Z3", "[", 
      RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
    RowBox[{
     FractionBox["1", "24"], 
     SuperscriptBox["Z", "4"], 
     RowBox[{"x3Z4", "[", 
      RowBox[{"X", ",", "Y"}], "]"}]}]}], "*)"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"p", "[", 
    RowBox[{"X_", ",", "Y_", ",", "Z_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"pZ0", "[", 
     RowBox[{"X", ",", "Y"}], "]"}], "+", 
    RowBox[{"Z", " ", 
     RowBox[{"pZ1", "[", 
      RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
    RowBox[{
     FractionBox["1", "2"], 
     SuperscriptBox["Z", "2"], 
     RowBox[{"pZ2", "[", 
      RowBox[{"X", ",", "Y"}], "]"}]}]}]}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"+", 
     FractionBox["1", "6"]}], 
    SuperscriptBox["Z", "3"], 
    RowBox[{"pZ3", "[", 
     RowBox[{"X", ",", "Y"}], "]"}]}], "*)"}], ";"}]}], "Input",
 CellChangeTimes->{{3.85626050322688*^9, 3.8562605096908526`*^9}, {
  3.8902709387223024`*^9, 3.8902709487297306`*^9}, {3.890520691776666*^9, 
  3.8905207079083233`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"4ef08d3d-d162-4fd7-94d5-7c8e7420ca5e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"F11", " ", "[", 
   RowBox[{"X_", ",", "Y_", ",", "Z_"}], "]"}], ":=", " ", 
  RowBox[{"D", "[", 
   RowBox[{
    RowBox[{"x1", "[", 
     RowBox[{"X", ",", "Y", ",", "Z"}], "]"}], ",", "X"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"F12", " ", "[", 
   RowBox[{"X_", ",", "Y_", ",", "Z_"}], "]"}], ":=", " ", 
  RowBox[{"D", "[", 
   RowBox[{
    RowBox[{"x1", "[", 
     RowBox[{"X", ",", "Y", ",", "Z"}], "]"}], ",", "Y"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"F13", " ", "[", 
   RowBox[{"X_", ",", "Y_", ",", "Z_"}], "]"}], ":=", " ", 
  RowBox[{"D", "[", 
   RowBox[{
    RowBox[{"x1", "[", 
     RowBox[{"X", ",", "Y", ",", "Z"}], "]"}], ",", "Z"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"F21", " ", "[", 
   RowBox[{"X_", ",", "Y_", ",", "Z_"}], "]"}], ":=", " ", 
  RowBox[{"D", "[", 
   RowBox[{
    RowBox[{"x2", "[", 
     RowBox[{"X", ",", "Y", ",", "Z"}], "]"}], ",", "X"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"F22", " ", "[", 
   RowBox[{"X_", ",", "Y_", ",", "Z_"}], "]"}], ":=", " ", 
  RowBox[{"D", "[", 
   RowBox[{
    RowBox[{"x2", "[", 
     RowBox[{"X", ",", "Y", ",", "Z"}], "]"}], ",", "Y"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"F23", " ", "[", 
   RowBox[{"X_", ",", "Y_", ",", "Z_"}], "]"}], ":=", " ", 
  RowBox[{"D", "[", 
   RowBox[{
    RowBox[{"x2", "[", 
     RowBox[{"X", ",", "Y", ",", "Z"}], "]"}], ",", "Z"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"F31", " ", "[", 
   RowBox[{"X_", ",", "Y_", ",", "Z_"}], "]"}], ":=", " ", 
  RowBox[{"D", "[", 
   RowBox[{
    RowBox[{"x3", "[", 
     RowBox[{"X", ",", "Y", ",", "Z"}], "]"}], ",", "X"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"F32", " ", "[", 
   RowBox[{"X_", ",", "Y_", ",", "Z_"}], "]"}], ":=", " ", 
  RowBox[{"D", "[", 
   RowBox[{
    RowBox[{"x3", "[", 
     RowBox[{"X", ",", "Y", ",", "Z"}], "]"}], ",", "Y"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"F33", " ", "[", 
   RowBox[{"X_", ",", "Y_", ",", "Z_"}], "]"}], ":=", " ", 
  RowBox[{"D", "[", 
   RowBox[{
    RowBox[{"x3", "[", 
     RowBox[{"X", ",", "Y", ",", "Z"}], "]"}], ",", "Z"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.784538776598669*^9, 3.7845390411405478`*^9}, {
   3.7845401489947844`*^9, 3.7845401592397375`*^9}, {3.784540314268499*^9, 
   3.784540445007804*^9}, {3.784540583536712*^9, 3.7845406735830994`*^9}, {
   3.784540749417055*^9, 3.7845407504492025`*^9}, {3.7845407979809275`*^9, 
   3.7845408222582045`*^9}, {3.7845822819738407`*^9, 
   3.7845823625514894`*^9}, {3.784582410873324*^9, 3.7845824126964235`*^9}, {
   3.7845824540269485`*^9, 3.784582475425749*^9}, {3.784582604793952*^9, 
   3.7845826398013783`*^9}, {3.7845827048175917`*^9, 
   3.7845827351884108`*^9}, {3.784582888693097*^9, 3.7845829759678144`*^9}, {
   3.78458303543486*^9, 3.784583047883586*^9}, {3.7845831266699915`*^9, 
   3.7845831897932653`*^9}, {3.784583275059351*^9, 3.7845832761374693`*^9}, {
   3.7846950336111574`*^9, 3.784695035483177*^9}, {3.7850443367247825`*^9, 
   3.7850443371835957`*^9}, {3.785187962417185*^9, 3.7851879786203465`*^9}, {
   3.7856547649042835`*^9, 3.7856548028033714`*^9}, {3.7856548528114843`*^9, 
   3.7856548674591866`*^9}, {3.8502141096270823`*^9, 
   3.8502141096522713`*^9}, {3.8504512731959157`*^9, 3.850451306435521*^9}, {
   3.850451512566953*^9, 3.8504515173397884`*^9}, 3.85045197660226*^9, {
   3.850456188489133*^9, 3.850456229889075*^9}, 3.850459205818799*^9, {
   3.850459256636083*^9, 3.850459373647553*^9}, {3.8504722410251265`*^9, 
   3.850472251450344*^9}, {3.8504726884170713`*^9, 3.8504727001232004`*^9}, {
   3.850472782171874*^9, 3.8504727975811796`*^9}, {3.850474822086154*^9, 
   3.8504748500682383`*^9}, {3.850475237391157*^9, 3.8504752504088993`*^9}, 
   3.85047539795052*^9, {3.8504758453377085`*^9, 3.85047587477942*^9}, {
   3.8504767607091537`*^9, 3.850476764442562*^9}, {3.8504768120853014`*^9, 
   3.850476823130161*^9}, 3.850622059084622*^9, {3.8506223558155456`*^9, 
   3.850622360376609*^9}, {3.8506224865095854`*^9, 3.85062253553333*^9}, {
   3.8506242967958727`*^9, 3.850624308756429*^9}, {3.850624384316151*^9, 
   3.8506244763478837`*^9}, {3.8506678384806695`*^9, 
   3.8506678415228176`*^9}, {3.8511407997766523`*^9, 
   3.8511408437964087`*^9}, {3.851140939381462*^9, 3.8511410902293844`*^9}, {
   3.851141150569597*^9, 3.8511412494595537`*^9}, {3.890270900866823*^9, 
   3.8902709488004174`*^9}, {3.890270984192121*^9, 3.8902709919764585`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"fe006742-e502-4e57-a7c2-e50c937da317"],

Cell[TextData[{
 "\[DoubleStruckCapitalF] has the expansion: ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[DoubleStruckCapitalF]", " ", "=", " ", 
    RowBox[{
     SuperscriptBox["\[DoubleStruckCapitalF]", 
      RowBox[{"(", "0", ")"}]], "+", 
     SuperscriptBox["Z\[DoubleStruckCapitalF]", 
      RowBox[{"(", "1", ")"}]], "+", 
     RowBox[{
      FractionBox["1", "2"], " ", 
      SuperscriptBox["Z", "2"], 
      SuperscriptBox["\[DoubleStruckCapitalF]", 
       RowBox[{"(", "2", ")"}]]}], "+", 
     RowBox[{
      FractionBox["1", "6"], 
      SuperscriptBox["Z", "3"], 
      SuperscriptBox["\[DoubleStruckCapitalF]", 
       RowBox[{"(", "3", ")"}]]}], "+", 
     RowBox[{"O", "(", 
      SuperscriptBox["Z", "4"], ")"}]}]}], TraditionalForm]], "Input",
  ExpressionUUID->"270de8b8-9c96-46eb-bbb9-53520787445d"],
 ",  and the coefficient ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[DoubleStruckCapitalF]", 
    RowBox[{"(", "n", ")"}]], TraditionalForm]],ExpressionUUID->
  "163d8bf7-d40d-473d-a899-a0941c842564"],
 " of oxdex ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["Z", "n"], TraditionalForm]],ExpressionUUID->
  "0f00905e-3b82-4a0d-957c-470f17d80847"],
 " of \[DoubleStruckCapitalF] is deduced below:"
}], "Text",
 CellChangeTimes->{{3.7845842394575415`*^9, 3.7845842613849297`*^9}, 
   3.784584298028981*^9, {3.7845853438968287`*^9, 3.7845853508592176`*^9}, {
   3.784585444449055*^9, 3.784585630811797*^9}, {3.784620960625099*^9, 
   3.7846209606998997`*^9}, 3.784622598833215*^9, {3.784622773898269*^9, 
   3.7846228611919365`*^9}, {3.7846230135845966`*^9, 
   3.7846230142009478`*^9}, {3.7846230713212667`*^9, 3.784623185857115*^9}, {
   3.784623221591622*^9, 3.784623240096136*^9}, {3.7846244641307373`*^9, 
   3.7846244795275817`*^9}, {3.784667227154462*^9, 3.7846672279483404`*^9}, {
   3.8386789829255743`*^9, 
   3.8386789829544973`*^9}},ExpressionUUID->"f805b54e-0991-47df-8262-\
c8b51f4fa7d2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"\[DoubleStruckCapitalF]", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"F11", "[", 
        RowBox[{"X", ",", "Y", ",", "Z"}], "]"}], ",", 
       RowBox[{"F12", "[", 
        RowBox[{"X", ",", "Y", ",", "Z"}], "]"}], ",", 
       RowBox[{"F13", "[", 
        RowBox[{"X", ",", "Y", ",", "Z"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"F21", "[", 
        RowBox[{"X", ",", "Y", ",", "Z"}], "]"}], ",", 
       RowBox[{"F22", "[", 
        RowBox[{"X", ",", "Y", ",", "Z"}], "]"}], ",", 
       RowBox[{"F23", "[", 
        RowBox[{"X", ",", "Y", ",", "Z"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"F31", "[", 
        RowBox[{"X", ",", "Y", ",", "Z"}], "]"}], ",", 
       RowBox[{"F32", "[", 
        RowBox[{"X", ",", "Y", ",", "Z"}], "]"}], ",", 
       RowBox[{"F33", "[", 
        RowBox[{"X", ",", "Y", ",", "Z"}], "]"}]}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[DoubleStruckCapitalF]", "=", 
   RowBox[{"Normal", "[", 
    RowBox[{"Series", "[", 
     RowBox[{"\[DoubleStruckCapitalF]", ",", 
      RowBox[{"{", 
       RowBox[{"Z", ",", "0", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"\[DoubleStruckCapitalF]0", "=", 
     RowBox[{"Coefficient", "[", 
      RowBox[{"\[DoubleStruckCapitalF]", ",", "Z", ",", "0"}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"\[DoubleStruckCapitalF]1", "=", 
     RowBox[{"1", 
      RowBox[{"Coefficient", "[", 
       RowBox[{"\[DoubleStruckCapitalF]", ",", "Z", ",", "1"}], "]"}]}]}], 
    ";", "\[IndentingNewLine]", 
    RowBox[{"\[DoubleStruckCapitalF]2", "=", 
     RowBox[{"2", "*", "1", " ", 
      RowBox[{"Coefficient", "[", 
       RowBox[{"\[DoubleStruckCapitalF]", ",", "Z", ",", "2"}], "]"}]}]}], 
    ";", "\[IndentingNewLine]", 
    RowBox[{"\[DoubleStruckCapitalF]3", "=", 
     RowBox[{"3", "*", "2", "*", "1", " ", 
      RowBox[{"Coefficient", "[", 
       RowBox[{"\[DoubleStruckCapitalF]", ",", "Z", ",", "3"}], "]"}]}]}], 
    ";"}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.7845843990659122`*^9, 3.784584529345043*^9}, {
   3.7845846133076143`*^9, 3.7845846596178875`*^9}, {3.784584863497922*^9, 
   3.784584882811325*^9}, {3.7846232457370577`*^9, 3.7846232695922937`*^9}, {
   3.7846239363530607`*^9, 3.7846239447456274`*^9}, {3.7846239771410356`*^9, 
   3.7846240690174522`*^9}, {3.7846245528515882`*^9, 
   3.7846245662757072`*^9}, {3.7846253751064854`*^9, 3.7846253776257515`*^9}, 
   3.7846671757249317`*^9, {3.784676470750132*^9, 3.7846764729103565`*^9}, 
   3.7846772470451164`*^9, {3.784677492709462*^9, 3.7846775177016582`*^9}, {
   3.784677571729244*^9, 3.784677678438024*^9}, {3.784678381075884*^9, 
   3.7846783900808134`*^9}, 3.784683375460002*^9, 3.784683410468711*^9, {
   3.78468347126727*^9, 3.784683472692563*^9}, {3.7846836332386103`*^9, 
   3.784683701179025*^9}, {3.784683748724117*^9, 3.7846838230474734`*^9}, {
   3.784683893797675*^9, 3.784683909621605*^9}, {3.7846839617024384`*^9, 
   3.784683985203621*^9}, {3.7846883706779766`*^9, 3.784688380978443*^9}, {
   3.7846886175431137`*^9, 3.7846886863561773`*^9}, {3.7846887281494656`*^9, 
   3.7846889371179266`*^9}, 3.7847079180928802`*^9, {3.7855646210125856`*^9, 
   3.785564621496278*^9}, {3.7856569093455305`*^9, 3.785656915279028*^9}, {
   3.7856614066592503`*^9, 3.7856614197809253`*^9}, {3.785713711362253*^9, 
   3.785713749654805*^9}, {3.785713838897072*^9, 3.785713841630731*^9}, 
   3.785713983633813*^9, 3.7857140769282117`*^9, 3.7857260518415318`*^9, 
   3.809144953010601*^9, {3.8504781282841005`*^9, 3.850478128300833*^9}, 
   3.8562580809840803`*^9, {3.8902709388726115`*^9, 3.890270948819361*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"3286a4c7-f56b-436d-b660-d704af5e6f66"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", "\[DoubleStruckCapitalF]", "]"}]], "Input",
 CellChangeTimes->{{3.8902710092952514`*^9, 3.8902710127244415`*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"1b53193e-922b-48fa-915b-5e7900d156fa"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{
       RowBox[{
        SuperscriptBox["x1Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"1", ",", "0"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "+", 
       RowBox[{"Z", " ", 
        RowBox[{
         SuperscriptBox["x1Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        FractionBox["1", "2"], " ", 
        SuperscriptBox["Z", "2"], " ", 
        RowBox[{
         SuperscriptBox["x1Z2", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]}], 
      RowBox[{
       RowBox[{
        SuperscriptBox["x1Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"0", ",", "1"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "+", 
       RowBox[{"Z", " ", 
        RowBox[{
         SuperscriptBox["x1Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        FractionBox["1", "2"], " ", 
        SuperscriptBox["Z", "2"], " ", 
        RowBox[{
         SuperscriptBox["x1Z2", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]}], 
      RowBox[{
       RowBox[{"x1Z1", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "+", 
       RowBox[{"Z", " ", 
        RowBox[{"x1Z2", "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]}]},
     {
      RowBox[{
       RowBox[{
        SuperscriptBox["x2Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"1", ",", "0"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "+", 
       RowBox[{"Z", " ", 
        RowBox[{
         SuperscriptBox["x2Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        FractionBox["1", "2"], " ", 
        SuperscriptBox["Z", "2"], " ", 
        RowBox[{
         SuperscriptBox["x2Z2", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]}], 
      RowBox[{
       RowBox[{
        SuperscriptBox["x2Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"0", ",", "1"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "+", 
       RowBox[{"Z", " ", 
        RowBox[{
         SuperscriptBox["x2Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        FractionBox["1", "2"], " ", 
        SuperscriptBox["Z", "2"], " ", 
        RowBox[{
         SuperscriptBox["x2Z2", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]}], 
      RowBox[{
       RowBox[{"x2Z1", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "+", 
       RowBox[{"Z", " ", 
        RowBox[{"x2Z2", "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]}]},
     {
      RowBox[{
       RowBox[{
        SuperscriptBox["x3Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"1", ",", "0"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "+", 
       RowBox[{"Z", " ", 
        RowBox[{
         SuperscriptBox["x3Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        FractionBox["1", "2"], " ", 
        SuperscriptBox["Z", "2"], " ", 
        RowBox[{
         SuperscriptBox["x3Z2", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]}], 
      RowBox[{
       RowBox[{
        SuperscriptBox["x3Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"0", ",", "1"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "+", 
       RowBox[{"Z", " ", 
        RowBox[{
         SuperscriptBox["x3Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        FractionBox["1", "2"], " ", 
        SuperscriptBox["Z", "2"], " ", 
        RowBox[{
         SuperscriptBox["x3Z2", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]}], 
      RowBox[{
       RowBox[{"x3Z1", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "+", 
       RowBox[{"Z", " ", 
        RowBox[{"x3Z2", "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.890271013197072*^9, 3.890279771141021*^9, {3.890520741774293*^9, 
   3.8905207556091604`*^9}},
 CellLabel->
  "Out[36]//MatrixForm=",ExpressionUUID->"62de081e-fe7a-4b37-9446-\
e00ada104c2a"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Transpose", "[", "\[DoubleStruckCapitalF]", "]"}], ".", 
   "\[DoubleStruckCapitalF]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"FTF", "=", 
   RowBox[{"Normal", "[", 
    RowBox[{"Series", "[", 
     RowBox[{"%", ",", 
      RowBox[{"{", 
       RowBox[{"Z", ",", "0", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.855061751020009*^9, 3.855061788791773*^9}, {
   3.855062287860237*^9, 3.8550622896827707`*^9}, {3.855371667936284*^9, 
   3.855371672071772*^9}, 3.8562603252357025`*^9, 3.8905207509976683`*^9},
 CellLabel->"In[37]:=",ExpressionUUID->"cfd7110d-1634-480a-91fd-faf51dec5af4"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"\[DoubleStruckCapitalG]", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"\[Lambda]10", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], "+", 
        RowBox[{"Z", "*", 
         RowBox[{"\[Lambda]11", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}]}], ",", 
       RowBox[{"Z", " ", "\[Lambda]S"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Z", " ", "\[Lambda]S"}], ",", 
       RowBox[{
        RowBox[{"\[Lambda]20", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], "+", 
        RowBox[{"Z", "*", 
         RowBox[{"\[Lambda]21", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}]}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", "\[DoubleStruckCapitalG]", "]"}]}], "Input",
 CellChangeTimes->{{3.8551294650540233`*^9, 3.8551294891456575`*^9}, {
  3.8551358282105713`*^9, 3.8551358300080013`*^9}, {3.8562601564735413`*^9, 
  3.8562601646502132`*^9}, {3.8902709389082837`*^9, 3.8902709488410044`*^9}, {
  3.8902711979600496`*^9, 3.890271205378999*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"39d37a88-2176-482b-8432-840e3f1918b2"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{
       RowBox[{"\[Lambda]10", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "+", 
       RowBox[{"Z", " ", 
        RowBox[{"\[Lambda]11", "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]}], 
      RowBox[{"Z", " ", "\[Lambda]S"}], "0"},
     {
      RowBox[{"Z", " ", "\[Lambda]S"}], 
      RowBox[{
       RowBox[{"\[Lambda]20", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "+", 
       RowBox[{"Z", " ", 
        RowBox[{"\[Lambda]21", "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]}], "0"},
     {"0", "0", "1"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.8902712253883533`*^9, 3.8902797712395315`*^9, {3.8905207419001265`*^9, 
   3.8905207557185917`*^9}},
 CellLabel->
  "Out[40]//MatrixForm=",ExpressionUUID->"1fc9740a-d827-42fe-8198-\
ccfc4308333c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Assum1", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"EE", "[", 
      RowBox[{"X", ",", "Y"}], "]"}], "==", 
     RowBox[{
      SuperscriptBox[
       RowBox[{
        SuperscriptBox["x1Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"1", ",", "0"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "2"], "+", 
      SuperscriptBox[
       RowBox[{
        SuperscriptBox["x2Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"1", ",", "0"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "2"], "+", 
      SuperscriptBox[
       RowBox[{
        SuperscriptBox["x3Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"1", ",", "0"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "2"]}]}], "&&", 
    RowBox[{
     RowBox[{"FF", "[", 
      RowBox[{"X", ",", "Y"}], "]"}], "==", 
     RowBox[{
      RowBox[{
       RowBox[{
        SuperscriptBox["x1Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"0", ",", "1"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}], " ", 
       RowBox[{
        SuperscriptBox["x1Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"1", ",", "0"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
      RowBox[{
       RowBox[{
        SuperscriptBox["x2Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"0", ",", "1"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}], " ", 
       RowBox[{
        SuperscriptBox["x2Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"1", ",", "0"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
      RowBox[{
       RowBox[{
        SuperscriptBox["x3Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"0", ",", "1"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}], " ", 
       RowBox[{
        SuperscriptBox["x3Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"1", ",", "0"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}]}]}]}], " ", "&&", 
    RowBox[{
     RowBox[{"GG", "[", 
      RowBox[{"X", ",", "Y"}], "]"}], "==", 
     RowBox[{
      SuperscriptBox[
       RowBox[{
        SuperscriptBox["x1Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"0", ",", "1"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "2"], "+", 
      SuperscriptBox[
       RowBox[{
        SuperscriptBox["x2Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"0", ",", "1"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "2"], "+", 
      SuperscriptBox[
       RowBox[{
        SuperscriptBox["x3Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"0", ",", "1"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "2"]}]}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8550619944914665`*^9, 3.855062034775299*^9}, {
  3.8551193073143373`*^9, 3.855119319142826*^9}, {3.8562601740115733`*^9, 
  3.8562601928545084`*^9}, {3.8562602578615217`*^9, 3.8562603034367085`*^9}, {
  3.8902709389373074`*^9, 3.8902709488822064`*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"9dc70f68-a3c9-4721-ab5a-c2951a1c3ed1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{"FTF", ",", "Assum1"}], "]"}]], "Input",
 CellChangeTimes->{{3.8550623119991426`*^9, 3.855062319468618*^9}, 
   3.8553717023524895`*^9, 3.8562602396858835`*^9},
 CellLabel->"In[42]:=",ExpressionUUID->"2b2a7f95-15b5-4f28-a8e4-2c9c8a9770e0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"EE", "[", 
       RowBox[{"X", ",", "Y"}], "]"}], "+", 
      RowBox[{"Z", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Z", " ", 
          SuperscriptBox[
           RowBox[{
            SuperscriptBox["x1Z1", 
             TagBox[
              RowBox[{"(", 
               RowBox[{"1", ",", "0"}], ")"}],
              Derivative],
             MultilineFunction->None], "[", 
            RowBox[{"X", ",", "Y"}], "]"}], "2"]}], "+", 
         RowBox[{
          RowBox[{
           SuperscriptBox["x1Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", " ", 
             RowBox[{
              SuperscriptBox["x1Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{"Z", " ", 
             RowBox[{
              SuperscriptBox["x1Z2", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], "+", 
         RowBox[{"Z", " ", 
          SuperscriptBox[
           RowBox[{
            SuperscriptBox["x2Z1", 
             TagBox[
              RowBox[{"(", 
               RowBox[{"1", ",", "0"}], ")"}],
              Derivative],
             MultilineFunction->None], "[", 
            RowBox[{"X", ",", "Y"}], "]"}], "2"]}], "+", 
         RowBox[{
          RowBox[{
           SuperscriptBox["x2Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", " ", 
             RowBox[{
              SuperscriptBox["x2Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{"Z", " ", 
             RowBox[{
              SuperscriptBox["x2Z2", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], "+", 
         RowBox[{"Z", " ", 
          SuperscriptBox[
           RowBox[{
            SuperscriptBox["x3Z1", 
             TagBox[
              RowBox[{"(", 
               RowBox[{"1", ",", "0"}], ")"}],
              Derivative],
             MultilineFunction->None], "[", 
            RowBox[{"X", ",", "Y"}], "]"}], "2"]}], "+", 
         RowBox[{
          RowBox[{
           SuperscriptBox["x3Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", " ", 
             RowBox[{
              SuperscriptBox["x3Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{"Z", " ", 
             RowBox[{
              SuperscriptBox["x3Z2", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}], ")"}]}]}], ",", 
     RowBox[{
      RowBox[{"FF", "[", 
       RowBox[{"X", ",", "Y"}], "]"}], "+", 
      RowBox[{
       FractionBox["1", "2"], " ", "Z", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Z", " ", 
          RowBox[{
           SuperscriptBox["x1Z2", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x1Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{"2", " ", 
          RowBox[{
           SuperscriptBox["x1Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             SuperscriptBox["x1Z0", 
              TagBox[
               RowBox[{"(", 
                RowBox[{"1", ",", "0"}], ")"}],
               Derivative],
              MultilineFunction->None], "[", 
             RowBox[{"X", ",", "Y"}], "]"}], "+", 
            RowBox[{"Z", " ", 
             RowBox[{
              SuperscriptBox["x1Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], "+", 
         RowBox[{
          RowBox[{
           SuperscriptBox["x1Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", " ", 
             RowBox[{
              SuperscriptBox["x1Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{"Z", " ", 
             RowBox[{
              SuperscriptBox["x1Z2", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], "+", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", " ", 
             RowBox[{
              SuperscriptBox["x2Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{"Z", " ", 
             RowBox[{
              SuperscriptBox["x2Z2", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}], " ", 
          RowBox[{
           SuperscriptBox["x2Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{"2", " ", "Z", " ", 
          RowBox[{
           SuperscriptBox["x2Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x2Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{
           SuperscriptBox["x2Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", " ", 
             RowBox[{
              SuperscriptBox["x2Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{"Z", " ", 
             RowBox[{
              SuperscriptBox["x2Z2", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], "+", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", " ", 
             RowBox[{
              SuperscriptBox["x3Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{"Z", " ", 
             RowBox[{
              SuperscriptBox["x3Z2", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}], " ", 
          RowBox[{
           SuperscriptBox["x3Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{"2", " ", "Z", " ", 
          RowBox[{
           SuperscriptBox["x3Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x3Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{
           SuperscriptBox["x3Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", " ", 
             RowBox[{
              SuperscriptBox["x3Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{"Z", " ", 
             RowBox[{
              SuperscriptBox["x3Z2", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}], ")"}]}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"x1Z1", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], " ", 
       RowBox[{
        SuperscriptBox["x1Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"1", ",", "0"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
      RowBox[{
       RowBox[{"x2Z1", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], " ", 
       RowBox[{
        SuperscriptBox["x2Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"1", ",", "0"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
      RowBox[{
       RowBox[{"x3Z1", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], " ", 
       RowBox[{
        SuperscriptBox["x3Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"1", ",", "0"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
      RowBox[{"Z", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"x1Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x1Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x1Z1", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x1Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x2Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x2Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x2Z1", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x2Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x3Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x3Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x3Z1", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x3Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], "+", 
      RowBox[{
       FractionBox["1", "2"], " ", 
       SuperscriptBox["Z", "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"2", " ", 
          RowBox[{"x1Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x1Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x1Z1", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x1Z2", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{"2", " ", 
          RowBox[{"x2Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x2Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x2Z1", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x2Z2", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{"2", " ", 
          RowBox[{"x3Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x3Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x3Z1", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x3Z2", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"FF", "[", 
       RowBox[{"X", ",", "Y"}], "]"}], "+", 
      RowBox[{
       FractionBox["1", "2"], " ", "Z", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Z", " ", 
          RowBox[{
           SuperscriptBox["x1Z2", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x1Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{"2", " ", 
          RowBox[{
           SuperscriptBox["x1Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             SuperscriptBox["x1Z0", 
              TagBox[
               RowBox[{"(", 
                RowBox[{"1", ",", "0"}], ")"}],
               Derivative],
              MultilineFunction->None], "[", 
             RowBox[{"X", ",", "Y"}], "]"}], "+", 
            RowBox[{"Z", " ", 
             RowBox[{
              SuperscriptBox["x1Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], "+", 
         RowBox[{
          RowBox[{
           SuperscriptBox["x1Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", " ", 
             RowBox[{
              SuperscriptBox["x1Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{"Z", " ", 
             RowBox[{
              SuperscriptBox["x1Z2", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], "+", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", " ", 
             RowBox[{
              SuperscriptBox["x2Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{"Z", " ", 
             RowBox[{
              SuperscriptBox["x2Z2", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}], " ", 
          RowBox[{
           SuperscriptBox["x2Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{"2", " ", "Z", " ", 
          RowBox[{
           SuperscriptBox["x2Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x2Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{
           SuperscriptBox["x2Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", " ", 
             RowBox[{
              SuperscriptBox["x2Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{"Z", " ", 
             RowBox[{
              SuperscriptBox["x2Z2", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], "+", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", " ", 
             RowBox[{
              SuperscriptBox["x3Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{"Z", " ", 
             RowBox[{
              SuperscriptBox["x3Z2", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}], " ", 
          RowBox[{
           SuperscriptBox["x3Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{"2", " ", "Z", " ", 
          RowBox[{
           SuperscriptBox["x3Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x3Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{
           SuperscriptBox["x3Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", " ", 
             RowBox[{
              SuperscriptBox["x3Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{"Z", " ", 
             RowBox[{
              SuperscriptBox["x3Z2", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}], ")"}]}]}], ",", 
     RowBox[{
      RowBox[{"GG", "[", 
       RowBox[{"X", ",", "Y"}], "]"}], "+", 
      RowBox[{"Z", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Z", " ", 
          SuperscriptBox[
           RowBox[{
            SuperscriptBox["x1Z1", 
             TagBox[
              RowBox[{"(", 
               RowBox[{"0", ",", "1"}], ")"}],
              Derivative],
             MultilineFunction->None], "[", 
            RowBox[{"X", ",", "Y"}], "]"}], "2"]}], "+", 
         RowBox[{
          RowBox[{
           SuperscriptBox["x1Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", " ", 
             RowBox[{
              SuperscriptBox["x1Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{"Z", " ", 
             RowBox[{
              SuperscriptBox["x1Z2", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], "+", 
         RowBox[{"Z", " ", 
          SuperscriptBox[
           RowBox[{
            SuperscriptBox["x2Z1", 
             TagBox[
              RowBox[{"(", 
               RowBox[{"0", ",", "1"}], ")"}],
              Derivative],
             MultilineFunction->None], "[", 
            RowBox[{"X", ",", "Y"}], "]"}], "2"]}], "+", 
         RowBox[{
          RowBox[{
           SuperscriptBox["x2Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", " ", 
             RowBox[{
              SuperscriptBox["x2Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{"Z", " ", 
             RowBox[{
              SuperscriptBox["x2Z2", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], "+", 
         RowBox[{"Z", " ", 
          SuperscriptBox[
           RowBox[{
            SuperscriptBox["x3Z1", 
             TagBox[
              RowBox[{"(", 
               RowBox[{"0", ",", "1"}], ")"}],
              Derivative],
             MultilineFunction->None], "[", 
            RowBox[{"X", ",", "Y"}], "]"}], "2"]}], "+", 
         RowBox[{
          RowBox[{
           SuperscriptBox["x3Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", " ", 
             RowBox[{
              SuperscriptBox["x3Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{"Z", " ", 
             RowBox[{
              SuperscriptBox["x3Z2", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}], ")"}]}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"x1Z1", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], " ", 
       RowBox[{
        SuperscriptBox["x1Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"0", ",", "1"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
      RowBox[{
       RowBox[{"x2Z1", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], " ", 
       RowBox[{
        SuperscriptBox["x2Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"0", ",", "1"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
      RowBox[{
       RowBox[{"x3Z1", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], " ", 
       RowBox[{
        SuperscriptBox["x3Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"0", ",", "1"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
      RowBox[{"Z", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"x1Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x1Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x1Z1", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x1Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x2Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x2Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x2Z1", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x2Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x3Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x3Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x3Z1", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x3Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], "+", 
      RowBox[{
       FractionBox["1", "2"], " ", 
       SuperscriptBox["Z", "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"2", " ", 
          RowBox[{"x1Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x1Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x1Z1", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x1Z2", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{"2", " ", 
          RowBox[{"x2Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x2Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x2Z1", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x2Z2", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{"2", " ", 
          RowBox[{"x3Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x3Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x3Z1", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x3Z2", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"x1Z1", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], " ", 
       RowBox[{
        SuperscriptBox["x1Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"1", ",", "0"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
      RowBox[{
       RowBox[{"x2Z1", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], " ", 
       RowBox[{
        SuperscriptBox["x2Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"1", ",", "0"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
      RowBox[{
       RowBox[{"x3Z1", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], " ", 
       RowBox[{
        SuperscriptBox["x3Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"1", ",", "0"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
      RowBox[{"Z", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"x1Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x1Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x1Z1", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x1Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x2Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x2Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x2Z1", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x2Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x3Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x3Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x3Z1", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x3Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], "+", 
      RowBox[{
       FractionBox["1", "2"], " ", 
       SuperscriptBox["Z", "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"2", " ", 
          RowBox[{"x1Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x1Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x1Z1", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x1Z2", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{"2", " ", 
          RowBox[{"x2Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x2Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x2Z1", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x2Z2", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{"2", " ", 
          RowBox[{"x3Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x3Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x3Z1", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x3Z2", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"1", ",", "0"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"x1Z1", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], " ", 
       RowBox[{
        SuperscriptBox["x1Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"0", ",", "1"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
      RowBox[{
       RowBox[{"x2Z1", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], " ", 
       RowBox[{
        SuperscriptBox["x2Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"0", ",", "1"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
      RowBox[{
       RowBox[{"x3Z1", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], " ", 
       RowBox[{
        SuperscriptBox["x3Z0", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"0", ",", "1"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
      RowBox[{"Z", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"x1Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x1Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x1Z1", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x1Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x2Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x2Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x2Z1", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x2Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x3Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x3Z0", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x3Z1", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x3Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], "+", 
      RowBox[{
       FractionBox["1", "2"], " ", 
       SuperscriptBox["Z", "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"2", " ", 
          RowBox[{"x1Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x1Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x1Z1", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x1Z2", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{"2", " ", 
          RowBox[{"x2Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x2Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x2Z1", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x2Z2", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{"2", " ", 
          RowBox[{"x3Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x3Z1", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x3Z1", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{
           SuperscriptBox["x3Z2", 
            TagBox[
             RowBox[{"(", 
              RowBox[{"0", ",", "1"}], ")"}],
             Derivative],
            MultilineFunction->None], "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}], ",", 
     RowBox[{
      SuperscriptBox[
       RowBox[{"x1Z1", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "2"], "+", 
      SuperscriptBox[
       RowBox[{"x2Z1", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "2"], "+", 
      SuperscriptBox[
       RowBox[{"x3Z1", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "2"], "+", 
      RowBox[{"2", " ", "Z", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"x1Z1", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{"x1Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x2Z1", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{"x2Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"x3Z1", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{"x3Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], "+", 
      RowBox[{
       SuperscriptBox["Z", "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"x1Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], "2"], "+", 
         SuperscriptBox[
          RowBox[{"x2Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], "2"], "+", 
         SuperscriptBox[
          RowBox[{"x3Z2", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], "2"]}], ")"}]}]}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.8902712304455333`*^9, 3.8902797719203305`*^9, 
  3.890520757705608*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"750a897b-f727-4e6f-8e35-4163700acfba"]
}, Open  ]],

Cell[TextData[{
 "Calculate ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["G", 
     RowBox[{"-", "1"}]], 
    SuperscriptBox["F", "T"], 
    SuperscriptBox["FG", 
     RowBox[{"-", "1"}]]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "5e2f6dce-c81c-43a0-9910-b3b94ae146f4"]
}], "Text",
 CellChangeTimes->{{3.8550623807412252`*^9, 
  3.8550624056170444`*^9}},ExpressionUUID->"3157e3e6-666c-43f8-9346-\
499bb424ab80"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Inverse", "[", "\[DoubleStruckCapitalG]", "]"}], ".", "FTF", ".", 
   RowBox[{"Inverse", "[", "\[DoubleStruckCapitalG]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ATA", "=", 
   RowBox[{"Normal", "[", 
    RowBox[{"Series", "[", 
     RowBox[{"%", ",", 
      RowBox[{"{", 
       RowBox[{"Z", ",", "0", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ATAZ0", "=", 
   RowBox[{"Simplify", "[", 
    RowBox[{
     RowBox[{"Coefficient", "[", 
      RowBox[{"ATA", ",", "Z", ",", "0"}], "]"}], ",", "Assum1"}], "]"}]}], 
  RowBox[{"(*", 
   RowBox[{"/.", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"FF", "[", 
       RowBox[{"X", ",", "Y"}], "]"}], "\[Rule]", "0"}], "}"}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"ATAZ1", "=", 
  RowBox[{"Simplify", "[", 
   RowBox[{
    RowBox[{"Coefficient", "[", 
     RowBox[{"ATA", ",", "Z", ",", "1"}], "]"}], ",", "Assum1"}], "]"}], 
  RowBox[{"(*", 
   RowBox[{"/.", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"FF", "[", 
       RowBox[{"X", ",", "Y"}], "]"}], "\[Rule]", "0"}], "}"}]}], 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.855064258645548*^9, 3.855064284763798*^9}, {
   3.8550652777137494`*^9, 3.8550652795759287`*^9}, 3.855066514695488*^9, {
   3.855067091612458*^9, 3.8550671050375767`*^9}, 3.8550671434644785`*^9, {
   3.8550676666998568`*^9, 3.8550676697477846`*^9}, 3.8550681101574783`*^9, {
   3.85511595216278*^9, 3.855115955263857*^9}, 3.8551193220868654`*^9, {
   3.855119423299148*^9, 3.855119425701251*^9}, 3.855124671060169*^9, {
   3.8551289635820875`*^9, 3.855128968738278*^9}, {3.8551338423712826`*^9, 
   3.855133878793126*^9}, {3.8551345033844395`*^9, 3.855134511566886*^9}, 
   3.855138168145023*^9, {3.8553717149283514`*^9, 3.8553717212669096`*^9}, {
   3.8562601928744807`*^9, 3.8562601928777857`*^9}, {3.8562603437779627`*^9, 
   3.856260345820735*^9}, {3.856260681910477*^9, 3.856260710241722*^9}, 
   3.856261666691805*^9, {3.890270939310088*^9, 3.890270949086025*^9}, {
   3.8905207657124505`*^9, 3.890520805804433*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"cc087c58-c3ae-4b02-9c85-1cb0c2237f56"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{"EE", "[", 
       RowBox[{"X", ",", "Y"}], "]"}], 
      SuperscriptBox[
       RowBox[{"\[Lambda]10", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "2"]], ",", 
     FractionBox[
      RowBox[{"FF", "[", 
       RowBox[{"X", ",", "Y"}], "]"}], 
      RowBox[{
       RowBox[{"\[Lambda]10", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], " ", 
       RowBox[{"\[Lambda]20", "[", 
        RowBox[{"X", ",", "Y"}], "]"}]}]], ",", 
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"x1Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x1Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x2Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x2Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x3Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x3Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]}], 
      RowBox[{"\[Lambda]10", "[", 
       RowBox[{"X", ",", "Y"}], "]"}]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{"FF", "[", 
       RowBox[{"X", ",", "Y"}], "]"}], 
      RowBox[{
       RowBox[{"\[Lambda]10", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], " ", 
       RowBox[{"\[Lambda]20", "[", 
        RowBox[{"X", ",", "Y"}], "]"}]}]], ",", 
     FractionBox[
      RowBox[{"GG", "[", 
       RowBox[{"X", ",", "Y"}], "]"}], 
      SuperscriptBox[
       RowBox[{"\[Lambda]20", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "2"]], ",", 
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"x1Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x1Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x2Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x2Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x3Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x3Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]}], 
      RowBox[{"\[Lambda]20", "[", 
       RowBox[{"X", ",", "Y"}], "]"}]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"x1Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x1Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x2Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x2Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x3Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x3Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]}], 
      RowBox[{"\[Lambda]10", "[", 
       RowBox[{"X", ",", "Y"}], "]"}]], ",", 
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"x1Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x1Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x2Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x2Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x3Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x3Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]}], 
      RowBox[{"\[Lambda]20", "[", 
       RowBox[{"X", ",", "Y"}], "]"}]], ",", 
     RowBox[{
      SuperscriptBox[
       RowBox[{"x1Z1", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "2"], "+", 
      SuperscriptBox[
       RowBox[{"x2Z1", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "2"], "+", 
      SuperscriptBox[
       RowBox[{"x3Z1", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "2"]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.8902712645143757`*^9, 3.8902797720499816`*^9, {3.890520791067016*^9, 
   3.890520807562274*^9}},
 CellLabel->"Out[55]=",ExpressionUUID->"2c5e5390-1005-48fc-a275-20ab67bb139d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{"2", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"-", 
           RowBox[{"EE", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}], " ", 
          RowBox[{"\[Lambda]11", "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"\[Lambda]10", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", 
             FractionBox[
              RowBox[{"\[Lambda]S", " ", 
               RowBox[{"FF", "[", 
                RowBox[{"X", ",", "Y"}], "]"}]}], 
              RowBox[{"\[Lambda]20", "[", 
               RowBox[{"X", ",", "Y"}], "]"}]]}], "+", 
            RowBox[{
             RowBox[{
              SuperscriptBox["x1Z0", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}], " ", 
             RowBox[{
              SuperscriptBox["x1Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{
             RowBox[{
              SuperscriptBox["x2Z0", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}], " ", 
             RowBox[{
              SuperscriptBox["x2Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{
             RowBox[{
              SuperscriptBox["x3Z0", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}], " ", 
             RowBox[{
              SuperscriptBox["x3Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}], ")"}]}], 
      SuperscriptBox[
       RowBox[{"\[Lambda]10", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "3"]], ",", 
     RowBox[{
      FractionBox["1", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], "2"], " ", 
        SuperscriptBox[
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], "2"]}]], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "\[Lambda]S"}], " ", 
         RowBox[{"GG", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
        RowBox[{"\[Lambda]S", " ", 
         RowBox[{"EE", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
        RowBox[{
         RowBox[{"FF", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"\[Lambda]11", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]20", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"\[Lambda]10", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]21", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], ",", 
     RowBox[{
      FractionBox["1", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], "2"], " ", 
        RowBox[{"\[Lambda]20", "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "\[Lambda]S"}], " ", 
         RowBox[{"x1Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
        RowBox[{"\[Lambda]S", " ", 
         RowBox[{"x2Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
        RowBox[{"\[Lambda]S", " ", 
         RowBox[{"x3Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"x1Z2", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]10", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
           RowBox[{
            RowBox[{"x1Z1", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]11", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"x1Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"x2Z2", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]10", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
           RowBox[{
            RowBox[{"x2Z1", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]11", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"x2Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"x3Z2", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]10", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
           RowBox[{
            RowBox[{"x3Z1", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]11", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"x3Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      FractionBox["1", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], "2"], " ", 
        SuperscriptBox[
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], "2"]}]], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "\[Lambda]S"}], " ", 
         RowBox[{"GG", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
        RowBox[{"\[Lambda]S", " ", 
         RowBox[{"EE", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
        RowBox[{
         RowBox[{"FF", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"\[Lambda]11", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]20", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"\[Lambda]10", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]21", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], ",", 
     FractionBox[
      RowBox[{"2", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", 
          FractionBox[
           RowBox[{"\[Lambda]S", " ", 
            RowBox[{"FF", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]20", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], 
           RowBox[{"\[Lambda]10", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]]}], "-", 
         RowBox[{
          RowBox[{"GG", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{"\[Lambda]21", "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"\[Lambda]20", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{
              SuperscriptBox["x1Z0", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}], " ", 
             RowBox[{
              SuperscriptBox["x1Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{
             RowBox[{
              SuperscriptBox["x2Z0", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}], " ", 
             RowBox[{
              SuperscriptBox["x2Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{
             RowBox[{
              SuperscriptBox["x3Z0", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}], " ", 
             RowBox[{
              SuperscriptBox["x3Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}], ")"}]}], 
      SuperscriptBox[
       RowBox[{"\[Lambda]20", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "3"]], ",", 
     RowBox[{
      FractionBox["1", 
       RowBox[{
        RowBox[{"\[Lambda]10", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        SuperscriptBox[
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], "2"]}]], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"x1Z2", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]20", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
           RowBox[{
            RowBox[{"x1Z1", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]21", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"x1Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"x2Z2", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]20", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
           RowBox[{
            RowBox[{"x2Z1", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]21", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"x2Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"x3Z2", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]20", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
           RowBox[{
            RowBox[{"x3Z1", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]21", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"x3Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
        RowBox[{"\[Lambda]S", " ", 
         RowBox[{"x1Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
        RowBox[{"\[Lambda]S", " ", 
         RowBox[{"x2Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
        RowBox[{"\[Lambda]S", " ", 
         RowBox[{"x3Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      FractionBox["1", 
       SuperscriptBox[
        RowBox[{"\[Lambda]10", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], "2"]], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", 
         FractionBox[
          RowBox[{"\[Lambda]S", " ", 
           RowBox[{"\[Lambda]10", "[", 
            RowBox[{"X", ",", "Y"}], "]"}], " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"x1Z1", "[", 
               RowBox[{"X", ",", "Y"}], "]"}], " ", 
              RowBox[{
               SuperscriptBox["x1Z0", 
                TagBox[
                 RowBox[{"(", 
                  RowBox[{"0", ",", "1"}], ")"}],
                 Derivative],
                MultilineFunction->None], "[", 
               RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
             RowBox[{
              RowBox[{"x2Z1", "[", 
               RowBox[{"X", ",", "Y"}], "]"}], " ", 
              RowBox[{
               SuperscriptBox["x2Z0", 
                TagBox[
                 RowBox[{"(", 
                  RowBox[{"0", ",", "1"}], ")"}],
                 Derivative],
                MultilineFunction->None], "[", 
               RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
             RowBox[{
              RowBox[{"x3Z1", "[", 
               RowBox[{"X", ",", "Y"}], "]"}], " ", 
              RowBox[{
               SuperscriptBox["x3Z0", 
                TagBox[
                 RowBox[{"(", 
                  RowBox[{"0", ",", "1"}], ")"}],
                 Derivative],
                MultilineFunction->None], "[", 
               RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], 
          RowBox[{"\[Lambda]20", "[", 
           RowBox[{"X", ",", "Y"}], "]"}]]}], "+", 
        RowBox[{
         RowBox[{"x1Z2", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
        RowBox[{
         RowBox[{"x1Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]11", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"x1Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"x2Z2", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
        RowBox[{
         RowBox[{"x2Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]11", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"x2Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"x3Z2", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
        RowBox[{
         RowBox[{"x3Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]11", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"x3Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], ",", 
     RowBox[{
      FractionBox["1", 
       SuperscriptBox[
        RowBox[{"\[Lambda]20", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], "2"]], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"x1Z2", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
        RowBox[{
         RowBox[{"x1Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]21", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"x1Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"x2Z2", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
        RowBox[{
         RowBox[{"x2Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]21", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"x2Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"x3Z2", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
        RowBox[{
         RowBox[{"x3Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]21", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"x3Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
        FractionBox[
         RowBox[{"\[Lambda]S", " ", 
          RowBox[{"\[Lambda]20", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"x1Z1", "[", 
              RowBox[{"X", ",", "Y"}], "]"}], " ", 
             RowBox[{
              SuperscriptBox["x1Z0", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{
             RowBox[{"x2Z1", "[", 
              RowBox[{"X", ",", "Y"}], "]"}], " ", 
             RowBox[{
              SuperscriptBox["x2Z0", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{
             RowBox[{"x3Z1", "[", 
              RowBox[{"X", ",", "Y"}], "]"}], " ", 
             RowBox[{
              SuperscriptBox["x3Z0", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]]}], ")"}]}], ",", 
     RowBox[{"2", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"x1Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"x1Z2", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"x2Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"x2Z2", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"x3Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"x3Z2", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.8902712645143757`*^9, 3.8902797720499816`*^9, {3.890520791067016*^9, 
   3.89052080812577*^9}},
 CellLabel->"Out[56]=",ExpressionUUID->"0b2f8c9c-b402-464c-89c8-2f57efbb4d84"]
}, Open  ]],

Cell["Try to simplify DrDZ.DrDX,   DrDZ.DrDY", "Text",
 CellChangeTimes->{{3.855066888691357*^9, 3.855066898279348*^9}, {
  3.8550677318392553`*^9, 3.855067732760723*^9}, {3.8551153708396807`*^9, 
  3.855115393547357*^9}},ExpressionUUID->"cd03b4d2-7056-4d4a-8435-\
ddd2610c856a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Dr0DX", "=", 
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"x1Z0", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], ",", 
       RowBox[{"x2Z0", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], ",", 
       RowBox[{"x3Z0", "[", 
        RowBox[{"X", ",", "Y"}], "]"}]}], "}"}], ",", "X"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Dr0DY", "=", 
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"x1Z0", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], ",", 
       RowBox[{"x2Z0", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], ",", 
       RowBox[{"x3Z0", "[", 
        RowBox[{"X", ",", "Y"}], "]"}]}], "}"}], ",", "Y"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"r1", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x1Z1", "[", 
      RowBox[{"X", ",", "Y"}], "]"}], ",", 
     RowBox[{"x2Z1", "[", 
      RowBox[{"X", ",", "Y"}], "]"}], ",", 
     RowBox[{"x3Z1", "[", 
      RowBox[{"X", ",", "Y"}], "]"}]}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.855066909987838*^9, 3.8550669407105865`*^9}, {
  3.855115397918679*^9, 3.855115482076393*^9}, {3.85511600565003*^9, 
  3.8551160370271907`*^9}, {3.8551160800493608`*^9, 3.8551161007195263`*^9}, {
  3.855116191381317*^9, 3.855116192486845*^9}, {3.855119387569742*^9, 
  3.855119388484047*^9}, {3.8562601943099437`*^9, 3.856260194319109*^9}, {
  3.856260379911542*^9, 3.856260431638316*^9}, {3.8562612073337684`*^9, 
  3.856261214153731*^9}, {3.890270940084096*^9, 3.890270949601959*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"2724c6a2-a3f4-4bd5-89d0-1b306c8e372f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Assum2", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"r1", ".", "r1"}], "\[Equal]", "1"}], "&&", 
    RowBox[{
     RowBox[{"Dr0DX", ".", "r1"}], "\[Equal]", "0"}], "&&", 
    RowBox[{
     RowBox[{"Dr0DY", ".", "r1"}], "\[Equal]", "0"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8551194056964245`*^9, 3.8551194109770603`*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"20c652c3-b412-4341-b514-7c056f422d47"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{"ATAZ0", ",", "Assum2"}], "]"}]], "Input",
 CellChangeTimes->{{3.85511943302564*^9, 3.8551194404807067`*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"886286b6-0e33-4300-8416-770182b1f4f7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{"EE", "[", 
       RowBox[{"X", ",", "Y"}], "]"}], 
      SuperscriptBox[
       RowBox[{"\[Lambda]10", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "2"]], ",", 
     FractionBox[
      RowBox[{"FF", "[", 
       RowBox[{"X", ",", "Y"}], "]"}], 
      RowBox[{
       RowBox[{"\[Lambda]10", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], " ", 
       RowBox[{"\[Lambda]20", "[", 
        RowBox[{"X", ",", "Y"}], "]"}]}]], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{"FF", "[", 
       RowBox[{"X", ",", "Y"}], "]"}], 
      RowBox[{
       RowBox[{"\[Lambda]10", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], " ", 
       RowBox[{"\[Lambda]20", "[", 
        RowBox[{"X", ",", "Y"}], "]"}]}]], ",", 
     FractionBox[
      RowBox[{"GG", "[", 
       RowBox[{"X", ",", "Y"}], "]"}], 
      SuperscriptBox[
       RowBox[{"\[Lambda]20", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "2"]], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.8902722783576775`*^9, 3.890279773660967*^9, {3.8905208025032086`*^9, 
   3.890520816146392*^9}},
 CellLabel->"Out[61]=",ExpressionUUID->"0f8d5b9c-a67d-457a-a8d5-4fb6d5338340"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{"ATAZ1", ",", "Assum2"}], "]"}]], "Input",
 CellChangeTimes->{3.8551382225820847`*^9},
 CellLabel->"In[62]:=",ExpressionUUID->"62e01f9f-9683-4802-9d58-bcb4af49610d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{"2", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"-", 
           RowBox[{"EE", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}], " ", 
          RowBox[{"\[Lambda]11", "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"\[Lambda]10", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", 
             FractionBox[
              RowBox[{"\[Lambda]S", " ", 
               RowBox[{"FF", "[", 
                RowBox[{"X", ",", "Y"}], "]"}]}], 
              RowBox[{"\[Lambda]20", "[", 
               RowBox[{"X", ",", "Y"}], "]"}]]}], "+", 
            RowBox[{
             RowBox[{
              SuperscriptBox["x1Z0", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}], " ", 
             RowBox[{
              SuperscriptBox["x1Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{
             RowBox[{
              SuperscriptBox["x2Z0", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}], " ", 
             RowBox[{
              SuperscriptBox["x2Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{
             RowBox[{
              SuperscriptBox["x3Z0", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}], " ", 
             RowBox[{
              SuperscriptBox["x3Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}], ")"}]}], 
      SuperscriptBox[
       RowBox[{"\[Lambda]10", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "3"]], ",", 
     RowBox[{
      FractionBox["1", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], "2"], " ", 
        SuperscriptBox[
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], "2"]}]], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "\[Lambda]S"}], " ", 
         RowBox[{"GG", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
        RowBox[{"\[Lambda]S", " ", 
         RowBox[{"EE", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
        RowBox[{
         RowBox[{"FF", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"\[Lambda]11", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]20", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"\[Lambda]10", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]21", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], ",", 
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"x1Z2", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x1Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x1Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x1Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x2Z2", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x2Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x2Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x2Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x3Z2", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x3Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x3Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x3Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]}], 
      RowBox[{"\[Lambda]10", "[", 
       RowBox[{"X", ",", "Y"}], "]"}]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      FractionBox["1", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], "2"], " ", 
        SuperscriptBox[
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], "2"]}]], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "\[Lambda]S"}], " ", 
         RowBox[{"GG", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
        RowBox[{"\[Lambda]S", " ", 
         RowBox[{"EE", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
        RowBox[{
         RowBox[{"FF", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"\[Lambda]11", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]20", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"\[Lambda]10", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]21", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], ",", 
     FractionBox[
      RowBox[{"2", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", 
          FractionBox[
           RowBox[{"\[Lambda]S", " ", 
            RowBox[{"FF", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]20", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], 
           RowBox[{"\[Lambda]10", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]]}], "-", 
         RowBox[{
          RowBox[{"GG", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{"\[Lambda]21", "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"\[Lambda]20", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{
              SuperscriptBox["x1Z0", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}], " ", 
             RowBox[{
              SuperscriptBox["x1Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{
             RowBox[{
              SuperscriptBox["x2Z0", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}], " ", 
             RowBox[{
              SuperscriptBox["x2Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{
             RowBox[{
              SuperscriptBox["x3Z0", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}], " ", 
             RowBox[{
              SuperscriptBox["x3Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}], ")"}]}], 
      SuperscriptBox[
       RowBox[{"\[Lambda]20", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "3"]], ",", 
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"x1Z2", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x1Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x1Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x1Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x2Z2", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x2Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x2Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x2Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x3Z2", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x3Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x3Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x3Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]}], 
      RowBox[{"\[Lambda]20", "[", 
       RowBox[{"X", ",", "Y"}], "]"}]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"x1Z2", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x1Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x1Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x1Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x2Z2", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x2Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x2Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x2Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x3Z2", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x3Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x3Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x3Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]}], 
      RowBox[{"\[Lambda]10", "[", 
       RowBox[{"X", ",", "Y"}], "]"}]], ",", 
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"x1Z2", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x1Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x1Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x1Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x2Z2", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x2Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x2Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x2Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x3Z2", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x3Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x3Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x3Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]}], 
      RowBox[{"\[Lambda]20", "[", 
       RowBox[{"X", ",", "Y"}], "]"}]], ",", 
     RowBox[{"2", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"x1Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"x1Z2", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"x2Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"x2Z2", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"x3Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"x3Z2", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.8902722791117*^9, 3.8902797744209347`*^9, 
  3.8905208171793394`*^9},
 CellLabel->"Out[62]=",ExpressionUUID->"f79dd67c-4436-41a9-8f50-67982afeda48"]
}, Open  ]],

Cell[" ", "Text",
 Editable->False,
 Selectable->False,
 CellFrame->{{0, 0}, {0, 3}},
 ShowCellBracket->False,
 CellMargins->{{0, 0}, {1, 1}},
 CellElementSpacings->{"CellMinHeight"->1},
 CellFrameMargins->0,
 CellFrameColor->RGBColor[0, 0, 1],
 CellSize->{
  Inherited, 5},ExpressionUUID->"c546d01b-cf7f-4448-a418-42fc007bb4b4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{"ATAZ1", ",", 
   RowBox[{"Assum1", "&&", "Assum2"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8551188020454235`*^9, 3.8551188482627797`*^9}, {
   3.8551189755863485`*^9, 3.855118981823448*^9}, {3.855119396661251*^9, 
   3.8551194005322847`*^9}, {3.8551195079029884`*^9, 
   3.8551195380325885`*^9}, {3.8551218856271095`*^9, 
   3.8551218901860523`*^9}, {3.8551381857962546`*^9, 
   3.8551381928453207`*^9}, {3.855138298502436*^9, 3.855138300360163*^9}, 
   3.8551383679883704`*^9, 3.8562619030506153`*^9, {3.890272351265833*^9, 
   3.8902723580372667`*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"70a2529b-262d-476d-9f0b-2a31b60cc87e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{"2", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"-", 
           RowBox[{"EE", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}], " ", 
          RowBox[{"\[Lambda]11", "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"\[Lambda]10", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", 
             FractionBox[
              RowBox[{"\[Lambda]S", " ", 
               RowBox[{"FF", "[", 
                RowBox[{"X", ",", "Y"}], "]"}]}], 
              RowBox[{"\[Lambda]20", "[", 
               RowBox[{"X", ",", "Y"}], "]"}]]}], "+", 
            RowBox[{
             RowBox[{
              SuperscriptBox["x1Z0", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}], " ", 
             RowBox[{
              SuperscriptBox["x1Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{
             RowBox[{
              SuperscriptBox["x2Z0", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}], " ", 
             RowBox[{
              SuperscriptBox["x2Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{
             RowBox[{
              SuperscriptBox["x3Z0", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}], " ", 
             RowBox[{
              SuperscriptBox["x3Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"1", ",", "0"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}], ")"}]}], 
      SuperscriptBox[
       RowBox[{"\[Lambda]10", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "3"]], ",", 
     RowBox[{
      FractionBox["1", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], "2"], " ", 
        SuperscriptBox[
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], "2"]}]], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "\[Lambda]S"}], " ", 
         RowBox[{"GG", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
        RowBox[{"\[Lambda]S", " ", 
         RowBox[{"EE", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
        RowBox[{
         RowBox[{"FF", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"\[Lambda]11", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]20", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"\[Lambda]10", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]21", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], ",", 
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"x1Z2", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x1Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x1Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x1Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x2Z2", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x2Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x2Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x2Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x3Z2", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x3Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x3Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x3Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]}], 
      RowBox[{"\[Lambda]10", "[", 
       RowBox[{"X", ",", "Y"}], "]"}]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      FractionBox["1", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], "2"], " ", 
        SuperscriptBox[
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], "2"]}]], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "\[Lambda]S"}], " ", 
         RowBox[{"GG", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
        RowBox[{"\[Lambda]S", " ", 
         RowBox[{"EE", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
        RowBox[{
         RowBox[{"FF", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"\[Lambda]11", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]20", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"\[Lambda]10", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]21", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x1Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x2Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z0", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"0", ",", "1"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{
          SuperscriptBox["x3Z1", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], ",", 
     FractionBox[
      RowBox[{"2", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", 
          FractionBox[
           RowBox[{"\[Lambda]S", " ", 
            RowBox[{"FF", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]20", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], 
           RowBox[{"\[Lambda]10", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]]}], "-", 
         RowBox[{
          RowBox[{"GG", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{"\[Lambda]21", "[", 
           RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
         RowBox[{
          RowBox[{"\[Lambda]20", "[", 
           RowBox[{"X", ",", "Y"}], "]"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{
              SuperscriptBox["x1Z0", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}], " ", 
             RowBox[{
              SuperscriptBox["x1Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{
             RowBox[{
              SuperscriptBox["x2Z0", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}], " ", 
             RowBox[{
              SuperscriptBox["x2Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
            RowBox[{
             RowBox[{
              SuperscriptBox["x3Z0", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}], " ", 
             RowBox[{
              SuperscriptBox["x3Z1", 
               TagBox[
                RowBox[{"(", 
                 RowBox[{"0", ",", "1"}], ")"}],
                Derivative],
               MultilineFunction->None], "[", 
              RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}], ")"}]}], 
      SuperscriptBox[
       RowBox[{"\[Lambda]20", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "3"]], ",", 
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"x1Z2", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x1Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x1Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x1Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x2Z2", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x2Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x2Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x2Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x3Z2", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x3Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x3Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x3Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]}], 
      RowBox[{"\[Lambda]20", "[", 
       RowBox[{"X", ",", "Y"}], "]"}]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"x1Z2", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x1Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x1Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x1Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x2Z2", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x2Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x2Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x2Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x3Z2", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x3Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x3Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x3Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]}], 
      RowBox[{"\[Lambda]10", "[", 
       RowBox[{"X", ",", "Y"}], "]"}]], ",", 
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"x1Z2", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x1Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x1Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x1Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x2Z2", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x2Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x2Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x2Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x3Z2", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x3Z0", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"x3Z1", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{
         SuperscriptBox["x3Z1", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"0", ",", "1"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]}], 
      RowBox[{"\[Lambda]20", "[", 
       RowBox[{"X", ",", "Y"}], "]"}]], ",", 
     RowBox[{"2", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"x1Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"x1Z2", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"x2Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"x2Z2", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"x3Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"x3Z2", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.890272351647493*^9, 3.890272358380253*^9}, 
   3.89027978120645*^9, 3.890520826696312*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"f719e13c-598f-4d8d-a70a-e984cfcbbc37"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Assum3", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Dr0DY", ".", 
      RowBox[{"D", "[", 
       RowBox[{"r1", ",", "X"}], "]"}]}], "\[Equal]", 
     RowBox[{"-", 
      RowBox[{"MM", "[", 
       RowBox[{"X", ",", "Y"}], "]"}]}]}], "&&", 
    RowBox[{
     RowBox[{"Dr0DX", ".", 
      RowBox[{"D", "[", 
       RowBox[{"r1", ",", "Y"}], "]"}]}], "\[Equal]", 
     RowBox[{"-", 
      RowBox[{"MM", "[", 
       RowBox[{"X", ",", "Y"}], "]"}]}]}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8551237535337877`*^9, 3.855123796170726*^9}, 
   3.8551383102999277`*^9, {3.8562604684529023`*^9, 3.8562604705716877`*^9}, {
   3.856261288087948*^9, 3.8562612990077343`*^9}, {3.8902709405531697`*^9, 
   3.8902709498784904`*^9}, {3.890279727892853*^9, 3.89027972936368*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"f543fa1a-67ff-4889-bf47-606b71f18b4b"],

Cell["L and N", "Text",
 CellChangeTimes->{{3.8551384756418476`*^9, 
  3.855138479052901*^9}},ExpressionUUID->"dd86f941-b65d-40f3-a8e7-\
552245acf12f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Assum4", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Dr0DX", ".", 
      RowBox[{"D", "[", 
       RowBox[{"r1", ",", "X"}], "]"}]}], "\[Equal]", 
     RowBox[{"-", 
      RowBox[{"LL", "[", 
       RowBox[{"X", ",", "Y"}], "]"}]}]}], "&&", 
    RowBox[{
     RowBox[{"Dr0DY", ".", 
      RowBox[{"D", "[", 
       RowBox[{"r1", ",", "Y"}], "]"}]}], "\[Equal]", 
     RowBox[{"-", 
      RowBox[{"NN", "[", 
       RowBox[{"X", ",", "Y"}], "]"}]}]}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.85512396766811*^9, 3.8551240072585115`*^9}, 
   3.8551383562196813`*^9, {3.856260195029082*^9, 3.856260195030469*^9}, {
   3.85626047459979*^9, 3.856260477455225*^9}, {3.890270940562146*^9, 
   3.890270949886445*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"80563cc6-c355-42cd-9dd5-3f9ed6635224"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Simplify", "[", 
    RowBox[{"ATAZ1", ",", 
     RowBox[{"Assum1", "&&", 
      RowBox[{
       RowBox[{"r1", ".", "r1"}], "\[Equal]", "1"}], "&&", 
      RowBox[{
       RowBox[{"Dr0DX", ".", "r1"}], "\[Equal]", "DrDXdotr1"}], "&&", 
      RowBox[{
       RowBox[{"Dr0DY", ".", "r1"}], "\[Equal]", "DrDYdotr1"}]}]}], "]"}], "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"FF", "[", 
      RowBox[{"X", ",", "Y"}], "]"}], "\[Rule]", "0"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ATAZ1Sim1", "=", 
  RowBox[{"Simplify", "[", 
   RowBox[{"%", ",", 
    RowBox[{"Assum3", "&&", "Assum4"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.8551383201823826`*^9, 3.85513832193286*^9}, {
   3.8551383597827277`*^9, 3.855138361582469*^9}, {3.855138441326358*^9, 
   3.855138467264827*^9}, {3.8562617851553345`*^9, 3.8562617856079097`*^9}, {
   3.8562618214249496`*^9, 3.8562618275646496`*^9}, {3.8562618663460608`*^9, 
   3.856261885287261*^9}, {3.8902709405721197`*^9, 3.8902709498894606`*^9}, 
   3.89027279733291*^9},
 CellLabel->"In[66]:=",ExpressionUUID->"58735067-bcba-41fd-bd96-0a17210a791b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox[
       RowBox[{"2", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"LL", "[", 
            RowBox[{"X", ",", "Y"}], "]"}], " ", 
           RowBox[{"\[Lambda]10", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
          RowBox[{
           RowBox[{"EE", "[", 
            RowBox[{"X", ",", "Y"}], "]"}], " ", 
           RowBox[{"\[Lambda]11", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], 
       SuperscriptBox[
        RowBox[{"\[Lambda]10", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], "3"]]}], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{
        RowBox[{"\[Lambda]S", " ", 
         RowBox[{"GG", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"\[Lambda]S", " ", 
            RowBox[{"EE", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{"2", " ", 
            RowBox[{"MM", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]10", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}]}], 
       RowBox[{
        SuperscriptBox[
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], "2"], " ", 
        SuperscriptBox[
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], "2"]}]]}], ",", 
     RowBox[{
      FractionBox["1", 
       SuperscriptBox[
        RowBox[{"\[Lambda]10", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], "2"]], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "DrDXdotr1"}], " ", 
         RowBox[{"\[Lambda]11", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", 
            FractionBox[
             RowBox[{"DrDYdotr1", " ", "\[Lambda]S"}], 
             RowBox[{"\[Lambda]20", "[", 
              RowBox[{"X", ",", "Y"}], "]"}]]}], "+", 
           RowBox[{
            RowBox[{"x1Z2", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{
             SuperscriptBox["x1Z0", 
              TagBox[
               RowBox[{"(", 
                RowBox[{"1", ",", "0"}], ")"}],
               Derivative],
              MultilineFunction->None], "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"x1Z1", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{
             SuperscriptBox["x1Z1", 
              TagBox[
               RowBox[{"(", 
                RowBox[{"1", ",", "0"}], ")"}],
               Derivative],
              MultilineFunction->None], "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"x2Z2", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{
             SuperscriptBox["x2Z0", 
              TagBox[
               RowBox[{"(", 
                RowBox[{"1", ",", "0"}], ")"}],
               Derivative],
              MultilineFunction->None], "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"x2Z1", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{
             SuperscriptBox["x2Z1", 
              TagBox[
               RowBox[{"(", 
                RowBox[{"1", ",", "0"}], ")"}],
               Derivative],
              MultilineFunction->None], "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"x3Z2", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{
             SuperscriptBox["x3Z0", 
              TagBox[
               RowBox[{"(", 
                RowBox[{"1", ",", "0"}], ")"}],
               Derivative],
              MultilineFunction->None], "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"x3Z1", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{
             SuperscriptBox["x3Z1", 
              TagBox[
               RowBox[{"(", 
                RowBox[{"1", ",", "0"}], ")"}],
               Derivative],
              MultilineFunction->None], "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}], ")"}]}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox[
       RowBox[{
        RowBox[{"\[Lambda]S", " ", 
         RowBox[{"GG", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"\[Lambda]S", " ", 
            RowBox[{"EE", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{"2", " ", 
            RowBox[{"MM", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]10", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}]}], 
       RowBox[{
        SuperscriptBox[
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], "2"], " ", 
        SuperscriptBox[
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], "2"]}]]}], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"2", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"NN", "[", 
            RowBox[{"X", ",", "Y"}], "]"}], " ", 
           RowBox[{"\[Lambda]20", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
          RowBox[{
           RowBox[{"GG", "[", 
            RowBox[{"X", ",", "Y"}], "]"}], " ", 
           RowBox[{"\[Lambda]21", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], 
       SuperscriptBox[
        RowBox[{"\[Lambda]20", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], "3"]]}], ",", 
     RowBox[{
      FractionBox["1", 
       SuperscriptBox[
        RowBox[{"\[Lambda]20", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], "2"]], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", 
         FractionBox[
          RowBox[{"DrDXdotr1", " ", "\[Lambda]S", " ", 
           RowBox[{"\[Lambda]20", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}], 
          RowBox[{"\[Lambda]10", "[", 
           RowBox[{"X", ",", "Y"}], "]"}]]}], "-", 
        RowBox[{"DrDYdotr1", " ", 
         RowBox[{"\[Lambda]21", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"x1Z2", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{
             SuperscriptBox["x1Z0", 
              TagBox[
               RowBox[{"(", 
                RowBox[{"0", ",", "1"}], ")"}],
               Derivative],
              MultilineFunction->None], "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"x1Z1", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{
             SuperscriptBox["x1Z1", 
              TagBox[
               RowBox[{"(", 
                RowBox[{"0", ",", "1"}], ")"}],
               Derivative],
              MultilineFunction->None], "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"x2Z2", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{
             SuperscriptBox["x2Z0", 
              TagBox[
               RowBox[{"(", 
                RowBox[{"0", ",", "1"}], ")"}],
               Derivative],
              MultilineFunction->None], "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"x2Z1", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{
             SuperscriptBox["x2Z1", 
              TagBox[
               RowBox[{"(", 
                RowBox[{"0", ",", "1"}], ")"}],
               Derivative],
              MultilineFunction->None], "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"x3Z2", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{
             SuperscriptBox["x3Z0", 
              TagBox[
               RowBox[{"(", 
                RowBox[{"0", ",", "1"}], ")"}],
               Derivative],
              MultilineFunction->None], "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"x3Z1", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{
             SuperscriptBox["x3Z1", 
              TagBox[
               RowBox[{"(", 
                RowBox[{"0", ",", "1"}], ")"}],
               Derivative],
              MultilineFunction->None], "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}], ")"}]}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      FractionBox["1", 
       SuperscriptBox[
        RowBox[{"\[Lambda]10", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], "2"]], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "DrDXdotr1"}], " ", 
         RowBox[{"\[Lambda]11", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", 
            FractionBox[
             RowBox[{"DrDYdotr1", " ", "\[Lambda]S"}], 
             RowBox[{"\[Lambda]20", "[", 
              RowBox[{"X", ",", "Y"}], "]"}]]}], "+", 
           RowBox[{
            RowBox[{"x1Z2", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{
             SuperscriptBox["x1Z0", 
              TagBox[
               RowBox[{"(", 
                RowBox[{"1", ",", "0"}], ")"}],
               Derivative],
              MultilineFunction->None], "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"x1Z1", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{
             SuperscriptBox["x1Z1", 
              TagBox[
               RowBox[{"(", 
                RowBox[{"1", ",", "0"}], ")"}],
               Derivative],
              MultilineFunction->None], "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"x2Z2", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{
             SuperscriptBox["x2Z0", 
              TagBox[
               RowBox[{"(", 
                RowBox[{"1", ",", "0"}], ")"}],
               Derivative],
              MultilineFunction->None], "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"x2Z1", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{
             SuperscriptBox["x2Z1", 
              TagBox[
               RowBox[{"(", 
                RowBox[{"1", ",", "0"}], ")"}],
               Derivative],
              MultilineFunction->None], "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"x3Z2", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{
             SuperscriptBox["x3Z0", 
              TagBox[
               RowBox[{"(", 
                RowBox[{"1", ",", "0"}], ")"}],
               Derivative],
              MultilineFunction->None], "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"x3Z1", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{
             SuperscriptBox["x3Z1", 
              TagBox[
               RowBox[{"(", 
                RowBox[{"1", ",", "0"}], ")"}],
               Derivative],
              MultilineFunction->None], "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}], ")"}]}], ",", 
     RowBox[{
      FractionBox["1", 
       SuperscriptBox[
        RowBox[{"\[Lambda]20", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], "2"]], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", 
         FractionBox[
          RowBox[{"DrDXdotr1", " ", "\[Lambda]S", " ", 
           RowBox[{"\[Lambda]20", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}], 
          RowBox[{"\[Lambda]10", "[", 
           RowBox[{"X", ",", "Y"}], "]"}]]}], "-", 
        RowBox[{"DrDYdotr1", " ", 
         RowBox[{"\[Lambda]21", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"x1Z2", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{
             SuperscriptBox["x1Z0", 
              TagBox[
               RowBox[{"(", 
                RowBox[{"0", ",", "1"}], ")"}],
               Derivative],
              MultilineFunction->None], "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"x1Z1", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{
             SuperscriptBox["x1Z1", 
              TagBox[
               RowBox[{"(", 
                RowBox[{"0", ",", "1"}], ")"}],
               Derivative],
              MultilineFunction->None], "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"x2Z2", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{
             SuperscriptBox["x2Z0", 
              TagBox[
               RowBox[{"(", 
                RowBox[{"0", ",", "1"}], ")"}],
               Derivative],
              MultilineFunction->None], "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"x2Z1", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{
             SuperscriptBox["x2Z1", 
              TagBox[
               RowBox[{"(", 
                RowBox[{"0", ",", "1"}], ")"}],
               Derivative],
              MultilineFunction->None], "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"x3Z2", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{
             SuperscriptBox["x3Z0", 
              TagBox[
               RowBox[{"(", 
                RowBox[{"0", ",", "1"}], ")"}],
               Derivative],
              MultilineFunction->None], "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"x3Z1", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{
             SuperscriptBox["x3Z1", 
              TagBox[
               RowBox[{"(", 
                RowBox[{"0", ",", "1"}], ")"}],
               Derivative],
              MultilineFunction->None], "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}], ")"}]}], ",", 
     RowBox[{"2", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"x1Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"x1Z2", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"x2Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"x2Z2", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"x3Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"x3Z2", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.8902724013615475`*^9, 3.890272797722767*^9, 
  3.8902797976033216`*^9, 3.8905208585031934`*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"bd6b8706-06ef-4fb8-94f5-a15a9b514829"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Assum5", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"r1", ".", 
      RowBox[{"D", "[", 
       RowBox[{"r1", ",", "X"}], "]"}]}], "\[Equal]", "r1dotDr1DX"}], "&&", 
    RowBox[{
     RowBox[{"r1", ".", 
      RowBox[{"D", "[", 
       RowBox[{"r1", ",", "Y"}], "]"}]}], "\[Equal]", "r1dotDr1DY"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8551231149973745`*^9, 3.8551231820824656`*^9}, 
   3.8551383093334827`*^9, 3.8551383942657433`*^9, {3.8562605501833277`*^9, 
   3.856260552459073*^9}, {3.856261954357663*^9, 3.8562619669437265`*^9}, {
   3.8902709408722687`*^9, 3.890270950053048*^9}},
 CellLabel->"In[72]:=",ExpressionUUID->"bf0b49ee-e939-4334-a1ff-5e51fe45091f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ATAZ1Sim2", "=", 
  RowBox[{"Simplify", "[", 
   RowBox[{"ATAZ1Sim1", ",", "Assum5"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.855123836508614*^9, 3.855123841606876*^9}, {
  3.8551240110535955`*^9, 3.8551240127267494`*^9}, {3.855138510516903*^9, 
  3.8551385165518026`*^9}, {3.8905210309707747`*^9, 3.890521032752598*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"536834ba-2a2f-4574-b3f2-9067ac837f0a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox[
       RowBox[{"2", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"LL", "[", 
            RowBox[{"X", ",", "Y"}], "]"}], " ", 
           RowBox[{"\[Lambda]10", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
          RowBox[{
           RowBox[{"EE", "[", 
            RowBox[{"X", ",", "Y"}], "]"}], " ", 
           RowBox[{"\[Lambda]11", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], 
       SuperscriptBox[
        RowBox[{"\[Lambda]10", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], "3"]]}], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{
        RowBox[{"\[Lambda]S", " ", 
         RowBox[{"GG", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"\[Lambda]S", " ", 
            RowBox[{"EE", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{"2", " ", 
            RowBox[{"MM", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]10", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}]}], 
       RowBox[{
        SuperscriptBox[
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], "2"], " ", 
        SuperscriptBox[
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], "2"]}]]}], ",", 
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "DrDXdotr1"}], " ", 
        RowBox[{"\[Lambda]11", "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"\[Lambda]10", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{"(", 
         RowBox[{"r1dotDr1DX", "-", 
          FractionBox[
           RowBox[{"DrDYdotr1", " ", "\[Lambda]S"}], 
           RowBox[{"\[Lambda]20", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]], "+", 
          RowBox[{
           RowBox[{"x1Z2", "[", 
            RowBox[{"X", ",", "Y"}], "]"}], " ", 
           RowBox[{
            SuperscriptBox["x1Z0", 
             TagBox[
              RowBox[{"(", 
               RowBox[{"1", ",", "0"}], ")"}],
              Derivative],
             MultilineFunction->None], "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
          RowBox[{
           RowBox[{"x2Z2", "[", 
            RowBox[{"X", ",", "Y"}], "]"}], " ", 
           RowBox[{
            SuperscriptBox["x2Z0", 
             TagBox[
              RowBox[{"(", 
               RowBox[{"1", ",", "0"}], ")"}],
              Derivative],
             MultilineFunction->None], "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
          RowBox[{
           RowBox[{"x3Z2", "[", 
            RowBox[{"X", ",", "Y"}], "]"}], " ", 
           RowBox[{
            SuperscriptBox["x3Z0", 
             TagBox[
              RowBox[{"(", 
               RowBox[{"1", ",", "0"}], ")"}],
              Derivative],
             MultilineFunction->None], "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}], 
      SuperscriptBox[
       RowBox[{"\[Lambda]10", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "2"]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox[
       RowBox[{
        RowBox[{"\[Lambda]S", " ", 
         RowBox[{"GG", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"\[Lambda]S", " ", 
            RowBox[{"EE", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{"2", " ", 
            RowBox[{"MM", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]10", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}]}], 
       RowBox[{
        SuperscriptBox[
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], "2"], " ", 
        SuperscriptBox[
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], "2"]}]]}], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"2", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"NN", "[", 
            RowBox[{"X", ",", "Y"}], "]"}], " ", 
           RowBox[{"\[Lambda]20", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
          RowBox[{
           RowBox[{"GG", "[", 
            RowBox[{"X", ",", "Y"}], "]"}], " ", 
           RowBox[{"\[Lambda]21", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], 
       SuperscriptBox[
        RowBox[{"\[Lambda]20", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], "3"]]}], ",", 
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "DrDYdotr1"}], " ", 
        RowBox[{"\[Lambda]21", "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"\[Lambda]20", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{"(", 
         RowBox[{"r1dotDr1DY", "-", 
          FractionBox[
           RowBox[{"DrDXdotr1", " ", "\[Lambda]S"}], 
           RowBox[{"\[Lambda]10", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]], "+", 
          RowBox[{
           RowBox[{"x1Z2", "[", 
            RowBox[{"X", ",", "Y"}], "]"}], " ", 
           RowBox[{
            SuperscriptBox["x1Z0", 
             TagBox[
              RowBox[{"(", 
               RowBox[{"0", ",", "1"}], ")"}],
              Derivative],
             MultilineFunction->None], "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
          RowBox[{
           RowBox[{"x2Z2", "[", 
            RowBox[{"X", ",", "Y"}], "]"}], " ", 
           RowBox[{
            SuperscriptBox["x2Z0", 
             TagBox[
              RowBox[{"(", 
               RowBox[{"0", ",", "1"}], ")"}],
              Derivative],
             MultilineFunction->None], "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
          RowBox[{
           RowBox[{"x3Z2", "[", 
            RowBox[{"X", ",", "Y"}], "]"}], " ", 
           RowBox[{
            SuperscriptBox["x3Z0", 
             TagBox[
              RowBox[{"(", 
               RowBox[{"0", ",", "1"}], ")"}],
              Derivative],
             MultilineFunction->None], "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}], 
      SuperscriptBox[
       RowBox[{"\[Lambda]20", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "2"]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "DrDXdotr1"}], " ", 
        RowBox[{"\[Lambda]11", "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"\[Lambda]10", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{"(", 
         RowBox[{"r1dotDr1DX", "-", 
          FractionBox[
           RowBox[{"DrDYdotr1", " ", "\[Lambda]S"}], 
           RowBox[{"\[Lambda]20", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]], "+", 
          RowBox[{
           RowBox[{"x1Z2", "[", 
            RowBox[{"X", ",", "Y"}], "]"}], " ", 
           RowBox[{
            SuperscriptBox["x1Z0", 
             TagBox[
              RowBox[{"(", 
               RowBox[{"1", ",", "0"}], ")"}],
              Derivative],
             MultilineFunction->None], "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
          RowBox[{
           RowBox[{"x2Z2", "[", 
            RowBox[{"X", ",", "Y"}], "]"}], " ", 
           RowBox[{
            SuperscriptBox["x2Z0", 
             TagBox[
              RowBox[{"(", 
               RowBox[{"1", ",", "0"}], ")"}],
              Derivative],
             MultilineFunction->None], "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
          RowBox[{
           RowBox[{"x3Z2", "[", 
            RowBox[{"X", ",", "Y"}], "]"}], " ", 
           RowBox[{
            SuperscriptBox["x3Z0", 
             TagBox[
              RowBox[{"(", 
               RowBox[{"1", ",", "0"}], ")"}],
              Derivative],
             MultilineFunction->None], "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}], 
      SuperscriptBox[
       RowBox[{"\[Lambda]10", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "2"]], ",", 
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "DrDYdotr1"}], " ", 
        RowBox[{"\[Lambda]21", "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"\[Lambda]20", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{"(", 
         RowBox[{"r1dotDr1DY", "-", 
          FractionBox[
           RowBox[{"DrDXdotr1", " ", "\[Lambda]S"}], 
           RowBox[{"\[Lambda]10", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]], "+", 
          RowBox[{
           RowBox[{"x1Z2", "[", 
            RowBox[{"X", ",", "Y"}], "]"}], " ", 
           RowBox[{
            SuperscriptBox["x1Z0", 
             TagBox[
              RowBox[{"(", 
               RowBox[{"0", ",", "1"}], ")"}],
              Derivative],
             MultilineFunction->None], "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
          RowBox[{
           RowBox[{"x2Z2", "[", 
            RowBox[{"X", ",", "Y"}], "]"}], " ", 
           RowBox[{
            SuperscriptBox["x2Z0", 
             TagBox[
              RowBox[{"(", 
               RowBox[{"0", ",", "1"}], ")"}],
              Derivative],
             MultilineFunction->None], "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
          RowBox[{
           RowBox[{"x3Z2", "[", 
            RowBox[{"X", ",", "Y"}], "]"}], " ", 
           RowBox[{
            SuperscriptBox["x3Z0", 
             TagBox[
              RowBox[{"(", 
               RowBox[{"0", ",", "1"}], ")"}],
              Derivative],
             MultilineFunction->None], "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}], 
      SuperscriptBox[
       RowBox[{"\[Lambda]20", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "2"]], ",", 
     RowBox[{"2", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"x1Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"x1Z2", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"x2Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"x2Z2", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"x3Z1", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"x3Z2", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.8902742991473684`*^9, 3.890279797937946*^9, 
  3.8905208590474854`*^9, 3.8905210346588964`*^9},
 CellLabel->"Out[73]=",ExpressionUUID->"45a9e472-a509-40dd-b484-3c957a186f66"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"r2", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x1Z2", "[", 
      RowBox[{"X", ",", "Y"}], "]"}], ",", 
     RowBox[{"x2Z2", "[", 
      RowBox[{"X", ",", "Y"}], "]"}], ",", 
     RowBox[{"x3Z2", "[", 
      RowBox[{"X", ",", "Y"}], "]"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.890520909335087*^9, 3.890520930308886*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"28454338-42f7-4593-ae17-f7ca2a985183"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Assum6", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"r2", ".", "Dr0DX"}], "\[Equal]", "r2dotDr0DX"}], "&&", 
    RowBox[{
     RowBox[{"r2", ".", "Dr0DY"}], "\[Equal]", "r2dotDr0DY"}], "&&", 
    RowBox[{
     RowBox[{"r2", ".", "r1"}], "\[Equal]", "r2dotr1"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8551231149973745`*^9, 3.8551231820824656`*^9}, 
   3.8551383093334827`*^9, 3.8551383942657433`*^9, {3.8562605501833277`*^9, 
   3.856260552459073*^9}, {3.856261954357663*^9, 3.8562619669437265`*^9}, {
   3.8902709408722687`*^9, 3.890270950053048*^9}, 3.890520874888915*^9, {
   3.8905209341836414`*^9, 3.89052094140496*^9}, 3.8905211119412527`*^9, {
   3.8905211712525797`*^9, 3.8905212158121643`*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"d1b05f2f-6efb-403f-96c3-c3c6e20e163f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ATAZ1Sim3", "=", 
  RowBox[{"Simplify", "[", 
   RowBox[{"ATAZ1Sim2", ",", "Assum6"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.890521043523767*^9, 3.8905210479887066`*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"34c72973-217d-46c7-8751-f1bfb97e101f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox[
       RowBox[{"2", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"LL", "[", 
            RowBox[{"X", ",", "Y"}], "]"}], " ", 
           RowBox[{"\[Lambda]10", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
          RowBox[{
           RowBox[{"EE", "[", 
            RowBox[{"X", ",", "Y"}], "]"}], " ", 
           RowBox[{"\[Lambda]11", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], 
       SuperscriptBox[
        RowBox[{"\[Lambda]10", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], "3"]]}], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{
        RowBox[{"\[Lambda]S", " ", 
         RowBox[{"GG", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"\[Lambda]S", " ", 
            RowBox[{"EE", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{"2", " ", 
            RowBox[{"MM", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]10", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}]}], 
       RowBox[{
        SuperscriptBox[
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], "2"], " ", 
        SuperscriptBox[
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], "2"]}]]}], ",", 
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "DrDXdotr1"}], " ", 
        RowBox[{"\[Lambda]11", "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"\[Lambda]10", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{"(", 
         RowBox[{"r1dotDr1DX", "+", "r2dotDr0DX", "-", 
          FractionBox[
           RowBox[{"DrDYdotr1", " ", "\[Lambda]S"}], 
           RowBox[{"\[Lambda]20", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]]}], ")"}]}]}], 
      SuperscriptBox[
       RowBox[{"\[Lambda]10", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "2"]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox[
       RowBox[{
        RowBox[{"\[Lambda]S", " ", 
         RowBox[{"GG", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], " ", 
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"\[Lambda]S", " ", 
            RowBox[{"EE", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
           RowBox[{"2", " ", 
            RowBox[{"MM", "[", 
             RowBox[{"X", ",", "Y"}], "]"}], " ", 
            RowBox[{"\[Lambda]10", "[", 
             RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}], " ", 
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}]}]}], 
       RowBox[{
        SuperscriptBox[
         RowBox[{"\[Lambda]10", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], "2"], " ", 
        SuperscriptBox[
         RowBox[{"\[Lambda]20", "[", 
          RowBox[{"X", ",", "Y"}], "]"}], "2"]}]]}], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"2", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"NN", "[", 
            RowBox[{"X", ",", "Y"}], "]"}], " ", 
           RowBox[{"\[Lambda]20", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
          RowBox[{
           RowBox[{"GG", "[", 
            RowBox[{"X", ",", "Y"}], "]"}], " ", 
           RowBox[{"\[Lambda]21", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}]}], 
       SuperscriptBox[
        RowBox[{"\[Lambda]20", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], "3"]]}], ",", 
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"r1dotDr1DY", "+", "r2dotDr0DY", "-", 
          FractionBox[
           RowBox[{"DrDXdotr1", " ", "\[Lambda]S"}], 
           RowBox[{"\[Lambda]10", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]]}], ")"}], " ", 
        RowBox[{"\[Lambda]20", "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
       RowBox[{"DrDYdotr1", " ", 
        RowBox[{"\[Lambda]21", "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]}], 
      SuperscriptBox[
       RowBox[{"\[Lambda]20", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "2"]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "DrDXdotr1"}], " ", 
        RowBox[{"\[Lambda]11", "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"\[Lambda]10", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{"(", 
         RowBox[{"r1dotDr1DX", "+", "r2dotDr0DX", "-", 
          FractionBox[
           RowBox[{"DrDYdotr1", " ", "\[Lambda]S"}], 
           RowBox[{"\[Lambda]20", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]]}], ")"}]}]}], 
      SuperscriptBox[
       RowBox[{"\[Lambda]10", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "2"]], ",", 
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"r1dotDr1DY", "+", "r2dotDr0DY", "-", 
          FractionBox[
           RowBox[{"DrDXdotr1", " ", "\[Lambda]S"}], 
           RowBox[{"\[Lambda]10", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]]}], ")"}], " ", 
        RowBox[{"\[Lambda]20", "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "-", 
       RowBox[{"DrDYdotr1", " ", 
        RowBox[{"\[Lambda]21", "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]}], 
      SuperscriptBox[
       RowBox[{"\[Lambda]20", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], "2"]], ",", 
     RowBox[{"2", " ", "r2dotr1"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8905210507748137`*^9, 3.890521188619095*^9, 
  3.8905212190917764`*^9},
 CellLabel->"Out[81]=",ExpressionUUID->"50cf3574-8bb4-4509-b056-75da9683f585"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"-", 
     FractionBox[
      RowBox[{
       RowBox[{"\[Lambda]S", " ", 
        RowBox[{"GG", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{"\[Lambda]10", "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"\[Lambda]S", " ", 
           RowBox[{"EE", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
          RowBox[{"2", " ", 
           RowBox[{"MM", "[", 
            RowBox[{"X", ",", "Y"}], "]"}], " ", 
           RowBox[{"\[Lambda]10", "[", 
            RowBox[{"X", ",", "Y"}], "]"}]}]}], ")"}], " ", 
        RowBox[{"\[Lambda]20", "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]}], 
      RowBox[{
       SuperscriptBox[
        RowBox[{"\[Lambda]10", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], "2"], " ", 
       SuperscriptBox[
        RowBox[{"\[Lambda]20", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], "2"]}]]}], "\[Equal]", "0"}], ",", 
   "\[Lambda]S"}], "]"}]], "Input",
 CellChangeTimes->{{3.890277281389209*^9, 3.8902772913818417`*^9}, 
   3.8902799500685377`*^9},
 CellLabel->"In[40]:=",ExpressionUUID->"d7a7a360-bd44-48c2-a9b1-5bf6c46ca406"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"\[Lambda]S", "\[Rule]", 
    RowBox[{"-", 
     FractionBox[
      RowBox[{"2", " ", 
       RowBox[{"MM", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], " ", 
       RowBox[{"\[Lambda]10", "[", 
        RowBox[{"X", ",", "Y"}], "]"}], " ", 
       RowBox[{"\[Lambda]20", "[", 
        RowBox[{"X", ",", "Y"}], "]"}]}], 
      RowBox[{
       RowBox[{
        RowBox[{"GG", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{"\[Lambda]10", "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"EE", "[", 
         RowBox[{"X", ",", "Y"}], "]"}], " ", 
        RowBox[{"\[Lambda]20", "[", 
         RowBox[{"X", ",", "Y"}], "]"}]}]}]]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.890277292367264*^9, 3.890279951020496*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"a4e5f808-8ddd-474f-8360-17b87eff1e51"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DrDXdotr1", "=", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DrDYdotr1", "=", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"r1dotDr1DX", "=", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"r1dotDr1DY", "=", "0"}], ";"}]}], "Input",
 CellChangeTimes->{{3.8562619429409065`*^9, 
  3.856261981300618*^9}},ExpressionUUID->"f986cf6e-4d32-4b87-b53b-\
b28b44781286"],

Cell[" ", "Text",
 Editable->False,
 Selectable->False,
 CellFrame->{{0, 0}, {0, 3}},
 ShowCellBracket->False,
 CellMargins->{{0, 0}, {1, 1}},
 CellElementSpacings->{"CellMinHeight"->1},
 CellFrameMargins->0,
 CellFrameColor->RGBColor[0, 0, 1],
 CellSize->{
  Inherited, 5},ExpressionUUID->"7f7d41d3-e05e-4934-9784-7755f1953f04"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
evXqnT17Nm898ps2bWKBFm3btmV3V/r165fnu4+tra03btyYZZp0eQgLC2Nh
/Dt27GBh5N++ffPy8sKg29jY4HrBNCgiK7AEaBuL0MBSIxE8XzBgjeWHhUhv
Uc+EyMhIf39/rJB+fn65GUR7e3v8fDRt2lTOMAmCIAiixPP1s2TR23N7s9Cb
NjcTfiri/4cld68lsLudjTq5kJ98f+vlI3FJiTm3HDzfJ/Pbf3xzTJZiefey
aIkSvRcOxCXJ+hSeXPdPOiH/0089KFxm8ii+S9pkUqTMWkjZxedjylbDqHlD
wyHbnZ8WcuEhoVDIpZNas2YN/z45XoIyZa5JU1NTmfb5kSNHDA0NpVOnwrZh
CrRZs2Z8mcPkLcxOyBN8EQs5htjM0jXMMt+iJTt37uQ2nMISlsikxOAqonLb
YFn6zeXLlwcEBHTv3h1/9+7dW2YIMduvB0s+JCSEO/KXL1/U1NSYjOWn24Ut
x0rMcCF8eBVfneOtyvIgnScK5yWPMzHPcXNzq1u3LhQcDNHmzZsrKyu3b9++
VatWEJ74r5waMGe4uLjw4yc7dOiQA6mF0ffw8DA3N5dz0zFkF64IzDo5e9vK
yordZsll7nF5wDXYv39/TAxcX7gq89zhxeIfcC6cx/zMmTN5rtlxQOmA8JyB
wWJ30tD5+/btw8BBj2Ot69atm4qKSpcuXSRu5WUXzJmXL19ev3796NGjBw4c
OHnyJBa63E94LFBsQYbAvHz5Mjqk4K9rjDU/3Xqe++izBNcy2zxSlEuVEQRB
EAWM/Z2ELn+mk2+PLBOSM9aqQb6po7umc33uMY6Oli9ZMSM15cdkrV+xvuM1
xba3E4Qh//OE4jAxkd/9vFIc7RLvXYo32xd7cHXM6R2xz60SZbbq7fMkfpjx
+X2xMoUqx2PLhL5NhPwtw3h8yMD1/OBqfK+66Vzb0LA/3ywlM2Ojv/dv/msn
8vpZcsVIZ8mJLTEseRf+/RkOvS5GzrzQeYVAIIAwcXV1DQwMhGHGYnEh66A9
OcMSVhZ0K3N/wNyCXJW2OWFCKykpwYA3NjaWuL3Ppf3ZsWMH30uC48Dm5PQs
DHLYMPJEPnMHnDVrFvOITZs2TWbyGZisQ4YMYXY+9AUzzGDNQpziIFyQM0SN
TONWQ0MD72zatCm/SVw65dmzZ/OzsHLOaKCrq4uORZcOGjRo165d+Zd3iJ9O
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
v/8+JSWFGaUIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhLwOpKSkJCUlnT9//vDh
wwcOHNi5c+f2/8uWLVtWrFixZs2ay5cv//e//7XKRX/77bd79+7dvXs3ISHh
119//d///V+r/Kx5/vzzz4iIiIkTJ06aNCk8PPzOnTv/8z//Y4frEkIIIYSQ
15NTp0517ty5T58+0dHR8EUz+3YIyZ78/PPPUVFRy5cvHzhwoK+vb5MmTerU
qePp6enu7l6lSpXK/5eKFSuWLVu2XLlydevW3b1793/+858MXj0mJqZr1664
aOPGjRs1atSyZUt/f//+/fvPnz9/x44dZ8+eheK2uvB89uzZ9OnTa9SoUSAV
FxcXmBroaypcQgghhBBiC6Bn4e6++eabuXPnDgoK+vXXXzP7jgjJPsTHx0dE
RGzYsGHChAlQlDVr1ixTpkzevHmdXgUo0H//+98ZuY05c+Z4e3u//fbb2p99
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
NpaTd/34448GY8bHx4fbxN3dPWtVdeHjqy1atCAnbLdu3YzdgvPnz6eXNWjQ
gIX8iRMn8LDnyZMHPxcsWFC9MjWel507d7Zu3Rq6DE83egQC0NKnW8mtW7do
z6F8+fIaI+QxFM+dO7d69WpMaFDZ+BkS1cvLi2KGcWHDhg0LCQkxd3AYv4Q8
x1g1WTG5f//+fCQZYLI1mPowV+TLl4/+6urqeuHCBe1zY1RU1MqVK/FcVKpU
icNvcAsibwVBEARB+JDh8pQAakI9qanV8pbAJ1uXXgaGHEsJukj118PUVIp0
GKgwMosUKRIaGmpSvO/YsYM9ONr9d+rcuXMHwio6OtomB0WhwlhBdO3aVT1J
EQQgOxZx41oyGj19+hTtg9dXr159woQJxo4qFdauXcvisXDhwupfh650c3Pr
168fdyJULblQK1asyLsrUEnQVqwQ0YNhYWHbtm0zKSLUOXPmTJkyZTDIIXm+
+eYbKA6oUVzz/v378afw8PC4uLi7d+/isi06eMtJgQD0oPJZOHr0KIQzDScH
Bwf15L2ZEJa3nJ3MYOeBwPCmF6CbaAsif/78aEm8EneN36BbqYCOwRsxPGJi
YtatW4eRwA2FrvHz88PbU7MPAA1OB6K9vb0t2qTCaMRTD2FIQxeKdc+ePZCK
J0+exC1Y/Qjz8VvQq1cv4zxXaCtOsIxHtWbNmphj8aXmxjkuLDg4GKPXw8Oj
bt26ymjqJk2aoONS2YCCIAiCIAhZGphbVapUYQMpxcIlSnkLXWypvLUamG38
vbt371b3r23fvt3V1XXLli0cmsiBzcbBgcDX11cZ/jp16lQrvLdK/vzzT1ih
sbGxkE4XLlw4depUKkUurG57e3u6PJjuXMHEHDdv3mTllSdPHvRyil8Bq3vr
1q2wtKH4LC2ySbsH9HUQKcanUJVA1EALKx3EeP3o0aPJwh86dChkLLq7Ro0a
5JDCjUyePJk8cdZVSoXkQRdAzJ49exYdER8fDyVrxfliAy5fvsyNrMzGFhkZ
Secx6U/z58+3orALZH4GKmJ2y7Ju4npASuLi4gzqZXM2dXd3d9qNGTRoEGaV
GzduXL169eLFiydOnMAAgNCrX79+yZIl6aGDyF22bBluOfWVcDFIAgMD8eyn
XuXhgWW1azXJyckYG7179x4/fjwUvclJICEhoW/fvvwEFSpUqGrVqmjzrl27
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
FixYULRo0R49eqDRK/0Qrd9Pnz4hxiYmJoaGhvr4+Dx48MDFxQUROCoqisMa
iYiIiIiISNl07NhRXV19/PjxKSkpij4WIiIiIiIiouxApK1SpcpPP/20Z8+e
d+/eKfpwiIiIiIiIiLLDz8+vdOnSiLc3b978+PGjog+HiIiIiIiIKDvc3d1/
/vlnxFtPT89Pnz4p+nCIiIiIiIiIssPBwUFshRkSEsLFVImIiIiIiCifWrVq
VbFixWrXrp2QkMB4S0RERERERPnUr7/+Wrhw4WHDhnHZZCIiIiIiIsqnPn/+
rKenp6amZmNjk5aWpujDISIiIiIiIsqON2/elClT5qeffjpw4MD79+8VfThE
RERERAXTx48fQ0JCnj9/7uLicuTIkb///nvTpk02NjYzZswYP378hAkTJk2a
tHTp0tWrV9va2uIFrq6u4eHhnz9/VvSBE+Ub/v7+3BWIiIiIiEh+Dh8+PHv2
7IEDB5qamrZt27ZJkyYGBgY1atSoVq1a5cqV0Rovma5UqVIVK1bU0tKqXr16
nTp1mjdv3rlz5z/++OPgwYOenp6pqalcJ4coaw8ePBC7Aj1//pyPhoiIiIiI
cldiYiLyrKampoaGxk//QoA1NDRs06ZN9+7dBw8ePHr06LHpEIEtLS3Nzc2N
jIzU1dXxSrTVa9eubWJi0qNHDzs7Ox8fH27lSfQtYlcg3DsRERF8HERERERE
lLvevXs3fPjwJUuWLF26dOPGjTt27Dhy5MjVq1ddXV3v37/v4eHh7e3t7+//
Kt2LFy+ePXvm6enp5uZ27NixlStX/v7773Xr1i1UqBCiro6OTrt27aZNm/bw
4UMOvCTKbO3atcWLF9fT00tISFD0sRARERERFUAIsFFRUdHR0W/evElJSUEy
laVfCS+LiYlB8r1169bOnTsnT56sra2tpqZWunRpY2Nje3v7xMRE9k8RZTR8
+PDChQv369cvOTlZ0cdCRERERERfgVAcFBR05cqVpUuXVqlSBSG3Vq1a06dP
d3V1DQ0NRc7lNEMiaNSoUaFChebPn//27VtFHwsREREREX3Tf/7zn+joaAcH
h969excuXLhs2bLNmzc3NTW1sLAYNmzY8ePHuRMKqbI3b95UqFDhp59+2r59
+7t37xR9OERERERE9B1ot3t5eY0ZM0ZsgAKFChUqUqRI3bp1nz9/zoWnSGX5
+vqKm8LJyenDhw+KPhwiIiIiIpKJv78/2vArV64cPXr0wIEDEW/Rqre1tU1L
S1P0oREpxu3bt8WuQE+fPuVzHiIiIiKifOTz58+xsbGvXr26c+fOL7/8glb9
7NmzU1NTFX1cRIpx9OjRkiVL4kYICQnhqmtERERERPlRZGSkpqYmWvUzZsxg
vCWVZWNjU6xYMV1d3bi4OMZbIiIiIqL8KDg4uEyZMoi3K1as4IKxpLKsrKwK
Fy5sYWGRlJSk6GMhIiIiIqLscHV1FYOT9+zZwwVjSTW9f/9eX19fTU3tzz//
5EMeIiIiIqJ86vjx46VKlUK8PX36NBeMJdUUHh4ulk3ev38/d8giIiIiIsqn
NmzYULx4cTTsvby8uGAsqSYPDw8xhsHZ2fnjx4+KPhwiIiIiIsqOcePGiY2B
IiMjuaIOqaZr166JMQyPHz/mQx4iIiIionyqa9euGhoaFStW5IKxpLKOHTsm
dgUKCgriXUBERERElB+lpaXp6uqqqam1b98+MTFR0YdDpBhbtmwpXry4pqZm
bGws4y0RERGRigsLC3Nzc3Nycjp79uzdu3c5eS2/iIiIELsCTZgwISUlRdGH
Q6QYCxYsKFq0aKNGjd68eaPoYyEiIiIihXF1dV20aJGZmVnz5s0bNGjQsGHD
Fi1aODg4cPXRfMHHx0csGLtkyRLuh0Iqa/To0UWKFDE3N+emt0RERESqycvL
a968eS1btixfvryamtpPGaxcuZJZKV9wd3cXC8ba2dmlpaUp+nCIFMPS0lJD
Q8PKyio5OVnRx0JEREREeerz58+nTp3q1KlT2bJlRbDt2LHj3Llzt2zZYm5u
jlbikSNH2HubL+B7FAvGssOdVJmpqam6uvrEiRM5RJ+IiIhIpcTFxW3YsKFR
o0aFChVCLOrSpctff/314MGDsLCwpKSke/fubdy4EX9GBFb0kdL32dralihR
At+jq6srZ0yTyjIwMFBTU1u4cCGHnVCBFx4e/vTpU2dn5ytXriQkJChwLbUP
Hz6kpKTExsYGBwd7e3s/fvzYzc3t5s2bd+/e9fDwePnyJQ6PbQkiIpKrkJCQ
8ePHV69eHU3BIkWKTJ069f79+2/evJHqR0Qk1kf5yB9//FG0aFHE24CAAH5r
pJrev39foUIF3AUbN27kEH0q2FDO9+nTx8TEpHHjxkZGRsOHD3/9+rVcC/9X
r15duHDh6NGje/fu3bJly5o1a5YuXYqGRN++fXv16mVubt61a9dOnTq1bdu2
VatWzZs3b9q0aYsWLVq3bt2uXbtu3bqNGTOG61USEZGcBAcHjxgxQiy0q6+v
/9dffwUFBTET5WtmZmbq6uq6urrc9JZUVkxMjCjWdu/e/e7dO0UfTv5z6tSp
WbNmjR07dvr06fv37w8NDWW9oLRQzv/+++8NGjTQ09MrVKhQiRIl1q1bJ7+n
Oi9evOjevbuhoaGBgUHNmjWrV6+upaVVsWJFsc20LHCESLvIyLyoiIgod4WF
hQ0bNuznn39GddOyZUtHR8f4+HgGovyubt26ampq7dq1434opLK8vb3FAmvn
zp378OGDog8nn7l161bTpk3LlCmDGFK6dOlatWqZmppev36d3W1K6+XLl7dv
33ZxcUH5j4SLnBscHCyn8Ghra1u8eHEZk2wW3NzcsriiYmNjL1y4EBISwghM
REQyQpKdPHmyaAEi216+fPnt27fMtvkdWguVKlXCd9q/f3/uh0Iqy8PDQxRu
aPAzlP2o+fPnFy1atHfv3gMHDhRxCWcSgffevXs8mUpuypQpRYoUwffl7Ows
py/L0dHxux21pUqV0tHRMTIyMjc3//3333FU8+bNW7Fixc6dOzt27KihodGw
YcOsA7iDg0Pz5s1NTU3Pnz/PJ1RERPRdaWlpy5Ytq1ixopqaGiogZFv8hNm2
AIiNjdXU1ETr4o8//uCCsaSyHjx4IMalcIG1bGjWrBki7blz554/f37r1q0Z
M2aI6fwIvBzho+R27dollhbcvn27nIblo5axtbWdP3/+5MmTp06damZmhriK
T5w9e/aePXsOHz584sQJXDzXrl1zc3Pz9PT09/d//fp1eHh4TExMamqqtbV1
hQoVtmzZkvXhPXnypFOnTurq6oaGhvv37+cUAyIiyhoqC11dXWRbHR0dBwcH
9tsWGD4+PqVLl0ZLw8bGhgvGkspycXER22Ohkfzp0ydFH05+kpKSUr58+Vq1
akVERIh6ITg4eMCAAYULF0ZuQnJR/u3GkKdmzpy5aNEiPz8/Vfv2kSvFlT9r
1ixkSTl9SkJCAuIqQiuujX79+uHawCfu3bs3KSnpw4cPnz9/zqJFgS/l0qVL
kZGRWY86Rp59+PBhr169kJ1r166NN2fCJSKib3FzczM0NCxUqFCxYsV27NiR
mJjIbFtg3Lp1S4zJtLe3Z2OAVNaZM2fE+EkkHc7d+yGIJ5s3b3Z0dMwYY69c
uSJCU6tWraKjo5W8yrC2ti6fbvXq1aq2bvbdu3fFuAVLS8vk5OQ8+ETRx4pP
xGWT62fbw8Oja9euSLj6+vrswyUioq8KCgpq3769qIzmzp2r/A0V+iFolIpW
6IULFzhfiVSWND0wNDSURdyPSkhI+GJID4JS3759kTIKFy6MqKvkZQsCkajj
hgwZkjcRT3lIs87btGmTmJiYB5/YokULMTt7zZo1uR5vcRHevn27devW+EJr
16597do1zjUgIqIvzJ8/v1ixYqiJfv31Vy7LX/Ds2LFDTLy6d++eqo3KI5L8
888/It5GRkYy3uaKffv2ibLFxsZGybtEW7VqJQKXhYWFqq2w5+XlJeJtw4YN
82bxfAMDAzU1NXzismXL5DEj5sOHD05OTmLSDb7ZwMBAtluIiEhy4cIFMeW2
fv36Dx8+ZPwpeJYsWSIeX/j5+bENQCpr//79IovFxMQw3uYKaa+lli1b5k23
YLY1b95cxFtzc3NVi7fS16StrZ2QkCDvj8PNJdbqh8WLF8tpwYeUlBRra2tU
berq6uvXr1fypytERJRnkHeMjY3FkK1t27ZxDkuBNGrUqCJFipQuXZrDzkmV
7d27F/EWxV1sbCxvhFyBTFG/fn01NTWkjOfPnyvz0zOpP1EFe299fX1FRyeu
/7i4OHl/HK4KsVY/LFmyRH7rGYaHh4slmvX09Dw8PPhwnoiIYNGiRaJfb9iw
YaGhocrcOKFsMzExQZO+adOmeTMsjUg5bdu2rXjx4mXKlImPj1f0sRQcI0aM
EGvknjlzRmmn36Jqk/oTf/31V1WbexsQECDiLQJ+VFSUvJ/tJCUl4S7Lg3j7
3/SdcMWMg6VLl3JfACIiun//vr6+Puo7/Jc7ZRRUqPG1tLRQ+w8dOlTVGnVE
GdnZ2SHeVqxYkfE2F61btw5nFSWMMg8QRTEo9SdaWVmpWkn4+vVrEW8Bf5b3
c2wkaCneyjt1JiQkdO7cWV1dXUdH5+XLl3xET3kABR3H/xApp/fv3w8ZMkQ8
ded2qAVYaGioaGksXLhQfjseEik/EW8rVarEeJuLpO6zMWPGpKSkKPpwvi5j
vps8ebKqlYSoBaRfPw8yoL+/v/Rx69atk/dDj127dok59fb29sq//zLlR7iu
Hj9+vHXr1vHjx//66689e/bs3bv38uXLz58/HxISwocqRMrj2rVrYrCWiYkJ
d4EswJ49eyZaGra2tkrbt0KUBxhv5eHOnTtiT9VWrVop7epS7u7u4iBBBfe9
jY6OlrpTHz16JO+RWggCYiUr2LFjh7zX9IiIiNDW1sZndenSRdVmVVMeuH37
9uDBg1G+6ejolCxZUqxQB6hKDA0NTU1N165di2ueu1MRKQMrKyvRdWtvb88V
pQowNzc30dI4ePAgn2yTKtuyZUt+ibdoKT158uTYsWMbNmyYNWvWokWL0IJC
PEdD68OHD0o1Ls7Pz088QCtbtqzSntizZ8+Kvb/h77//VrUqL+Nk2Bs3bsi7
He7i4iKd7Tyod3A7/Pbbb2jPIHr4+vryWT3lokuXLpmYmIjW8rdUrVoV4dfG
xubly5ec5UekQF5eXtra2mpqak2aNAkODmZ1UICdP39etDTQwFPahV+I8gAS
IuJtzZo182BvlJy4efPmmDFj0KYyMDBAQY1gUr58eS0tLR0dnWbNmv3xxx93
797NRkIJDQ3duXPn3r17Y2Njc7HMlyZaFipUKA/mdWbPgQMHxPhV1XzQhyZ3
xYoVxa9/+vRpeVcE0g5ccOHChTyod6RPdHJyYjVHucXBwaF58+ZibxEE2KlT
p6IItbe3x/W2cePGcePGNWrUSPxfqFKlSrt27c6dO8crkEhRVqxYIRZMXrVq
FWfdFmxo14mZca6urhw8Q6rMxsYG5V79+vWVdgnxtLS0bdu2GRsbS+kgs59/
/rlly5Y/OsQ0Li7O0tJST08P6X737t252H2JqIh2nTi2+/fvK2fnhfjqxUGq
5oM+sX8Tfv29e/fKu/N6wYIFRYsWFWc7b/bruXfvnhh8rszrm1H+cu3atcaN
G4uhyKNGjUIL6vXr16mpqbjAcAehEgkICMAP0Yru1KmThoaGuOANDQ1zt4Al
IhmhndOgQQPcs6VKlfLy8lLO1gjlFmld0xcvXihnxwpR3hAZB6Wf0sZbNM71
9fVFg6pt27Zz587dtGmTvb39rl278L+mTZsm7mWYMmXKD62PdPz4cWny6eLF
i3P3qaaJiYk45lOnTilnchR7f4tf393dXbG1XkhICGrePH7YiBa46GbasGGD
vANg3759RWu/RIkSEREReTCWPjw8XIyQnzp1qqqtG0by4OPj07p1a3HLoBzO
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
ySCGuBsYGISGhuakafr69WvpRvihHdyIKBscHR1F2FmwYIFcZ2L6+fldu3bt
W5vqopEmFl0fMmQIayK5Et3oONVcoJ7IxMQEEWz69On5cR56REREy5YtRYTs
27ev7LvbIHGIp5p//vmn/NY6EBPWRHPO2NhYfosXZUPGTW99fX0V29SUDubJ
kyfyLpNPnz4ttbGXL18+Z84ckXA1NTVl2cozG5DZpVW8lixZkmdra7x//75c
uXL40JkzZ+bHu5uUQUBAgFj9IOdXUUxMjNiIGR4/fszWF5FcSetnKnC/6atX
rzZp0gT1u56e3t27d/Nm8pHKkmZdoTGjPK1NIoWoW7eumpraokWL8uOKdhs2
bJAmkF64cEH2wRivXr0S8RYBR34T8C0tLUUvIdqHLi4uylOwo2EpnqaKWBcV
FSW/kjA0NNTPzy8uLg5pC+Ex4wfhzykpKfj0GjVqiKHCa9as2bx584oVK1au
XLlq1Sp8v6iXb968+a3Hwj8qOjra2NhYLLXRrFkzf3//Bw8eSOuSyWlo9OHD
h6UBBgcPHsyzGTFBQUHiIscp5SoTJDvk0CVLlpw4cQJN4j179oir99KlSzm8
O+Lj46V4y84FInmbOXOmCDvnz59XyFDVc+fOSRXuunXrUlNTf6geR4HzRZuB
sia6VNDglL2vh6hAkmIOYkW+awDfvXvXwMBA9PpZWVnJvqgUeHl5iVCzadMm
Of3iz549kyZ4IoPncFxf7goODpY2vW3RooX8lnlBI7Znz57t27fv2rVrr169
LCws+vXrN27cuEmTJo0ZM6ZPnz49evTo0qWL9IwCZ6x69eq4JitXrlylSpWq
VavWrFmzadOmlpaW2V6yNSOEZTF0B7Zv347We3Jystj1Hj9ZtmzZVx/yIJBe
u3bNx8cnc4P8zZs3uJayPjBp+yFAms6zVv2VK1fEyLTLly9zGg7JDpc07sS6
desePHhQTBzQ09PLeQkWFRUlDZxA8cjByURy1b9/fzF+DI0ledQ7aEgcPXr0
q+uKpKSk7N69u0mTJiLbzps370c3vUWtOnHiRDQYzpw5w1WSZCQWk2zevLkS
7tZBlJfi4+NFe0Pee6LlOty85ubmom8UCehHh7ohZYjxovJbNHjq1KlisxsB
+Uh5em9R2UnDZeU6HebIkSNSx6WAIImAidglRdqvqlixYr169dq0aYPiGvUj
vuicb94aFBQkRknh/c3MzKTFbSZPniy+KUNDw68uDOvo6GhsbIwYnvkA5syZ
065du6wfkoipi3h/fEpeLqyxbt06nGScao5Toh+Cu2D48OG4XE1NTUUFMWbM
mJyvUYAbUIq3aBIz3hLJFe5fUfXI42mSi4sL2mAGBgY7duz4ovoLCQlBzVir
Vi3UtpUqVVqxYkU2Fh7B6zt16oR43qBBA29vbw72+K7379+LJe4HDBjAxSRJ
xaHdK3rxjh8/nr+ejyGWSmNK169f//bt2x9qwN+7d0/ku3379snjF79582b1
6tUR5aSEK7+FebPByclJ2qpm3rx58huXjgtsypQpyJJ16tT56t6v+KG2traI
nKgNra2tt2/fjqvx8uXLt27dun//Pr4p1J4dO3ZEiZ3DGL5mzRopUzs4OEjf
+6VLl8TZQE361bWtUDvjONFOyLw3Lo4K/wrh91vR+82bN2Jrhp/S51/n5X4o
IlbLe81MKpA2bdokno2IgQ2HDx/OeTl548YNUepWrFhRrhMiiOi/GTa9zd2V
3Dw8PBYsWNCsWTO8effu3b9YMePRo0e9e/cuX748io42bdocPHgwOjo6e5+O
5pl4PP6tNZkpIxSqYvYHV9sgkvZmRQs/H5UeaCY1bNhQZKJevXplY0Ugufbe
xsTEiE3M8f5du3YVo4N+aLgIiiZvb2/59fb+/fff0hhd+Q3PFgIDA1H9Ie+f
PXv25MmTR9PhtO/Zs+fIkSMI2seOHRNV2MCBA4ODg1NSUlBXZmz6ItWixkQF
nZPnt8+fP69bt664ZoYOHZqxdZ2QkNC4cWPxvxYvXpw57EsbK2euZEW8rVq1
Kt7kq5+L71F6DjNhwoQ8W5/cz89PrAiU7wZmkDLIWESUK1cOl1POm8fSUgmW
lpZ85EIkb507dxbtELT0cqX3E7Xw2rVr0bxBmVCtWrW5c+eiapZ2uUXl6Ojo
2L59e9HmGTx4sKurK6q8bD/IkrYSQ85lLfZdaOSI7iqUtMrTmUKkELdv3xYp
T05TM+TB19e3TZs2otDW1tbO3qBfHx8fUWzKoxyws7MTrbgGDRqcP39enOGi
RYveuXNHlpOMYnzGjBmoI7Io0sPDww8dOrRs2bLVq1efOnXqR5+OLl26VOpL
RcbMs457VHOf0r1NJ6pFaSKwXB85zpkzR0yAxTWTeQKsjY2NOCG6urqZn5bg
DIsAnjkqdu/eXUNDA19xfHz8Vz/X2dlZ6ihfv359nlU64iLEgSl8WWzKj7Zu
3Sri7bhx47Zv3/6jw2O+SmxCh/fcuHEjW19E8ibt3YCWXg6flqPJhNu2Y8eO
WlpaqCvHjBlz4cKFsLAwqXJBm2Tx4sWi3wFFx6xZs549e5bDViUOW7TTxEIZ
OXkrVXD9+nXR2syVwTZE+drly5dF29vT0zNfxNuEhIRRo0ZJI35R3iYlJWWj
3SUtcvLV3rqcQIatX7++6Aq0tbV98+ZNz549RaNOxt2XUEZVqVIFr588efJX
Xx8YGDh48OA6depUrFgRr8TH9enT54dmH0+YMEE6hwpfdwj5S1Rhq1atklOj
F3lWWpwZ33jm9RtRd0uzAjPnfTc3N1FrZM6nnTp1ElOD4+LivvrRu3fvlnrB
8mwKALK26I/+/fffk5OTOQqUftTq1avFM7qbN2+i1M35E5JXr16hYSxuBLyn
8ixEQFRQLViwQDy2zclDbKTUTZs2oabT1tZGHdqvXz97e3uxnJRUs7x+/Rp1
TaVKlfCCDh06/P3339LSFjkh5TU7Ozs+EPsuaY8GpVrphUghLl68KOKtl5eX
8nfxoKGObCK28oTx48dnfHj4Q1JSUsQkhTlz5uRij2FAQADKdtGz3LdvX1HC
I9SIMgdR9P79+98NoWJFILx+69atmZ9YopAfPny4SExIuCJHI1716NFD9rWj
e/fuLRK3MnTcI5iLeCunZb5wxgYNGiQeYjdt2vSrvZkI+LicRORv3br1FxMD
nzx5Io4QX80XlawYSIDv61vxdsqUKdKThG+darwnrpw7d+44OTnhJGzfvh3N
g0OHDqGS8vb2zsbEJam7WU5bHVGBh5JWNIxza1GagwcPilKrefPmebnAGpHK
QiUiKoJZs2b9aDsHVdW9e/esra3bt29frVo15NaOHTuuX78ebcUvxnKgSh04
cKCoIkeOHImKLLeeqaIGFPHW1taW8fa7Nm/eLMrY3J1qTZQfnT59WpR++WIE
I4pW8fwQB4w099WNWmSEf4gSW5TGuTUd8v3799IavDVr1pSGAyH4SKPyZsyY
8d1aZsyYMeJNMk+Idnd3v3DhgphTOWnSJISXHTt2GBoaIuQWLVr07NmzsvTD
ot6pVauWOI3K8NWjChPPWHA1yqMf+fz58xUqVBC/bBYJ+tGjRxUrVvwpfYEp
e3v7jM+6pSnqmecpN2rUCCc/i7m3LVu2FI8gypUrFxYWJlX6aOHfunVr27Zt
o0aN6tWrV4cOHVq0aNGgQQNcObq6ujVq1Khdu3bjxo3btm1rZma2c+dO2Xf+
DQ4OFstNW1hY/NBuWUSSKVOmiMH8L1++zJXyoU+fPqIMXL58eX7cY50o30EU
FRN/qlevLvv4rsjISFSa48aNMzY2RtWJpgJqsaVLlyLtZh7IgfZDt27dxAN5
FBqZlzhG+yo8PDwwMNDf398vXVRUlIxFClo4It7+9ddfjLffheYlCm20HvEN
st4nFbdnzx7xtEf5H6cfPXoULX8RykxNTe/fv5/DbqkhQ4YgyCBEfCuYZOMI
tbS0xBHa2dllXFFB6k2rUqWKk5NT1iFOmln8RX2ESgEhqEuXLmglIvigHkEd
kZycjNQvKpeFCxfK0m6Mjo4WPdfiePBXxX71Uu92zucHZRYfH9+6dWtxPocO
HYp69lsVK2KvNCXZwMDg4cOH0smX9lH6IvaCGPNsZGT01XXDkpKSxL7SP/27
v3BISMiFCxfmzJnTtWvXZs2aIclmvUGSoKenZ2NjI2MoEOs8lypV6sqVK+y6
pewRT+QgV6qGBw8eSOuH58oG1kT0XagypJFLPXv2/GKJ4y+gCsO9uWnTJnNz
c0NDQ1EpI+FaW1u7ubl9dRBRcHBwv379xPvPmzfv4sWLaJih3jl8+DAC6dy5
cwcPHoySpHPnzh07dkTrpX06MzOzqVOnylLdOzs7i5qXs/Vl8euvv+K7qF69
+rdWAiFSHba2tmhdI+HGxcUpc7w9dOiQtFRyq1atcqWBtGvXLvziaL/lyqKg
d+7ckVbfHTNmzBcxChXH6NGjpc1Vs9jzEelJzFBDaMrY2QcIXL/88otIQxmn
qUrhq1u3brKsR5pxLV/UNXm5Vc1XiYsQB/P8+fNc70eWlmUuV64cvqOsLxt8
a9JE6b59+4qvCadL6nzPvHIyqhL8vGXLll89jS9fvpRO9ciRI6dPn96lSxdc
AJqamlLv+RfEQlUIxbjOe/fujcumSZMmiOdjx46VZZgBjlBfXx9vPmvWrK/u
4UskC5S3uIqqVKmSKy0laViLpaVlbGwsL0uivHHz5k0xKqlo0aKtW7dGVkUd
8ezZM9RuAQEBXl5eqBaPHj26ePFi1H0tWrSoVq2aaMZ06tRp5cqVaGtl0dm6
Y8cO0Tssnt+2adMGcdjIyKhOnTra2tqo5qQ5UF9AtdisWbPv1siXLl1ivJWd
GCqGb0H2TTqICioxzbN8+fJK+7QnJiYGJVu9evVEkaurqyvjENzvQtEqSs6c
d3IFBgZKU27btm2LmJb5Gamvry8KH/GaYcOG4a+ZX4OGn7Q1ZP369b8ooxwc
HERSwz9/9eqVVOPg00UVU7duXVmKNSkOw6BBg3K4mWzOTZo0CU1fVIW5PqIG
V7U0NhhxT5ZVyHBViK+yRIkS+MPevXtNTU2lybOZx3fhnItJSV+Nt9L2ylCj
Ro2vplotLS3EZ7T/ly5dunv37tOnT58/f/7y5cv4t2h7oBGCBoa9vb2Hh8d3
r9IHDx6gjYGDNzc3V/iYc8rXxOp2BgYGOR/cgra0np6euPLPnDmTj3agI8rv
3r59u23btrJly4rqBlG3YcOGSEAd0uEPqDJwm4tByHgB2hK//vrr5s2bUZug
QZJ1JbJq1aosRh+hJkLIbdq0adeuXXv37m2Zrm/fvtLam/Pnz896rhYae2Li
EufefpfUMzJ48GCFN+qIFG758uXFihVD2yO3BujmIuQIZD2UitJ8WxTCBw4c
yK1VC5BHUMzinWUc0/stKJ+lvgnUHVmMPZbWeUDk6dat261btzIGFj8/v/79
+4ut0n9K7wL+ordu7dq1oir5Yl8bKd7WqVNHlu8RLUxxGD/JNhdY3oyNjVHZ
tWvXLtf7kaXVbFChi7Hc3/0n+O5u374tDbjS19fHsYkH2uXKlcs8UFPMYv7W
U4KMTxK+gKt6yJAh+E4vXbrk6ekZFBQUHR39re1XULN/95rH9YOUjYsHv6yr
qyvHf1K24eIRK/gZGRnlvGqQVlfr3r278s+CISpgcAsfO3ZsxIgR0lCizKpU
qdKzZ8/FixcjUb548ULGpR5Q6axbt27JkiVoRM1Phz+sWbMGgRpNtdOnT1+9
etXd3f3JkydeXl7P/oU2kgit3x08dvLkSfFKvCHjbdYiIyPFpLPZs2crvFFH
pHAolxBvc3H+6Q9BfIuLiwsPDw9O5+/vjwyCovX58+fnz58fP368lPVEr+iJ
EydkX2BHFiiKixYtqqOjExAQkO2urr///htVgwjgNjY2b968+dYRxsfHb9q0
SSyer6Ghgd9u9OjRO3bsQBm+b9++Ll26oBFYuXJl8VaZN3qTdm79opcTaVdk
qG/1IX5h79690lY1mZcCzmM4XWJ26rd2Qcq2kJCQpk2biqfEW7ZskX1NZrTt
UQXj/E+fPn3o0KGLFi2ytLRE2jU3N8889ltXV1eMBP7qweMbl45BwDdlYWFh
bW2NVOvj44MX5EofK1LD4MGDcZD4Zvfv3y9LHCb6FmlheWNj4xyOc7t582b1
6tVFmebo6MjdGInyHqo/X1/fc+fObdiwYcKECVbpEHinTp2Kygjh8fLly0+f
PkXT4kfrIzThoqKiUAGFp8M74CfJycm4079VB4WGhopt+AwNDbNueR49elQ8
ikcDifveZs3T01N0c2ReAJNIBSkk3qLQQ1D9448/evbs2bVr186dO3dK16FD
h7bp2rRpI61sIKlatSoCIEIQcoe7u3uuNOClDV8y72cqI1QK0sDp33777bt7
vSHOHDp0yMzMTMxJQRjR09OrX7++6CU0MTHp06eP6DfMvKXLuHHjRCfIF4tB
SX2UEydOlGV6JrKeNKBI4bulv3jxQnwFuT76aOfOneK0IKIi6v5orY0KGt8m
Eijqa1yl+L6WLVuWuZdfDH6eN2/etwYA3L59e8aMGTgGfH02NjZOTk5oRci+
dKQs0JCYPXu2OI04SM5tpBxCMSXiLcrknIypQLUiNobGWw0fPvyL/baIKC/h
7sMtGRgY+DIdAu/r169xV+bx3uh37twRtVWPHj2yLl4OHDgg2oEODg58MpY1
tDREN8exY8d4roisra0Rb2vVqpWX8fbMmTNGRkZizMmPwv2rq6vbokWLAQMG
INaFhobmJCYgT4n9L5Axkbh/tEx49uyZ2IHlp/RlnfBXWRbeT01NRazeuHEj
2nvI8k2aNGnWrBlS7eLFi1Hsm5ubI0nhS0G2+qLGwetF8v2ilSht2IpAJ0tW
lVZahl27dl26dGnHjh2bN2/GxYBjWLVq1b59+xCuM29v98VvERQUlPMNc1HD
ikeOLi4uuTieNikpCScWwVNbW1v2DRG+KiUlRewhdfLkyczDzsUuTr179/7W
bBecQBGTAwICvjuVKXvQUNHR0VFTU5s+fXoO7wii/6YPBhDdKyjWchJvt27d
KlqnP7QvCREVYLNnzxbj0FasWJH1vLDt27eLZ9RXrlzhnP2soQUrGtXOzs6c
mkSEOJP38VbafiUnkAFr165tamqKAhBpMdu3c2BgoFgst379+v/884/sCRcZ
s1+/fqIT1sDA4ObNmz90DPHx8Uh2Dx48cE+HLCnGBYk1WBB7M7cqxRJM+LiM
00gRvqRNbL+7DqEgJlyL02iUDh+K9meFdFWqVNHX12/cuLGJiQnOzNy5c52c
nJDcw8PD37x5g+sEh33mzJlBgwZ16tQJ/zeHI4rxz9EGRtjP3bW7URuKoh5X
eBYhXRYeHh7iUfNXNwA9dOgQ6t9y5crJY1cjGeFaQrBdtGgRLmZmW8o5Kd6a
mZllO95ev35dGtmyZs2aHN6GRFQAuLi4iN30UG8+ffo060deUlvli/VGKDPp
UcC9e/d4rojQJEbpUbNmzbyMt4geSKaZl5BFyGrfvv3w4cNnzJgxM920adMm
/Gv06NHt2rVr2LChNBtX0NXVbdWqlZWV1YYNGxwcHJAy/Pz8fujufvjwYefO
nRFUkVJXr14tY//XypUrpYUadu3alSuNN0Q8MSYQsTHzU038gqLXNePqVdeu
XRM5Dl+ijCsPixnHMj5GKFu2bIMGDdq0aYNT1L17927duuFbwE9EPzL+b85j
KdrPCM65m8vEpsa4nHK+6xPeAe8zduzYry68HBUVJWbX2tnZKXCY9+vXr7Mx
bYroq2JiYkRBhJs9e3NvcddI+3cPGjQI1ycvTiIVh5QqbUP/rQUrMpo4caJ4
pJ9xqwj6KrHfPc7VixcveK6IRLytUaNGXsZbxITr168fPnx4586dCIZ79uw5
ePCgo6Oji4sLSj9fX9+QfwUHBwf+y9/fH/8X6RUZdsuWLQsWLBg4cCCOXPQO
oAzU1tauV69es2bNEEYePXoke8LFK5Fwhw4dikCkpaWFt/3usuo4EqnPFKV0
bs0pw+8oRuri5GTuR7506ZJIsuPGjRNzbFE7iMHM+OHMmTNl7EhdtmxZznvP
f0qfODx9+nR8qLJ1yuASqlq1Ko4Q11XOJ6GkpaXdv38f1eu3rqjTp0/PmDFD
xqHpRMoPRbSIt9lbOTk6OnrEiBGiXdqiRYsnT57w1iBScW5ubtL+if369ZPl
ybPYwgBl0RfrjVBmkydPFt0WYWFhPFdEiGa4IzJvsZoHPnz4kJru7du3yCAo
6GS8JdFSQusrIiLixYsXiMlbt26dNGlSmzZtMk7mRRL8oZka+GgfH58///wT
uQ8x+bstumHDhonuSyTNXBwRKq2zhDyVuUEYFxfXsGFDxPlKlSpdvHgRv+CB
AwdEHMYxe3h4yNiGdHZ2Frt+CDVr1hw9evTSpUtXplu8eDH+2rt379q1a0s7
tmeEH6KSmjZt2tGjR7+7lJZCHDlypGTJkiYmJnkzERXXMM4DTj7rFCoYpI2B
qlat+qNboqM8X7RokUjH+C/XOSFScagcjx8/jhpZZNuePXvKOBNfdPU2adIk
7xuo+U7//v3RKEXjMHfneRHlUwgyRYoUQbGT9QQrxK47d+5kseWNAiUnJwcF
BSEPnjt3DoFr48aNGzZsCA8Pz0auCQsLO3To0MmTJ7Nuj6WlpSFOiqzXo0eP
zJvFZJu0g+2+ffu+egzS+OTGjRsPHz68bt26ovMamVT2XlR81wiASLLLly9f
v3791atX/f39o6OjY9JFRkbir15eXjdu3Lhw4QJOyP79+3fv3m1vb48/4OTg
hw8fPkSgy2Llf8XC5Tp16tSzZ89yMQqi7DEyMkLZgtrhRx/fbd26tVq1atJG
aUjHyllKEFEeQGMM5UCDBg1EW2Xo0KFoP8i4ToWOjg7+ya+//pqLrayCSjwK
aNasGR8FEP03/YGPhoZG1hkN/6tbt24tWrTAfxGvrl27hjipnNEGZaZY/ijb
fXbv3r1DJsr6V8OnzJw5s2HDhl26dNm8eXMubmfz9u3bzp07o4yaP3/+V1cU
jIiI6Nu3rxiNLM2fHTBgwI/OTMExizD73XOFs4FzgoPBP8EflPBLzwxfEC7R
lJSUfHG0REpo5MiRYnTxjRs3ZGyLoiTZu3dv7dq1RTt2xowZXMebSJW5u7v3
6tWrSpUqampqpUqVmjt37vPnz2UcZoYmhxhDMmnSJFl2PFRxurq6OFfm5uY5
WeueqMAwMTFBU2To0KFZzDZFku3evbuIVNra2k2aNOnYsSOKrHnz5h04cMDV
1TVXNojJX16/fo1f/MmTJ0iIudt+e/jwIc6qp6fnt07p06dPEa5r1qyJL65y
5coTJkz47vKDREQ/xN7eXuzps2jRoqw37xBQTWzfvt3AwEBk27FjxwYEBDDb
EqkmNI3+/vtvaSGpLl267N2794eed0VHR4s5DgsXLszhBg0FnvQoYPjw4d9d
OoZIFYgVeMQCQVm87PHjx2vXrrWyspJGw/6UvmpurVq1mjdvjrRrYWFhbW3t
6OjIaVY5991O0uDg4OvXrx87duzy5cuBgYHMtkSUu6QNqXV0dL7b4RIVFbV6
9Wp9fX1RO4wZM8bHx4flEpFqcnFxQZtQT09PLBUye/bsBw8e/Oh4KhQ7ogiy
tbXNxTFyBVJISIjYym3+/Pl8FECEu0A8HFuyZMl3n8/HxcW9fPny1q1bR44c
2bRpE26i4cOHN2vWTNqmp0KFCvXq1eP2ZHnm48ePHHxLRPLw/v17aXzy8uXL
s6ggXrx4MXTo0KpVq4r5thMnTmS2JVJNuPeRRlu0aIGWIQoEtBJPnjyZvUkK
Fy9e/Pnnn1GkfHc5FHr06JFYlXTbtm0K3KCQSEmgzBEPx7Zs2SL7HfHhw4fE
xMTw8HBfX987d+44ODjY2dnNmzevf//+FhYWQUFBHJBGKi4hIeHp06f37t17
8OBBrg9fJ8ob7u7uosmko6ODJmvm9frCwsL27dvXqVMnsd6dmG/7o9uOE1EB
gLYfSgNTU9Pq1asXKlRo5MiR9vb2L1++zPY6LUhqJUqUQKnCTpPvunDhgngU
cPr0aa6oSYRCQ9wRiKjZviPQ4ElKSkLL5/nz515eXuxSpAImOTnZw8Pjxo0b
q1evnj59+rQMpkyZsnDhwjVr1qxdu3ZNulWrVo0aNap79+4mJiYtW7Y0NjY2
MzOztrZ2dnZGRR8SEoIb5PP/y/n9EhER4e/vzwYA5a63b98uXrxY7JGNhNu5
c2c0X+/fv+/p6Xn58uUVK1Z07dpVGpBcq1Yt3AWvX7/mwxwiVZOSktKrVy9R
GgwdOnTLli2o79LS0nJSu02dOrVo0aKlSpXiRq7ftX//frFUgqurq4wrARIV
YKdOnRJ3xJ07d9g2ljeUOWguvnnzJjo6GjEnKCgI5b+HDF68eIFGI/5VFnNy
UbngPb28vK5fv37p0qULFy6cPHnSMQOxoY+7u/vz58+RhrJ4KxxkfHw8KpRX
r175/r/AwMDg4ODQ0NCoqCgZ59GkpqbixXg3HF5AusB0eB8cRmRkZA7XN/5P
umz/8ywkJSXdu3dv165dlpaWrVu3btq0aZUqVUqXLv3L/ytfvrxWBniNiAMZ
VaxY0cjIqF27dqampmgDWFhY9P5/iMl2dnZHMvjnn38OHz6Mb/PMmTP4Qm/e
vHn79m18I25ubvjDo0eP/Pz84uLiECVwGgcNGtShQweu5EO5Ljw83NraWrqk
0Xxt2bIlbgdcz5UrVxajkaFfv35OTk7iglT0IRNRXvvw4cPgwYOHDBmCYOvt
7Y3aM+f1MqpLdXX15s2bc6eb75K2jEQDj4Uw0aZNm8Qd8aM7G+Y9BK7YdLLs
ZZPR+3Tv/pWWLmPB+58M8LaIY8hiSJRIgufOnUPQ2L1797Zt27b+P7t0WzKw
Tbfl/+En69atmzdvHkp+hJoePXp069bNzMwM5XbHjh2Rd1rLoG3btp06dcK/
6tmz59ChQ9HaXLp0qY2NDQo0vDn+ih/infGeJiYmTZo0adSokaGhYf369etl
gL/ihy1atMC7denSBW+1ePFiEanOpjt9+vSOHTtmzZqF48RBdu7cGYkJR9g+
AxwzjgQfhIMxNzcfOXLkwoUL165di/Nz6NAhnK7z6fBue/fu3bx58x9//IE0
J35f6JCuYzq8T5d0eJ8+ffog3+HTcQzIbgjpOP9SEA4KCkKyfvDgAf7vvn37
cNi///57n3QiG/bv39/KygpHvnPnzosXL3p6eiIGIj6jhk1OTsYXmpiYiL/i
hw8fPkRgPHHiBL7TjRs3rv7XqlWrcD5Xrly5YsWK5emmT5+OU4SWfI0aNcTs
8jp16uATx48fP+H/4Zvtl84yHV4zfPjwJUuW4FBPpFuwYAF+d2kXp6/6+eef
dXR0DNLVyQDfZoMGDfCFIlw3a9YMZw91Pf7QqlUrfB1du3bFr49ziPSBkxAd
Hc1H3JTrIiIidu3ahRJGLJ6fUYkSJQYMGIBSDvdsftk1jIjkAcHKx8cnV4Kt
sH79erR/uK6ULObOnYs2hpqaWnh4OMthIjTOixQpoqurGxcXp2x3BPIsEg1K
tlGjRiEyIHB1TYeshD8PHDhw8uTJCBH29vZSqoJTp04dP34c/2rixIl4DUJH
r3Q9/x+aZFI4+gJacUh2yIBIgg0bNkTEQMDBKdL5muoyqFq1atmyZTO3DIUi
Msj4+sKFC1eoUKFixYqVK1eumg5/xQ+lF5QuXVpbWxufKyJtg38hN2lpaUm9
LWIpMBGpGqbDi/FrlilTJuNrsoZUJfou8Q9r166NNzFMhz/o6+tXq1ZNDH2X
BV6pp6eHY0B2a9OmDc6/FITFcwBjY2P8FnhbHPYX3aOFChXCGcCR4x2QBFEh
4t8iPnfv3h3ZGV8o/oC/4od4EwTGunXr1qxZE2dJdLZKKqerlA6nUZwHXHII
6YjeyMVow0uhW4IK/Xm6Z+nwGoTxqKgotPbF2GOkg0ePHh07dgyZes2aNUi7
f/7554IMZs+ePWLECBwbzmGtWrVqpsNVh18HB6mpqSl9I5n7hQWcIiR3DsAg
OUlOTvb09Pz7779xrVpaWlpYWKDuWLVq1ZkzZ168eJGLDVoiIgFV57179yIj
I5W880UZ/Pbbb2grogGDxryij4VI8ZAj1NXV0f5H+0TRx/JftP8XLVo0d+5c
tKAQP5Fh0eBHTJMWLckIh41AhJSHvCOlKtFlifCCf1WqVCmxcN9X44C02vO3
II0isiEo4eQgJltZWQ37l1UGQzMYki7zT5BcJk2atHjxYhsbm/Xr1yN6Iyvt
3bt3//79R44cQfvQ6XtwZvD6rVu3oj2J84O8P3LkSHw6ztKUKVNQrOG/y5cv
37Jly759+5Dxr169eu3atVu3bt3O4ObNm87Ozg4ODngrHAZOMgI+YiMyVKV/
tWrVaty4cQhcK1eu/Ouvv7Zv377r/+En+JTNmzevW7cOXxZejJPTs2dPJEd8
CxnTYsuWLREqhw8fjl9848aNdnZ2+Lf4aHt7+33p9uzZsyPdhg0b8HHTpk0b
NGgQQii+vrJly+LLRWhVT4fvQoRfZFWcVZwBvA8Ob2M6/PPVq1fj1588eTJO
CA7jqxeMgMIfF4mZmRkOG6dx3L/Gjh07ZsyY0elGpcPx4FNOnjz55MmToKCg
HI6g/m/62K23b9+i6onIJDQ0FIn47t27N9JdT+eSDl/lxYsXcRj/pMPFIIYu
4ye4kJCXcT4PHDjw4MEDvD8jBskV7gJcq8+ePXv69GlgYGBsbCybnURECodW
DQdyEwmpqanIIz/JsOltHvDz82vSpEn58uURbTQ1NRFtkEwbN278+++/I4uh
PS/NIUVAQ3secQmhBglr1qxZlpaWUt9r//79kShnzJiBLLlp0yYEMQSonTt3
4r/bM0BUzJiPJPgsERJPnz6NcHHv3j1PT88XL168/AYfGSC5IB9FRkaiNZiQ
kJCYmIhWYlpa2rt372RchuvTp094fXJyMt4hLCzM398fpwufLubk4s9iZm5S
UtJ3xweiOYq3io+PF81UxCL8mleuXLmcDr9vQEAAAldMTAwKSRxn6v/DT/Ap
+BXwDviN8GJvb2+0dR8+fIgEjfh8JR3+gLDm4eGB3x0vw1uJccJiZLgYJY6s
l5IO5wS/V3BwMN7q0aNHSOUIdAjpp9OdSYe/4jjxXeB84gzgTd78C/8cmREH
jJOAE+Lq6nr27FlcMMh9Ynw4vmtcNkePHkUkxLHhBUis+CycxoB/vUrnnwGO
J4fLYuQiHMaHdPjDx3T4A74FnEMcZLbXpSQiIqL8rkGDBmgz9+rVSxn6qogU
KyQkROwKhIin8KkNiEi//PLL3LlzRSZFNjlx4oSbmxuCBpKUaM9L02PRnsct
jFCD6CRimte/xOwP/GpITMg+IkuKXJYRolbGfJSRLCGRlBwuGFzSSenwXePb
/PTpk/wWoSIiIiLKe2jwVK5cGY35kSNHosGj6MMhUjBPT0+xp+HBgwcVvmU2
YsjZs2fDwsJEJkU2EXlEsUdFRERERKSc0H7W1NREY37WrFkKH4pJpHA3btwQ
K/+cO3eO20ATEREREeUjwcHBZcqUQWN+9erVb9++VfThECnY0aNHxaa3d+/e
5ZqrRERERET5yJMnT8RQzL179757907Rh0OkYNKmtwEBAVwAk4iIiIgoH7l2
7ZoYiunk5MShmER//vln0aJFcVPExMRwlit9V1JS0vXr148fP37kyJGjR4/i
zyxIiYiIiBRFGorp5ub28eNHRR8OkYL98ccfRYoU0dXVTUhIUPSxkGKkpKQk
JibKuGXqzJkzmzVrVrduXYN0TZs2ffjwIYe1ExERESmEra1tiRIlEG99fHw4
FJPot99+K1y4cOPGjbkNtGpydHTs06dP9+7d8d/du3cHBQVlXTAOHToUF0zN
dIUKFUJZeuzYMYWvuU1ERESkmv78889ixYoh4UZGRnIoJtGAAQM0NDTatWuX
mJio6GMhBVi9ejWKRKRUNTW1GjVqdOzY8cKFC1mMN/bw8Dhz5sz169dPnDgh
RsKcPHmS45OJiIiIFGLcuHFFihSpXr16fHy8oo+FSPH69euHeNupU6ekpCRF
HwspgK+v75EjRzZv3ty7d+/ChQsjrjZq1Oj8+fPfTaxItSLe3r9/n4OTiYiI
iBRi0KBBHIpJJDE1NVVXV0e0SU5OVvSxkGIgySYmJnp5eS1atEj05CLhBgYG
ZjFKGeVn27ZtceWYmZlFR0dzJAwRERGRQqAxhiZZp06dOBSTCIyMjAoVKjRy
5MiUlBRFHwspWERExPjx44sUKYKEu2/fvixm1B46dKhUqVJ42ZEjRzjxloiI
iEhRGjZsqKamNnDgQA7FJIL69evjjhg7dizjLYGbm5vYOq1Xr17fKiS9vLya
NGlSqFChwYMHIxFzjT4iIiIihXj//n3lypXRcpsyZQob80Sgq6uLO2Ly5Mmp
qamKPhZSPBSMDRs2RHQtXbq0t7d35uiKzNuzZ08NDQ287NGjR4mJiVFRUSEh
IZx+S0RERJTHYmJiNDU10ZhfuXLl27dvFX04RIpXsWJF3BGzZs1ivCVhxIgR
Yo2pS5cufbHAVGxs7Nq1a0uWLIn826ZNG7yyR48eZmZmpqammzdvTktLU9Qx
ExEREakgX1/f0qVLo9m2c+fOd+/eKfpwiBSvfPnyuCPmzJnDBz4krFixQiww
tWPHji/KyUOHDtWsWVNNTQ3/t2zZssWLF//pX9WrV0f45RpTRERERHnG3d39
l19+ERs1cjkUog8fPiCk4I5YuHAh4y0J9vb2JUqUwFWxYMGCL64KlJx16tQp
VKiQyLPNmzc3NzcXXb34J4y3RERERHnJyclJrPZ569atjx8/KvpwiBQsOTm5
TJkyuCNWrFjBkaUkHDt2TGxoO27cuC/WKIiJibl+/bqDgwNy7rVr1+7cuTNp
0qSiRYvixb/99hsXNCAiIiLKS//8849otr148YKrfRLFxsaKeLt+/XrGWxIQ
XUU5OXDgwK/uhozCU/TSIueKztzSpUu7ubnxmSERERFRXlqzZk3x4sXV1dUj
IiI4iI4oNDRUzEa3s7PjbHQSzpw5I+Ktubl5Fhuo3bhxo3HjxmKg8qJFi/BK
FqpEREREeWny5MlFixatVq1afHy8oo+FSPH8/PxEvN27dy9no5Nw+vRpEW9N
TU2/FW9PnTrVqlUrdXV1vGz69OmvX7/meBgiIiKiPGZpaamhodGmTZs3b94o
+liIFO/JkydisbUTJ04w3pJw/vx5sUZB06ZNMxeVwcHBW7dubdSokei3RbYN
DAxktiUiIiLKe2itoUk2aNCgr04oI1I1rq6uP//8M0LKhQsXvtjhlFTWzZs3
xVVRuXLljANdAgIC/vnnn27duuno6KAgRXFqa2vLflsiIiIihUDrvUqVKqK7
ITU1VdGHQ6R4V69eFf10Li4uXBeIhLt374p4q6GhERMT85///Achd82aNZ07
dxYLSbVs2XLhwoW3b9/mfFsiIiIiRYmLi9PU1ESbbdWqVdzikwjOnTsn4i2X
vSWJh4eHGLIOQUFBnz9/fvr0ac2aNdXU1CwsLGxsbHC1REZGstOWiIiISIFe
vnwpVtHZvXs3F4klAnt7+xIlSuCmQH759OmTog+HlMKrV69EUQn379/HhREf
H29nZ7dv3z5PT8/Y2FgGWyIiIiKFu3Hjhhhxd/78eU4zJAJra+tixYqVKlWK
W2WRJDU1VczjgNWrV4sNkRMTE9+9e8eLhIiIiEhJHDp0SOx24eHhwY4qov+m
b5VVpEiR6tWrJyQkKPpYSIn07NlTQ0MDpWWNGjVu3brFgetEREREysbGxqZ4
8eIlSpQIDw9nHwQR/P7774ULF65fvz63yqKMVq5cWaxYMdGBa2try9kcRERE
RMpmzJgxRYoUadCgATuqiISBAwci3rZs2TIxMVHRx0JK5NKlS2LNMVi+fDnX
4iMiIiJSNu3bt1dXV+/Xr19SUpKij4VIKXTp0gU3Rbdu3XhTUEb+/v7S6lIz
Z87kTmpERERESuX9+/fa2tpsqhFl1KBBAzU1NSsrq+TkZEUfCykRZ2dnqfdW
T08vODiYqyUTERERKY/w8PAyZcqgqbZp0yaxECiRivv48WOlSpVwU0ydOpXP
fCgjKyurwoUL//SvrVu3cvotERERkfJ4/PjxL7/8gnba8ePH379/r+jDIVK8
5ORk8czH2tqakytJ4uHhoaWl9VMGtWrVcnd3F+sno/zcvXs3Am9SUhLX6CMi
IiJSiFOnTomxdq6urtzkgghiYmJEvF2zZg2HNJBkwYIFRYsWxYXRunVraQZu
jx49wsLCPn/+/Pjx4/r16+vo6Dg7O3MDcSIiIiKFWLVqVfHixYsUKRIcHMwe
ByJAWhHhhSP2SeLv71+nTh01NTUxJnnlypUoOfFn/Ff08ru5uf3888/4yfr1
63nZEBERESlE//79Cxcu3KxZM+7vSSQEBQWJeLt9+3bOrCRh48aNIs8i5L56
9SoyMnLq1KmiM1dLSwuR9u7du2Kix/jx41NSUr74558/f46IiAgPD8d/P3z4
wGeJRERERLnu48ePenp6ampqY8aMydweI1JNL168EDll//79nJBOEBwc3LBh
w0KFCmWckR0UFDR69OgiRYrgh9WqVZswYYJIu0OGDMm44La/v7+9vf3AgQO7
dOnSOV2vXr127NjBVZeJiIiIcpe0bPLq1au5hA6RcP/+fTHK1NHRkZMoCTZt
2iS6bqtWrfrixQsplvr5+U2ZMkWk2nLlyomhy1ZWVgEBAVeuXBkwYMD8+fNN
TU319fXV1dUzrkmlp6eHl4WEhDDhEhEREeUWNONFL9WRI0fYS0UkuLi4iPXW
nJ2dud4aeXt7N2jQQHTdzp0794sngUFBQX/99Vfz5s2lAFutWrVOnToZGRnh
J/Xq1RM/nzBhwubNm3fu3Gltbd2mTRv8sGTJkrt37+bodyIiIqLc4uDgIJrx
t2/fZjOeSDhz5gyiB+6Lu3fvfvr0SdGHQwpmY2NTrFgxXA+GhoYZu24l8fHx
d+7cGT58uBioLIXcMWPGzJgxQ/xbR0dHvCw1NTUqKurSpUui4O3cuXNSUpJC
fikiIiKigmfNmjVixF1AQADHyBEJx44dE/H2yZMnjLcqLjAwsF69eqLr9q+/
/spiSWQpBc+ZM8fe3t7Z2fnVq1cXL14USfb8+fPSQPe3b99WrlxZjGdG5s2r
X4WIiIiogPv1118LFy5cp06duLg4ruRJJBw8eLBEiRJIH8+ePeNjHxW3atUq
qes268eAI0eOFL23jx49QgoWJSpCroi3yLlSvE1OTi5fvjx+WKlSJcZbIiIi
olyRkpKiq6urpqZmZWWVcZ1PIhW3e/duEW99fX0Zb1WZu7u7tNetra1tFvNk
3759W6tWLbzSwMAgJiZGelp44sQJMRLAxcVFmgDi5+cndp7i4GQiIiKi3PLq
1SuxbPKqVau4bLIKwpfu7+/v7e0dHR3NEJfRtm3bxKD9oKAgnhmV9fr16/bt
24uFoSwsLPDXLC6GZ8+efXXT2wMHDohHJdevX5fi7T///CMy7+TJk1NTU+X+
mxARERGpgJs3b4rdT7hssgpCcJswYULHjh3btm1rZmZ27tw57oAj+euvv0S8
DQsL46B91fTp06fZs2eLHX9q1qz53cX39u7dK2LswYMHMxanW7ZsEdeS9A5p
aWlSaj527BjLXiIiIqJcsX//ftGDwGWTVdDGjRvLli0rrfJqaGiI9jn3KBHW
rFkjpltGRUUx3qqmkydPVqtWTU1NDaF1586dqampWV8JIrHisvHz88vYybt2
7dov4u3FixfFyGRjY2Pue0uUc7in5s+fb2lpOXv27IMHD4aFhfG2IiJSTQsW
LBBteC6brIKuXr06c+bMLVu2LFmyRKxyo6+vn3H8pCqTlsCNjY1lvFVBLi4u
TZo0Easl4waJjo7O+jLw9/cXD4sGDhz4xToG69atE/EWdxxuridPnrRq1Up0
3e7YsYMPlIhyCHm2WbNm5cqVU1NT09TUrF27toWFxYMHD1iXERGpoB49emho
aOjp6XHZ5IINtTwaAHv27ElJSZG+6NTU1ODg4KSkpKioKDs7O9EC7927Nxe6
+W+GeItbQ9HHQnntypUrUgKdMWOGLB2sp0+fFiNhMidWadDy3LlzT5w40aFD
B/HO5ubmWU/mJaLvev/+vXgS1a1bt3HjxrVu3Rr3Fxo2xsbGjx8/5rZuREQq
JTk5uXr16mpqapaWlkw0BRtq+UaNGtWsWTPj2q0ZxcfHiz1NSpUqJfqY8v4g
lcrSpUsRb3FCGG9V0MaNG4sXL16uXLnVq1fLmEClCbYPHz78okXt6ekpOna1
tbXr1asnsq2Jicm9e/d4oxHlEIpoTU1NlNW3b98OCAjAbTVs2DCxP9ekSZMy
LvJGREQFnre3t5j/ZW1tzWWTC7bLly+LnTezWEMMbQOxzhiXcv1v+rj9okWL
otXEPUlVkK+v79atW52cnGJjY2XsXRVrkVWtWjXzMOa0tLRNmzaJNeqF3r17
u7q6MtsS5VxERARuLh0dHams9vHxadq0aaFChSpWrIi0yw5cIiLV4ezsLOLM
gQMHOP8rvwsPD8cXeuzYscjIyMwNclnibUpKipmZmbq6upaW1ndnGhZ4c+fO
RbxF64jxVjUlJSWhVSz7XfD333+XKFECd9lXe3vj4uIcHR3XrFljY2OD4Ozp
6ckmN1GuSEtLW758OW5A/EH6obSe24oVK/j0PueioqKcnJzs7Ow2bdrk4uLC
TRaISGnZ29uLyWKIRSys8jU/Pz8LC4vGjRsbGBicPXs287eJr1jE26x3IZGa
BGx+z5kzB/G2cuXKjLcki2fPnvXq1WvIkCHfWscAdyX+V2xsbHJysoo/OyLK
XZGRkQkJCRkfK3l4eIjBaS1atEhMTFTgsRUAXl5evXv3btCggY6OTrVq1Zo0
aTJ9+vRXr15x3QAiUkLLli0Ti+c8ffpUxbNMfid9lSNHjvT3989c6Vy/fl3E
W0dHxyweZZw/f168DH9Q8SceIt5WqVKF8ZZk8f79e09PTx8fH5alRAr39u1b
LS0t1GXFixcPDQ3lA6VsCwwMNDMz09DQ0NTUbN++feXKldXU1MqUKWNlZVUw
ds37+PFjAfgtiEgilhKC8PBw3t35V3BwsIGBAWqc/v37P3/+/Kut61u3bomB
6F/t25U8evTol19+wcv279+fRSevKhCDkxlviYjyIyMjI7Gx17Nnz/JvP2NI
SIhin5iNHTsWrcSWLVseOnTowYMHp0+fNjc3R9otVarU1q1bMw4Iz18iIiIO
Hz48efLk3r17I6rv2rULaT3/XidEJDExMVFXV69VqxYb8PnapUuXRJfrqVOn
vhVdb9y4IeLttWvXsljQxtvbW8Rbe3t7FZ+OzXhLRJR/de7cWaxSfvv27Xy6
jNvBgwe7deum2OljI0eORJ5FyyE1NfU///kPjsTNzU1bW1tNTU1fX9/d3T0/
nlu0iHr27FmnTh3RLipcuHCNGjWGDRvm5+fH4TdE+VpaWpoYuoOCizNT8rXd
u3eLXTW/OixZcHFxEcX43bt3syi9X758KeYrZbEClYpgvCUiyr/69euH2JKv
59q0bdsWCX3Pnj0KfNrs5eXl4eGBEyiN8UPbYPny5WI+1LRp0/Ld1ktnzpwR
myPj+MuXL482sIWFhZGR0S+//LJ27dr82x9NRBAaGio2qvjjjz/yXelEGYmK
RltbOzY29luDzK9duyZ6eLMepiX13jo5OeXT9kBuYbwlIspjp0+f3rVrV0JC
Qs4nTFlZWYl4e+LEifz4tBaRtlKlSjj+kydPKlt1HBYWVq9ePTU1NVSRyL/5
qMfz6NGjTZo0Edl20KBBiLqenp5Pnz69cePGzJkzs91RnpqaeuDAgXzal01U
kOCOFv10q1ev5rL5+dq0adMQxNq2bZtFL7y0ZtRXdy2RoJ4S8TbrMcyqgPGW
iCgvXb16tWnTpjVq1Lh8+XLOA93w4cOLFCmC6uzw4cNKEm+fP3+OJCVj3Rod
Ha2pqYnjd3FxUcLqeOHChaIDd/fu3fllKtPx48cNDQ3FjOyJEyeK70I8SEFC
DwkJEQOws/HOPj4+jRo1atGiBS62/HI2iAokaa2hXbt28WbM18aNG4dKvFev
XklJSd96DUr1kiVLIuHGxMRkUXpLS0tlPYZZFTDeEhHlpT59+mhoaCA0ubm5
5TzQDRs2TPTeHjx4UBnirb+/f9euXU1MTB4/fixL9YqXiT4I5Vwa6/bt26K1
gG8ti7aH8rh48aK02tiUKVNyd5ptQkLCrFmz0GaoU6fOli1bOMKZSFHOnTsn
y0aopPwmTZqEeGtubp5FFSPm5+rr66MQzuKtTp06hRSsrq4eGBiohPVpXmK8
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
t4sXL2aFwuQCwnbgwIHDhw+Hhh03bpyoJ0xWVtbly5cpfF+zZs1KIfgnwzAM
wzD5MnXqVIqKc+/evVLYEpudnb19+/Zq1arBepd6EB5GDDo6OhRR/+3bt2Vd
lopG586dBefkIvt+v3v37syZM7169SJ5Bbp06WJjYxMcHMzNpNQQ5O2iRYtY
3jK5oC0etWrVkpOTu3PnTq4R88OHDwsWLMABqD9Llizh+sMwDMMwpc8///zT
tm1bjNRVq1aNiYkpnbVUf39/2t125coV9k8uNVq3bo0X3a9fP5a3UsfU1FQI
LQU1WoRlVh8fn0mTJpFzI8nkGTNmPHz4kBdtS5l3796RvLWwsMjOzi7r4jCy
xaVLl2h9VktLKzExMe+IGRQURJt9OnXqJFNpqRmGYRgJSU5O9vPzu3bt2o4d
O9atW7do0aKZM2dOmzYNhtns2bNXr169a9eukydP8uqDzJKamkp5pjp06FBq
PqsRERFkQJ4/f57lbanRqFEjPPPBgwfDgC/rslQ0aE2H5C0M4EJ5QURFRdna
2hoaGpLZDHr37r1//340E+42Sx888/r16+Mt/P777yUUi4Apv9y5c6dGjRq0
uJ9v6gq0/VatWsnJySkqKnIQP4YpEygBUGho6MuXL58/f/7o0SPXHG7dunUx
hytXrty9e/dBDh4eHk+ePIGWCQkJSUlJwRBQtGb7zz//wLiKj4+PjIzEpQMD
A1/k4O3tjfNjoPfy8sIfnv8F3+LSLyQGBz99+tTNzQ3KC/LK3t4e+mvDhg3r
169fs2bNkiVLrP7LypUrN23aZGdnh7vGc3j9+jXMfp4zzxeIIDzh27dv43n2
69fPwMBAXV29WbNmDRs2hFBCz189h5o1a8JIUFJSUlVVNTIywjstiYwzTDFB
26eF1BEjRpSa6hEuKnmWQDTG7Ozs9PR0dFnoPWJjY/EvrAs2HiTk06dPv/76
K575n3/+yUa71MFAI4jTnj17xsXFSTJ8JCYmnj59um/fvkJccZjEc+fOxeCF
d8R1u6ygndTGxsY8EcTkAoYipVc7e/ZsQXOzPXr0oGjnsHLZjGQqNugkIQlj
YmKiRYjKITIPERER4TmEhYVBAIaIEJzD27dv6ecYQzMyMqAaJBkHYUYmJCTg
hFCL58+fX7p06eDBg/v06QPp0a1bt65du3bu3FlXV1dHR0dTU7NdDpAtWlpa
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
Jm7cuNHY2Fh+hWrVqq1YsYLalhCSnVDeEqIhw4YNEwGlJTvOEAX4V8q+OZUr
V/7QgkIORdm+DdjY2Giev+bo6Hjp0qXU7n1kZKSlpaUSwNmsWTMcKY/08uXL
le+ClMYDj3cYUkhyCtHR0WXLlpUHuE2bNrksSSEz9OvXTxJvJ02alPl4DLSz
qakpToh/VZMX8NrCwgLWWLRtp06dTp06hYOZzkMIyU6OHj1KeUuIJkyePFlX
Vxed5cSJEyyRoVX8/fff0GLivE2dOjU3rTbiSTM2NhblDr89ICBAQ0fxyZMn
rVu3btCgQZplY+Fwbtq0SdkEs3HjxpcvX7a1tVWioIcPH963b1/I24MHD/Jp
JzkFd3d3JQSXyZ4Kfn5+FStWlGbZsGHDJ2kW2WaoSJEiypzbixcvfvvtt8qV
K4sNgaCGY5mxrdAIISQzUN4SoiEYuCWla9++fXT4tQ0PD4+FCxfOnTvXy8sr
N0XBhYSEKO56q1atNK/yBNsu0YPOzs5p2va4uLiNGzcqCrdhw4bQ0RKW3LRp
U7TnpEmTKlWqxKhCkoM4c+aMsoWWq6srH10BY5ZSmuDixYufJGD75cuX33//
fcGCBWvXrn3hwgV/f/8xY8aUKVNGtO3QoUOzbT8mQghJgbLN961bt2iICFGD
EiOqvlwk+Vy8ePEiPDw8l0XBOTg4KO56nz594uPjNfzg1KlTJdhATaFvOKhb
tmzR19f/QgV4p7Ic8+jRI3t7+8TERC6+kJyCsrVrs2bNIiMj+egKffv2leAW
8KF66Rng4cOHkqrfqVOn/v37K3NlEyZMgPWgS0kI+VwcP35cfKdMVuMkJNez
evVq2Xt048aNlLcke9i9e7eSJDt+/HgNk+Zu3LhRrVo1CFVTU1NoWDVOflxc
HBSu8hXg+++/185dOwlRT2JioomJiWR9LliwICeWT79z5461tfX169c/YUWs
qKgoAwMD6d01a9aMiYn5qN79+PHjmTNnjh07NjAwMIUuDg8Pb9++PeStXjLy
FbNmzXr69Cn9SULIZ+TEiROUt4Rows6dO0UFLF68OCc6TiQnsnXrVkV7WlhY
aJI0FxYWJj4nPnLkyJF0A+n379+vKm9btmwJ7zSXLYKTvMCDBw+USP6zZ89m
Z83kT8Lr1687d+5cvXr1pk2b/vnnn59qlLlx44ayrjpo0CB8i+afff/+/eDB
g0uUKFG4cGHVEuvCpk2bSpcurRr7MXfu3KCgIFoPQsjn5eTJkyJvmaVCiHqO
HTsm6UuTJ0/OTcWLiDZz6dIlJThZw6S5FStWyEoKHtR012Hv3bvXrFkzZSMV
UKhQod9++41POMlx2NjYKBmmHh4eOc6lSUhIUDIFKlas+Kniezdv3qzMX33s
3OyDBw9EwHbq1CmFbk1KSmrYsKGq6ciXLx9nxggh2oAib+/cuZPjxgJCshM7
OzvpLN9//73mKZCEZIaYmBgLC4vBgwfPmTNHk1xCe3v7GjVqwM/87rvv0nU1
Q0JCOnfuLOu8JUuWHDJkiKTrli9fPicufpE8jlL9D4Y6J24JBB9MijXhFvr2
7Ytb+CRScejQocqe4MePH/+ouohLly6VlJwdO3akSMl59epVirR9kBObnRCS
+zh16pR47Hfv3qW8JUQNN2/e/Oqrr9BZzMzMPiq+i5DMEBUV5eXlpUnVrFu3
brVs2RJytUGDBm5ubupNOrzc2bNnixwA8GMfP3787bffSgkanMHb25sLMSQH
IWWO8PR+8803cXFxn/tyMsKDBw969uyJPphaTmaM+Ph4ZU9w8PDhQ809vZiY
mPr16+vo6NSuXdvPzy+FNfjrr79gQMqXL29qaqrI56CgIMpbQjLGvXv3tm/f
ztT1T8Lp06cpbwnRBDgGksHUtGnTHOo7kVwMRkZ49XDvq1SpcuDAgXTXaHBM
pUqVxO8dP358cHAw3NcrV64YGBjIm8uWLeO2oSSnAJtcoUIFEVnTp0/PodH1
cMPc3d13794t/THzJ/T19VXykQ0NDT+qmvS1a9dkRnfhwoVphjTjIu3t7adO
narMkj1//pzylpCMYWpqamRk9Ouvv+ZQ86VV2NrairxNd6qfkDxOaGio+AkQ
BS9fvvzcl0PI/wcucadOnUTb7tmzR321ZHD79u0GDRpI3ty3336rbBYMJ3bV
qlUSjghnmOMCySk8ffpU0XEbNmzI0TMzn3A3LkWiggEDBnxU3NH8+fP19PSK
FCmiPgv4l19+UeRtQEAAQz4IyQDoOCVKlPgieVMzLqBkHmUP9Pv379ONIUQN
MDhff/01Oouurm54eDjnqImWAOstKbSVK1fetWsXHlT1D2dISIgSxlm/fn1I
XdWCqBEREcoumXPnzmWRcJIjUK0PfPLkSWaOC4cPH1bKbS1fvlzz7hwUFFS3
bl0dHZ2xY8fGx8erMSnTpk1TXb2lvCUkAyiV5QwMDGJjYz/35eR4zp49S3lL
iCbAXypbtqwM4r6+vhzEiTYAr75jx47Qqng4d+zYgWFRvbZ99+6dUoEH7N69
++3btyk+4uTkJDM5lSpVmj9/PuQwn3ai5Rw9elSpMX7r1q0UW9jkWdatW6eU
Tf6oulJ79uyBLtbT00u3MSdNmiQl6WCFuGU2IRkDfVNWbyFyY2JiVP+EDhgf
Hx8YGIj3ORZrCOUtIZpTrVo1SUv09PRkfyHawA8//ADfEk/m9u3bMfal61uq
ptxOmTIlTXc0MTFx1qxZIoHLlClz+fJlroURLcfKykrRccwAVVi4cKFsEwbc
3d01H7Zat24NuTpkyJB0Mx1wjJSWgmHhqhMhGQPDrsjbChUqqPYjWLPBgwd3
7969U6dOZmZmc+bMefLkCf3PdKG8JURzmjZtKumKt2/fZn8h2oC1tfWoUaOO
Hj2a7rotuHPnjrJV5XfffacmCCEoKGjgwIHitTo4OHAtjGg5irwtU6ZMdHQ0
5a0g+bNoFiMjo49aWp06dSoUrpOTU7pTW23atJFMh44dO7569SrTl0xIXiQm
JkaCk2vWrKla3cXT01OpKvBF8hZ+PXv2DAwM5DKues6dOyfy9sGDB3TXCVFP
nz59JCfx4sWLXM8i2gBU7dOnT9+8eZOu4xoVFWVmZiYPcJMmTe7du6fe5j96
9Gjo0KEjR478VPtvEpJ1XL16VWoode/enSJLYc2aNVIpDi7xRzWLv7+/q6tr
QkKCesOSlJRUsWJFcbwnT56M4zN9yYTkRby9vUXGppgmwuvTp0/b2NisX79+
woQJhQoV0tXV/VQbh+ViKG8J0Rwlyejw4cOaJzERog2sXbtWKTJjbW2d7gMM
txYDLvfgIzmCuLi4hQsXjh8/3tnZmcEGCjdv3hSfecWKFVlRJu7FixeSpw+2
bdtGl5uQD+Hn52dpaenq6pqmgbKzs5MJOmjYFNNE//zzD8Zr6Fx/f3/Z/i8X
VFeGa3HkyJG5c+f+/PPPK1euhAhVY7ejoqLc3d2fPHmiuW0/f/68yNuPSsog
JG/yxx9/SKDX9u3bOY6THISTk1Pt2rUlLBkSAE4pozdJLiM8PBwOJPwfPtsK
8JP379+PAQuOcVb4eMqSE7hx4wYnFgj5ELt37zYyMrKwsEhzomnLli2SXrF6
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
1fDhwyUwG3yqc34sZ86cWbBgwYMHDzL5cytS/fbt2/TECFHPw4cPZeeX6tWr
M12dpImFhYVUHczS6o6EEG3m7du37dq1g3Pes2dPzoUSojnQNceOHWvUqJGs
21atWvXw4cNJSUlZLTajo6OVQOjRo0dr/4YyaJNvvvkGRsbExOTIkSOZrGbp
4+Oj5DiXKVMmMDDwsyx6JiYmZiYmWcHNzU3cdTs7O3pihKgHnU4m5AsVKhQS
EqL9M3sk+8EoIyExrCpDSF5m+vTpGCn09fWZp0CIhkBVLViwwNjYWNG2+/bt
y9JSyQouLi4iiMCePXu0v3zo+/fvR44cKcvN7dq1Qytl5mybNm2S2jKgd+/e
OX1SztfXt3jx4riX48ePcxsLQtTz119/lS9fXrr/o0ePGM9PUnPr1i0Jiflc
qSuEEG1g165d4i7euHGD6beEqCcsLOzEiRPm5uZlypSRNcT69esfOnQoe7Tt
/6nUDgWurq45IqLVy8trzZo1AwYMsLCwyGQSRNu2bSUUHKxatSqnT85HRETo
6+vjXmCHtX+mgpDPjhIwQ4+FpImfn5/MGfbu3Vv7o5sIIVnEzZs3ZTEo+0uw
EqLlYHCENLtz5861a9cuXLgAPQVhW7duXfGvACSbg4MDDsu2yIdRo0bJSij0
dQ6KuIiNjX3y5AnUXGYWXOC3lCpV6ot/yQUF8d69e1e5cmXcy9KlS1n9gJB0
6devX4ECBdBlTp06xXh+kpqoqCiJYDc2Ns5ksBAhJOcSGRkpywcTJkxgpX1C
FNAdxo0b980337Ro0aJJkyYmJiYVK1aUFVuFDh06rFmz5vTp03fv3n327Bl6
E0RK1klOuHNK4m2PHj3y2r5+aGelZHTdunVfvHiRU9S9GmQbiylTptD8EpIu
kk4FC2BlZcUJeZIajJJlypTBE1KkSBFI3VwwRhBCMsD79+8bN24M/wpeFme6
CFFwc3OTvU3V8OWXX1auXNnY2Lhly5aQuqamplCdw4cPnzlz5m+//bZs2bLN
mzcfPXr05MmTjx49ynwgcUhIiMxLgwULFuS19b41a9YULlxYbj/XTMeZmZkV
KFBg1KhRjKMjJF0WL14sdXFhDXJ6bgLJIpo2bSoRVr6+vkzQJiTPMnr0aF1d
3aJFiz579oymgBABWrJbt25fffVVhQoVqlSpUrVqVfxbsWLFYsWKKcHJaYLe
BBFaokSJcuXK4SN16tSpV69e27ZtM1/m19XVVakrdeLEibxWjGjYsGHKlkAb
NmzIHc7twIEDcVN9+/bN6WWyCMkGNm3aJHNc8+fPz2vze0QTrl69qsRZ4XVO
T2AhhGSYP//8U8YLBwcHmgJChL///vv+/fvnz5+3t7d3dHS8cuUK/sVrvHP6
9Oldu3YtX7586tSp33//fZcuXRo1alS5cmWl6FOaPHnyJJPy9uzZs0p07r17
93JEXalPiMTxyu3nGr/lxx9/1NXVbdKkCYNnCEmX48ePy7YvQ4YMYcADScG5
c+datWqllB+0trbOa5PAhBAFJaNt48aNuWNBhJCsJjExMTo6OjAw0NvbGyrY
xcUF4hdj66FDh6ysrNYnA/37xx9/zJo1a+LEicuWLXv58mUm84BsbGzEtSte
vHhoaGheyyqqWbOmzMlXrVo1B5XVUs/q1asLFy4MCxwREZE77oiQrAOWVrZ9
adq0KWeEiCpubm6qU6BgxowZ3BuIkDzLo0ePpI46878IySTv37+H8n2VDPTv
ixcvoEP9/f3xOvOR/wcOHBB5a2pqmtfqSoFatWqJvB00aFCuCeW1traW3zQg
IIC5IYSox8fHRxI04LTExsZ+7ssh2kJUVFT37t2lqvbw4cOl/lizZs3y4EBJ
CBHevHkjm1NUqlQpJiaGKwiEaCdubm7i2q1YsSIP5p199913knu7efPmXBNn
okxZPH36lPKWEPVERkZKeb18+fJlvpoByTVs2bJFohBbt27t4eFRv359HR2d
IkWK0K4Skpfp168f/EZYgwcPHuS1hD5CcgoJCQnbt29ftWqVn59fHuynDg4O
sFSjRo3y9/fPNR7LqVOnxCuDS5YHf1NCPoq//vpL2fza3d2dXYYAPAmiZ/FU
HDhw4N27d5MmTZIN4s+cOcP9kQnJsyjVpQ4dOsRMfEK0ltevX798+TLXiLuP
IjEx0dPT09fXNzf5tHZ2dpJLePPmzdxRLIuQLMXExESEjKOjI7sMefv27YgR
IySwZ9iwYbIf+sGDByUqZsqUKUy/JSTPcv78eVlBmDdvHk0BIYRkD1C1EnBu
b2/PVQZC0qVHjx6SYnnq1Cl2GXLu3LmyZcvieTAwMLh7965MfoaFhVWpUiVf
vnwVKlTw8fHJmxPChBB0f6ku1bZtW1YjJISQ7MHT01Ns75EjRxg5Q0i6DB8+
XJbq9u3bxy6Tx4mOjlZ2Alq4cGFCQoJUj8G/M2fOlAJTW7duffv2bYoPXr16
ddCgQY8ePcpNsUCEkBQkJia2bNlSR0fnyy+/hJc1ePBgGxub1AaBEELIJwTu
mb6+PnywNWvW5Jp6WYRkHTNmzBDZsmHDBnopeZx9+/bJdvNNmzb19fVVXaX1
8PCQwJiGDRtGRUWpFk2Ni4vr3LkzRDFnSAjJ9SxYsEBPTw+moEOHDgULFhw0
aBA3CSKEEM25e/fuzz//fPHiRc1jJv/+++9q1arly5ePWzQSoglLly4VXwUv
OCOUl3n+/HmTJk0kETv1Ei3+O3HiRF1d3QIFCpw9e1bVJtvY2EjFA1tbW8a3
E5K7cXJykv4uNaaYhEsIIR+FtbV1qVKlGjRosGnTptjYWA03WTMzM4MDlps2
8yUk61i7dq14KbNnz86D+6MRBQsLC5nogAkNCgpKnWB79+7d6tWr58uXr23b
tmFhYXJAUlJSs2bNIIqrVavGvaUIyfXExcWJHZCS+w4ODqxJSAghmuPr6ztq
1ChdXV1DQ8OJEyc+fPhQk8SusWPH4iPt27d/9epVNlwkITmabdu2STzqzz//
zEn4PIu7u3udOnXEZT1x4kSai7BQssuXL4cELliwoLK86+zsLEs5MNEJCQlp
nhzv379//8KFC+fOnbt9+/a7d+80nKskhGghvXr1koKE0LmhoaHszoQQojn/
/POPj4/P/Pnz4VAVK1asTZs2Z86cSTe3a86cOTgeVjc2NjZ7rpOQnMvevXtF
3o4YMeJD8oTkeiTwGI/B0KFDIyIiPuSvwpUdMmQI5G2NGjUgVN+/f//LL79I
7vbx48dTi2Kc5+zZs3379m3VqpWJiUn9+vWbN2/+448/cpNlQnIoz58/r1Wr
lkyFlStXTvYO+9wXRQghOYzw8PBt27a1aNEif/788I5Wr14Nc6omBG7lypWF
CxfW19ePiYnJzuskJCdy7Ngx2dIUGoQVQvImV65cMTAwgL9apkwZV1dX9aGG
9+7dq1u3ro6OTo8ePaBSoXPxwSpVqqSOTH737t26desaNWok+bwKRYsWbd26
tZeXFxUuITkLGAeliDqAV3b+/Hlm3BNCSAZ4/fr1rVu3fvjhB11d3UqVKg0c
OBD//ZAPtm/fPrjrsLphYWGcVCREPba2tiJvzc3Nma6eB4mNjW3Xrp1sBvT7
77/Hx8erN5twZQ8dOlS+fPnChQsPHz5c1nzHjh2bYun/6dOnq1evNjIyklUe
GO0lS5asWLGiT58+shEVXrOUGSE5i2PHjsEHQ6euWbOmTFuxcjIhhGQYeFy+
vr5wkEqWLKmnp9e8eXMrK6vo6OjUy7inT58uWrQorO6jR49Y54QQ9Zw9e1b6
S4cOHZiungfZv3+/RKfDTX327JkmNhPe7Pbt2/Gp4sWLi3rFSVTTRqBbu3fv
Lm5w2bJlly9fDmscGRkZExPj6ekpkY3Q1HzeCMlBBAQESB25AgUKWFtbS8iH
vr7+5cuXuYBLCCEZJiIi4sCBA6amprCu1apVGzhwoKOjYwq7amtrK+66m5sb
g98IUc/Vq1elNFCdOnXi4uI+9+WQbMXLy6tx48ayCvOhilJp8vLly61bt4ou
BjY2NqryNjw8HMpX/rR27VrYbVXVbGZmlj9//vLly7M8AiE5iBUrVkiZ/Z9+
+ikqKkrZANfc3Dw6OprBcoQQkmESExMfPHgwa9Ys2FVdXV34Zn/88cedO3eU
WOWTJ0+KvMWblLeEqAe9qVixYugvJUqUoNzIU7x9+3bcuHESXTx79mz1NQ1S
c//+fXlyQKNGjU6dOqWo42fPnom8tbCwSKFtAZxhyNuSJUvyeSMkp3D37t3a
tWvr6Ojg38ePH8O5CgoKksXcIkWKWFlZKTtlo1+fO3du165dy5cvX7Ro0Z9/
/nnjxg3WSyeEkHQJCQmB8ZQtbkuXLt2iRQsI3osXL3p6esJPg/KFcwXbS3NK
iHrgqIhIKVSoEKux5SmOHz9erlw5/PRNmzb18/P72FSOw4cPS9Z2y5YtYYcX
L16s7Jvs5eUlDxXc2tRFEmQHIihiRgsQkiNAV1U2A7K0tJSsefhX1tbWYgRq
1qx54cIFmeDCm02aNKlWrVr58uXLlClTsWJFWJgpU6ZouLcjIYTkZd68efPg
wYP58+dXrVoVzlKJEiUaNGjQpk2bSpUq6ejojBgxguUOCEkXHx8fUSLoRGp2
hCG5DF9fX1l5yZ8/f4rQYg2ZNGmSrPzu3bv31KlTT548UXzXR48eyUN1/fr1
FPIWzxtsdZrVqAgh2omVlZXEY/To0cPf31+ZCouJiVG2BoMDdvLkSViSmzdv
Tpgw4dtvv4UixvH16tWDncHH4Z6xXjohhGhCeHi4g4PDtGnTDA0NpcgJgOBl
4i0hmgBfRUmTDA0NpbzNI8yaNUuc0pkzZ0ZFRX3s756UlFSzZk3ZSyh1nIwS
8X716tUU8nbTpk2Svrdv374MaGpCSDZz584dExMTkaipq0gFBgZOnjxZjAmU
7Jw5c3DM7du3PTw8PD09nZyc+vTpU7JkSXHP5s2b9+bNm891I4QQkoP4559/
4F85Ojpu2bJl+fLle/fuTV1vihCSJs+fP1fkbUhICOVtXsDe3l7mA0eNGqW6
FqM5AQEB8tj07t079X5SN2/elHplLi4uqvI2IiJCtsHFt2fsewkh2UlkZGTX
rl1l4zBI17i4uNRjBKzBH3/8IQahVKlSTZo0MTU1HTx48KxZs7p3716xYsXS
pUv36tVLV1fXwMCAOzYSQshHER8fHx0d/fbtWxpPQjREVd5y9TYvEBsb27Zt
W/ir7du39/T0zFiUi1Jwe+nSpam3r7127Zr8FTpX9fzbtm2TYsvz589XEnUJ
IVrLxo0bJbsW+lRNhn54ePihQ4eGDx8uHR8UKFBAX18/X758zZo1w0k2b94s
fd/Dw0MTmxMREYGxCR7dX3/9xVGJEEIIIZoTGBhIeZunsLa2hp+pp6dna2ub
4SiXPXv2iLN65MiR1DHGTk5O4uWqlpaC1K1fv76Ojo6xsbG3tzeXbgnRcu7e
vSuZs+XKlUudaJCCt2/f+vj4nDlzZv369QsWLJg7d+6cOXOgal1cXF6+fLll
yxaxGE+ePEnR91WLKvv7+x84cGDcuHFmZmYdO3bEv99+++327dtfvXrFsYkQ
QgghmkB5m6f4+++/mzRpAn918uTJsbGxGf65Z8+eLdl2rq6uqddilODk8+fP
i4KGT9u+fXsJcYTHq+whQgjRTmAfIC2lWvKiRYtev36tibmAdIUUjYiICA8P
DwsLi4+Pl0+NHj1aV1e3aNGieF85D85pbW3dr1+/mTNnxsTEHDx40NTUtGbN
mpKer2BkZDRy5Ehvb28WVCGEEEJIukDSKvKWe2nleuB8wmXt0KFDJkuYfv/9
9wULFsQzExwcnPqZwYMkD9XixYv9/f0dHBy6dOkifvKkSZPwyHHplhAtZ9u2
bVIgLkW15Azg6ekJiZovXz7VVP2nT5/CjFSvXl1HR+frr7+eOHFinTp1ZBfd
7t27//TTT7AV5ubmYmcgeKdPn86yVIQQQghJl4iICLgWIm99fX2pO3I97u7u
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
f//73+rVqwsXLmxiYhIeHo7/KgcMGTKkR48eurq6UL7du3d/+fKl6l8JIYQQ
QgghhHxCwsLC2rZta2hoWKZMmcqVK5uZmb1+/TrFMc+ePfP09OTiY5oEBATU
r19fR0fH0tIyKSlJ9U+PHz/28PCYPXt2oUKF9PT0rl69yjYkhBBCCCGEkCwi
Pj5+zJgx1atXL1GiRL58+QoUKHDjxg1VFXbu3DlTU9M2bdrs3bv37du3n/FS
tRA01MyZM6FeTUxMfH1906wr9eTJk2LFin3xxRep9S8hhBBCCCGEZIydO3f+
8ssvCQkJn/tCtIunT59evXr16NGjX375JVTY7t27FRmLtmrVqlX+/Pnxfo0a
Nezs7Lj3jSr79+83MDDIly/frl27PqT98X69evVwzHfffRcfH5/NV0gIIYQQ
QgjJlZibm+vr69++fVs1vTQuLu7x48eMGn337h2UGmTsihUrlEVGiNkxY8ZM
mDBBKgN37do1NjaWCaTCjRs3TExMdHR0pk+fHhERoaZZRo4cWbBgwdKlS0dF
RbH1CCGEEEIIIZmnZcuWECNHjx6FlJN33NzcBg4c2K5duy1btuTuyNs3b95A
jp07d+7atWve3t6p60dB0pYpUwYadt26daoxtE+fPvX39x83bpyurq6enp6d
nR2nAoCPj88333yTP3/+oUOH+vn5qd/u1sLCAk2HtkVLcmNcQgghhBBCSCaB
vqtUqRIkBiSeEmFrbW1dtGhRvGloaBgWFpZbV9ZiY2OnTJnSvHlzExOTJk2a
QJfdv38/hcLFO5IiamtrmzoC2dnZWfa+mT9/fmJiYjZe+2fG3d0dD0YKTerr
62tubl6gQIHOnTt7eHikW2t669atRYoUQes9fvyY8pYQQgghhBCSSQICAooX
Lw6J4ebmpugRf3//HTt2iPTQRKfkUKDiS5cujXssU6aMsbFx9+7dfXx8Utzs
jBkzChUqVLt27cDAwNQSLD4+XuoDN2vW7NWrV9l47Z8TCNuuXbtOnjxZNV/b
y8tLtG2bNm00LIa8a9cuecYePXpEeUsIIYQQQgjJJJcuXSpatChURopVWj8/
P5G9Li4uuTLs9t27d02aNIEybd++va2trbOzs7u7e1JSkmojXLlyxdDQMF++
fCtXrvxQdV+JTy5cuPDz58/ziEbz9PQsVqxYxYoVX758Ke9ERkb269cP2rZd
u3ZOTk5v377VZMV/3759Im8hjfNI0xFCCCGEEEKyjiVLlujp6fXq1SvFvq5B
QUEibyHxcqW8VZat165dm6Z0xQFt27bNnz9/jx491CSHbt68GdoW53F1dc2t
y9wpcHNz++qrryBmX7x4ITLWwsIC7zRr1szZ2fmvv/568+aNn5+fg4ODtbW1
paXl6NGj+/TpY2VllSKPe9u2bSJvg4ODc2sAPCGEEEIIISTbgHaDTlm9enUK
iRcaGirqz9HRMVfK2wcPHkhS7fnz51Mn1UZFRUGU6erqVqxYUVogPDwch6VW
YefOnZM8ZXt7+1zZUKm5c+eOZByHhISgQeLi4urUqZMvX77GjRv/8MMPaLee
PXt26NChUaNG1atXr1ChgtSPqlatmpOTk2oTydQKWjgmJobylhBCCCGEEJIZ
IEykrtTly5dTSDzI26+//joXy9vbt2+LRnN2dk5xgwkJCQsWLChRogSE/5Qp
U9asWTNu3DhTU9OFCxemrh91/fp1Oc+FCxfyyO63t27dkluG5IcsRZvIDrZf
fvllkSJFZLMkwcDAoGHDhubm5gULFsR/UyzgTpo0SVdXt0uXLikiBwghhBBC
CCFEITo6WpNkxrt37xYrVkxfXz8oKCjF8pkSnKxhmaAcB+5LNJq7u3uKoOLV
q1dD9edLxtjY2NDQUGJop02b9ubNmxTnuXLliqzepliazMVI0+np6eEx+18y
uHdLS8u5c+f+9ttvv/zyy+LFi9evX79//357e3sXF5c1a9ZI/PaRI0eUzadA
nz59ChQoAJGbulUJIdqMt7f36dOnt2/fvmHDhs2bN586dcrLyyuPZGcQQggh
JJu5cOHCt99+q1oJ+UMcPnz4yy+/7NGjR+rlsydPnkjs7p07d3Kl06Ls6ZOi
bO/OnTurVasGYSvrj3g9duzYP//889ChQ2n6b7a2tmhDHPnw4cNc2VCpuXz5
MhS9amkpKNyYmJjw8PDQ0NDg4ODIyMhXr15ByeJ9tG3fvn0hY8uXL//06VOl
qdFWVatWRTunDownhGgzMHpdunSpV6+ekZFR5cqVq1Spgtft2rXbv3//h/ZJ
v379uru7ex6ZACSEEEJIhnnx4oWvr29AQMCbN2+U5dcVK1bo6emlruSTmrlz
5xYqVGjZsmWp9YWdnZ0sSqqpqpSjkfK/KUpCBQUFGRsb6+jo4H24bb///ruD
g8OzZ89iY2PhmKWZHwo5XKRIEci3XLxBcAqk2nbNmjUVeauGCxculCpVCu05
a9Ys1adUCQ9Q3XCZEKJVxMfHp7D/0dHRLVq0yJ8//xepgE04ePCgaoSGEBIS
0r59+9atW2OsefXqVR6xk4QQQgjRHPgPkBiTJk0yNTWF29CxY8cePXrs2LEj
IiICrsgff/wBeWtpaZnuoljnzp3hpaSpLzZs2FC4cOFq1arl1rI/8LLKli0L
l8za2lrxx16/fv3jjz/CDZs8eTJaGIo1XWk/Z86cQoUK1apVSxOtlxNJSEjA
E7J+/frjx49LQ128eBHytmHDhnFxceo/++jRI/GEGzVqlGL3H2X+xNfXN1fO
nxAtwcXFBd05dXkBki6wgX379t26davqUJKYmDh8+PChQ4cuS2bhwoXTp0/v
0KFDgQIF0J1r16797NmzFD0aGnnChAm6urrly5fHyMJoDUIIIYSoAudh2rRp
0AuiDhSMjIzGjh0bGBj422+/QXAtWbIkdR0kVcLDwytUqIAjAwICUuuLwYMH
FyxYcOTIkVA3WXk32UFoaCh0FmRUVFSUcqfQ7FLaqHv37qqx2X5+fq6urmhG
TSKN8cH69evr6OjAecsFDZUaPCSQBg0aNKhUqVLdunXh6L59+/bChQt49uDQ
vnr1Ss1n0ey9evWC06uvr29jY5NiTWfBggV6enpt27Z9+fJlrpw/IVoCuvnX
X3+NJy0uLo5P2keBvo8BokuXLil6upeXl7e3N8xpdHR0REREUFCQs7OzgYGB
5HScOnUq9UwCzK9U6cc49eDBgzySx0EIIYSQdIHyMjc3l5rGqfnqq68sLS2X
L19euHDhH3/8Ub3gEpEiibcpvD4IkypVqsBX2bx5c7oRztrMzZs3Z86caWpq
Cue2ffv2eDF16lRHR0fxvtCYXyVz6NCh1AF1moBTySSDsrKZm4AcGD9+PMSp
6hQKPNsrV66g0dTLW3x22rRpUpILz2SKGICkpCSZFsCzyqUckqV0794dqqpg
wYJQZIwT+CgkvKddu3bpxmnAon777beygPuh9VlbW1uxlitWrFA/9UoIIYSQ
PIKDg8M333yjJD1Br1lYWBxJZv78+bK7qKGh4bp16yArIOjUL679/PPPurq6
aQrYEydOSLmke/fu5dBp9oiICDROq1atUkwFFCtWrFGjRpICBhdr9uzZhQoV
qlOnDtr2Y8ueoGUGDhwIt9nExCQoKCj3ec54kEqWLCntBhdXfNfdu3e7u7uj
GatXry6Vk1N/MDIycvHixWXLls2XL9+cOXPCw8NTNI6bm5vU9bp+/TqrzZAs
pUuXLmIzXVxc+LB9FBhE0HSwounKWzBixAgMKGjnlStXpilvYXLlhLVq1YKJ
4Eo6IYQQkse5ceMG3AxF244ePfrWrVsxMTF/J/PixYvp06fLlqNr1qyBvIV8
wEc+5M6FhYVBnpQqVSrNFY1+/fpBy3Tu3Dk2NjYnOiFPnjzp3bt3hQoVlALI
KShfvvz8+fMhb4ODgyUprHHjxh+bnXf16lXJ3l21alXuW4K8dOkSvFCpstWm
TZszZ86IIJ01a1ZUVFSnTp2+/PLLvXv3pl6z9vT0HDZsmDT+7Nmz0cKpHzAL
Cws9Pb2mTZtGRETkxAfsk5CUTJ69/WwDj7HYgdu3b+fQybrPhZmZGQaC2rVr
p1tYAHbAxMREzIWamB+pC4HDYCX4WxBCCCF5GXd393bt2inadsaMGak3qcE7
Ugp44sSJQ4YMgWSDBIYSSdN/jo+Pnzx5MnQZJF6KA/Bd5cqVw3l27tyZEyOT
nz17ZmpqKkuNwogRIzZs2LB169Zly5YpEXRQppIQiuN/+OEHNFejRo3Wrl2b
phxLTUJCgrm5OU7VsGHD1KVUcjovXrxo3bq1PG+lSpU6derU69eva9SoAZkg
Qe/Hjh2DvIXfu2/fPuUhQWP+P/bOOyrKZPn77r277q6uP9ccAQVFxCxZUEmi
GDFnwYSYI2ZFDJizYkQwRzCBKCpmBAOIEQQUUcEAimnXDffu+z3UuX2edxJD
nsH6/OFBmHlCd3V3fburq/fu3WtnZ/fzzz9Xq1Zt4cKFCgsTNkmecLbbw4sZ
KMPY2FgU3ezZswcMGABT7NixIxqpn5+fwv3vTN5BmVPibvDgwQMu5BxBGRgw
rGRkZKj+5IULF0ScTGRkpLJp1UOHDlFcEOdLZxiGYZhvmZSUFBFfByZOnKjQ
GYa3QLk7LCwszp07V7t2bfh148ePj46OVuhsPHnyRJpqSUCnBUHLaOORQPBm
aTWWysrc3HzVqlVxcXEfPnyAKEtPT7979y7EBQVyQ51RST5+/JiWFXR0dBwc
HFS4Z4KgoCA612b9+vXaOAmgGhQaJCqVobe3N2V/ogmWSZMmffnyJTMz08fH
ByVmaGiIoiBPFSqYdtTa29vv37//zZs3Cu0Hn4eLizrS3tD3nALbO378uIuL
i7W1df369dEwoRqoeFGGBgYGdnZ2gYGBxW/7dpETHx9P7fS7775LS0vjtfIc
MWXKFIwFKDrVY0FiYqLYNYMflO1ZADdv3qQ52M2bNxe/bpNhGIZhGDUhvUnO
8PDhw1V4GhTzWaFCBThyAQEBkB5wpK2srMaNG3fkyBGIuGzVRFJSEsXyQQNq
48ra9u3bK1euTGVlamp6+vRp+cS8qampYqsyRAdJM5SYv78/Zfrdu3evaqGB
koRwho6DFk5OTta6SQDVXL58GcKf4gxtbW2FvdEci4g8hHrdtGlT9+7dT506
RWV47tw5FCDM9caNG/JRAcRff/1FqX569+79jWSyvX79+uDBg0n4k2WWKlVK
X18fv2ncuLGYtjI2Ns7W8JiccuzYMUpnhNJWZwPpt0ZISIiHh8fAgQNhe/J6
E42dssNFREQom/G7d++es7OziJbZsWOHCt2akJBAi7zLly8vfhs6GIZhGIZR
h9DQ0Fq1atHesW7dusnHJEs5ceIEfLly5cq9e/fuw4cPcF2GDRv2888//9//
/R+c51atWt25c0e1wl29ejU+X7Zs2djYWK1bWYuJiRH7v+CV7d+/X5nIgsKl
JCdz584VKh4/wFWDm5etYh0/fnzJkiXxdbFwWWwQQde04HX48GHxgjNmzDAz
M5MeX/vx48cHDx7A2Og3kA8wG/lEUlKioqIoWFRMLBRj3rx5s27duhYtWpBG
MDExmT59uq+vL9ppeHj4lStXrl69umbNGmG0RkZG2bZQJkegqdLcIERcsTy6
K9egu9u8eTNskkIpDA0N/f39ZZQpDSgoPfygsLWGhYU5ODgIbTt8+PCXL1+q
aP5JSUkkb9U5lp1hGIZhmOIHdJZIJwWRq2IKnYiMjCxTpkydOnUoEwhtLIUE
W7BgAaRxgwYNoqOjVTjP8fHx4hTXT58+adfKGhyz/v37i5hP6AiZw2hkcHd3
h1OHj8ksUqPQVL/4ixcvaMJh7NixKsLwtBQRdA3GjBkj3bsNW7p+/Tq83Ly8
MtTczz//3Lp169TU1GJWdDLExMT07NlTV1cXpgKD8fT0hJ7FW8u0rMzMTNpK
QFNY7PbnI2ieIq9UQEDAN7UyjrEA6hXyU6EsxSiwdOlSjBQiogDUrVtXplWi
vVMsMUpPRvnik6tWrTI1NRXhB25ubqpnX/+RxIqjH2A7ZxiGYZhvkHnz5lEM
LUVzffnyRbUiuHXrFrwROzs76ZFA8DcgUu7fvw/vWv6IWymzZ8/+8ccfK1eu
jOto3RLSiRMnKlWqRGXl6OiYbbonX19f6Cx/f/+cOr2QJ5AqkH4JCQnFLCw5
IyPD0tKSPF5DQ8OHDx/m+wtGRUVNmDAhp0mqtY7Tp0/b2trSHvA+ffqEhoa+
ePFCWWH+9ddfsChaZGzbtq3q87wY9YG4o3Tf4JtK1YtW1rp169q1azdt2lR+
TRbs2rVLzKhIgd1KG+azZ89osXXRokXSacAbN2506tSpZs2a4grjxo1DdyFK
OC4uDh0yOmGZMo+Ojia9rKV5CxmGYRiGyQt37typU6cO+Q8uLi7wNLLVGseP
Hy9durS7u3suwvDg1RgZGeF206ZNw9e1a2Xt3bt30lOTAgMDs1VPz58/P3Dg
gOpQOmWkpKQkJycXP2/54MGDlNcU+Pj4FMTyCnxaWLKyoPHiwdGjR83MzGCN
ZcuWnT59ujrCCl+hksdXlGU7Z3LKpEmTaNIAnYOWnnGWOyA2RboGQ0PDFy9e
SN89JCREuhMc3b7oOb29vaUyFq2VIlXGjx8vxpTg4GDp8eu41NKlSylHX0JC
Aix56tSptra2+P3QoUM/ffokfbDQ0FCacOBEagzDMAzzDSLOsYUjce7cuWxz
+f7zv2MXduzYkQvPAR74ihUrJkyYoI3H3NA5NeRuDRw48M2bN+q4snmMsy1m
ZGRkWFhYkNPbsGHD4rc2XTgcP368WbNmKMbGjRtv375dxaKtlPPnz9MmRyAj
RooZeLuLFy9u3Lhx1qxZUGFjx46dMWPG3Llzd+3adf/+/XycMkpLSxORyTKq
LY+gK9bkCoIOpTO8xJrslStXxPBx48YNNHMhTmvWrLlu3TrReXbs2PHjx4/S
qzk4OODDbm5uJFQvXbpEUzeis92/f//Zs2cx9KBC7e3tGzRoUK5cObp7nz59
ZOTtkiVLKCX7zZs3i9/0IMMwDMMwKoiOjhbBY4MGDZJP/6uQly9fHjt2LDU1
NXfCJD09PSUlReu8Dmh56aHAcJ7VmQpgZJAu3S5dupR3xuWCkydPmpiYQNs2
bNiQDgtWUweFh4eLMNqkpKTiN7GAviU4OHjKlClOTk4oIj09vYoVK5bJonz5
8pUqVYIis7GxkR6jnEdQ/mLG4Pz583nsE1CVUHaLFi0aMGBA586de/fu7e7u
vmHDBmXHrhUhT548EUfQEn5+flSq9+7ds7OzE11lyZIlN27ciFcQ2+11dHTe
vXsnvRqdDWRra0sx89Jj10pkpfuG/rW0tKTjrmjA+umnn5ydnVFWt2/flhYO
RhY6TdvQ0PDVq1eaPEXAMAzDMEy+M2rUKPIi4AzArVLfg/pvFgX6bJoGnCjh
nvXq1Ut1RilGIfBpeek2j1y+fNnMzAxlaGRkdOTIkRxF+J86dUposWfPnhUn
A87MzAwJCYEkbNy4MWSXWFXE+9asWVMnC/HuED5QwfmyL7tbt26UaA72nMc8
ZhcuXMDVoMqrVq1K10S3XKpUKYh0Kysr1UfhFD6wwzJlyogiBfPnz//tt9/e
vHnTtWtXkeUYzJw58/Xr12lpaeXKlaPf4K8pKSnSstq9e3fp0qVRcRQSM3To
UKm8lYKadXJy8vb2Pnr06J07d9LT02X6kPv371eoUKFE1kZdzmLNMAzDMN8U
Dx8+hOMklm6/qV1jucDHx0ck4Dp8+DBv6coF0BTCH+al21zw4MEDCiHQ1dU9
cOBAThOP07YC0ghQHMWmvUMYQlJJj/d1cHCYMmXKli1bTp48ee5/wPwWL15c
vXp1vL78hs1cEBMTAylKd5w1a5Z8ZPKLFy/UCVP58OHD2rVrzc3NpVtNIdWh
diHlqMrq1Kkjjn7WBLZt2wbp3b9/f7H9dsKECZCTS5YsERECwN3dnU5Aw5Nj
uBG/v379urRkIFRp8pC2kIeFhUmzHEAXW1paDh8+fMWKFeh7o6OjoYJxTYUG
LDIlfguHgjEMwzAMI2XOnDnkmZQsWfLy5cuaFvymUXz58kUcGwploU4CLkae
Xr160bJU7dq1Hz9+zGWYI1JTU7t06ULrYuvXr4cmyqk+XbZsGe1JrFWrlkx0
qJaCMlm+fLlUGA4aNCggIOD27duQlvJJ4NPT0728vCB/evfuLbP9UyFQrK9f
v1YW/j137lwx5XX16lWZLtTHxwfiFI+nYkNuSkoK6nH+/Plik0jbtm1Xrlx5
6dKlu3fv3r9/Hwoago5OfR01apTmLEfu2rWrQYMG+/btE2J2xIgRJ0+elG7I
7dOnj/QQn06dOolV3SNHjkhnCPFeBgYG+CIdfYv/RkZG4sX37t0bGBgYGhoa
FRWVlJQEo8XVVJg9ehVKXdiyZUs1N6QzDMMwDFM8ePnypciIAk+Pl25Vc+PG
DeHF5S5lNBMbG1utWjUqQ09PT0iPon4iLWPWrFm0kDd58uRXr17lwnUXRzZ3
7txZHXGn4dy5cwd6v0aNGtSP9e3bd/v27XFxcV+/flXRm0E5oi3PnDlTtQVC
Ty1YsADXb9OmjbOz88CBA6G8pIoMVWBsbExTXviMTCZqdBGUkd7Q0JDOB5fh
zZs3ixcvhv718PAQZ9+MHTv25s2b+Ly0ciH3KEcx7qI5xzlhBEFJXrhwgY7g
AcOHD5ceUGtmZiZzAPrSpUtpdgXMmzdPRvVTQHLr1q1Rg/Qt/Et5+dQfmxYu
XEi32Lp1q0bFcjMMwzAMU9CIMEUOtVWHjRs3CseMiyt3SJe6IiIitC63WJHj
6OgI7eDq6vrkyZNcaFuoOVogQ/lPnz5d26cXTp8+bWdnR6uBdGrMgwcP1DkK
CuLx4MGD8fHxyizw3r17M2bMsLKyqlKliliIhPJq2LChtO0HBQWJSPvNmzfL
iKn09HTKvARZip/l7+Lt7a2jo4PrQx7SXcaPH68snzyUIx5A5qhxTSAkJEQU
Qo8ePaQbZnfv3i3TT545c0ZMEsIUpSms8cmRI0fi66jQXCvTR48e1a9f/1//
+pe1tTVFROfDGzIMwzAMoyW4uLiQZ2hkZJSSksKegGr69u1Ly15wRL+RhEgn
Tpzo168fdL06B6pmC2wMnie58V27duVogVwAdbBmzRqxtpVTYmNjxULbvn37
tHqK5vLly+LcmW7dup0/fz4jI0P9VqnirK4rV644OjqWL1+ebLVcuXJNmjTR
19enVdrGjRuL48BEUqmyZcvKR9qnpaWRvMV15E8QgzbHNaWn6gwcOFCZtv39
99+p7QwePDjv+4XzF39/fzFNWrVqVfFG0Krym7tRR61btxbLu+3btz979iwK
Ci8+Z84cOvoWv582bVru5l7wRZpA46VbhmEYhvnWePjwociIMn369Hw8q7FY
8vHjR+F6mZiYqHl8krbTsWPHkiVL6unpWVtbDxs2zM/P79q1a5D2OdIRgr17
95YqVUrhtrviwefPnyFDCtQwIMoyMzMvXLjQu3dvePI5XZ8KCAgQVZAvUxZF
RUxMjI2NDamkMWPG3LlzJ7/eBapTXLlOnTqenp4nT56E2YeHhxsZGUHhohOg
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
XcrL6uqTJ09sbGymTZuWlpYmlTZRUVHkZru5udH+RMhJZ2fnxo0b6+joVKxY
sXr16k2aNFm/fn3RKrt3797FxcVdu3ZN5vnVBIJOhECjFYs1wWxBiZGqQsNH
yWhvY/znf10N6tTJycnLy2v79u2HDh06ceJEeHj4uXPn8MPx48cDAwP37dsH
0Yq/+vr6btiwAWLzypUrytqL2HVboUIFfFF+E7erqys1z23btt25c4ckNhg1
apSy/bDz58+nCav+/ftTN3vv3j2xdCsWcGVOaEIzx6O2adOGjtwtWbLk9OnT
Fe7t1QRQwqJpg3HjxhXJ7gCGYRiGYb5l7t+/L3aNrVmzJr+8/ebNm0NBnD17
Fu5ZZmbmly9fcGUh2dTZjZVfQEHgdk+fPs0vH/7t27di5Uuop/zlxo0bUGHw
Zk1MTJQt00D2ioNIiEaNGmnF+RciWsDY2FiaYycXfP36FUpW/q1R47/88gtu
4eHhgQqCXujYsaNYIBPo6elp9UwLBJpYLOvWrZuac1MQa4aGhqSnunTpolHZ
uXOBzEqrgYFB/fr1GzZsiC6oWbNmDbOApdWrVw9/0tfXr1WrFuq9Tp06pqam
Pj4+8qkGXr16JfKeQa7KrNv+k3WOj5ClN2/e3Lp1q3iAw4cPK4sZ7tGjB1ng
zJkzaXOuOEOHbJWAer169Sr6zNu3b69fv97Z2VmkK8eTL168WEbb4mnj4uI0
ZOv04MGDRdpklE8et9UzDMMwDMPkgiNHjoj59rCwsPxyk86cORMcHAz1IfUM
7e3taU0kj2t2OQLer4WFhZ2dna+vb64T+Eh58uSJWDJTlkYmF7x8+TImJgbF
gods164decLLli1TNuEAVRIQELB69epNmza5uLjQvEHhBNzmBbyOiBaAzs3H
yYE3b96cPHkyKSkJHvWkSZNodXLdunUkgWl9zdXVde3atbt37546dSotpR08
eFAD9zCqyZ49e4SwmjFjhppJ4ZYsWSISo+UoG5Vmkp6evmPHDjc3N0hXhbsh
VFCtWjX5qTYYkliNVXhK2rFjx6jPNDc3x4e7du1Kra9ixYpPnz5V2MOglxCK
GD0SbDI1NRW6mx4YHRS1dwhYXV1dMzMzqForKyv8LN6oe/fuQUFBuJ30+tCP
nTt3btWqVXh4eJE3fBiSgYGBWIbu1q1bEe66ZRiGYRjmm8Xb21v4uhBu+bX2
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
YRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiG
YRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiG
YRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiG
YRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiG
YRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiG0UD+85///P333/j3v//9
b1E/C8MwDMMwDMMwDMPkjHfv3h0+fHjMmDEuLi6ds8DP+/bt+/r1a1E/GsMw
DMMwDMMwDMOoxdOnT3v16lW/fv0yZcqU+B+//PJLvXr1Nm/e/Pvvvxf1AzKM
dvD+/fvMzMz//Oc/Rf0gDMMwDMMwDPMt8t///nfy5Mk///wzJG2dOnWcnJy6
du3arVs3Gxub77//3tXV9dOnT0X9jAyjBUyZMqV9+/bOzs7btm1LTk5mkcsw
DMMwDMMwhcz169f19PS+++47FxeXM2fOxMTE3M/C09Pzxx9/9PDw+Pz5c1E/
I8PkMy9fvrx9+/Zff/2Vj9fs2LHj999/X6JECX19fTs7O4jctLQ0FrkMwzAM
wzAMU2hMnToVMhby9ty5c1Jvf/ny5T///PP06dO/fPlShI/HMAWBi4uLlZXV
0aNH//jjj/y65o0bN/bs2TNs2DA0KBK5jo6Op06d+vPPP/PrFgzDMAzDMAzD
KCMjI8PIyAjatnPnzvhZmi3Z19e3VKlSCxYs+O2334rwCRkm30lLS/v111+h
QMePH5+/wQkQy4mJiVu3bu3du3fJkiVxiyZNmty/f//vv//Ox7swDMMwDMMw
DCNPQkJC2bJl4YQvW7ZMJoXUjh07SpcuvXz5ck4txWgpUJoRERHyi6ePHz8m
sx80aFBBbC2HZH706NGqVatKlSqFu+zZsycf14gZhmEYhmEYhlHInTt3/u//
/g8eOMSszBlAycnJXl5eDx8+5IUnRhv5/fffu3TpYm5ufvfuXRkbjouLI3nb
r1+/gsucdvHiRUpFvnnzZj5gi2GY3PH+/ftLly7t3r17xYoVGJSnTp06Z86c
LVu2YPjO3+wBDMMwuQN9ERwtaQgowxQhUVFRJG8xdMosMMFK09LS2FwZLeXh
w4flypWDbYeFhcks4D569Ijkbd++fQtO3s6fP/+nn37CXXj7LcMwueDr16/B
wcFdunQxMTExNDSsUaNGpUqV0K1VrFixdu3aLVq0CAgI4KkzhmGKluTk5D59
+owcOZLTaTIawqVLl2iB6eDBgxw/yRQnDh069Msvv8C2z58/L7PGAeVL8hYd
cgHJ2/DwcCMjo3/961/4NyUlhTt8hmFyxPv37728vJo2bfrvf/+7hBLq1q17
5MgRHrsZhilCjh079ksWPJnPaAiXL18mebt3714eIpnixKJFi+g053v37skE
Jwt527t3b9XyNiMjA+I0p/H5Dx48sLa2Jqd01apVvHudYZgcERsb27Vr1ypV
qnz33Xf4YeHChQEBAfuy2Llz56ZNm/r370/J6xo0aPDkyROeQNMoXr16FR0d
zaHjzDfCkSNHaDVhw4YN7PAwmkBERISyvbcMo9W4u7vD/YNzmJqaKhNgf/fu
XZK3AwcOVC1vJ02a5OjoGBoaqv6EJLTwqFGjyPMcPHgwL90yDJNTDh8+XLp0
aWtr6+XLl0Pqvn37FgM05BI6Ivzw+fPnuLi4Fi1a0BxacHAwr5hoDqigrl27
WllZhYSEcL0w3wInTpwgebt48WI+bIXRBO7cuUN+PmdI1gpevHgRFBS0Zs2a
TZs2RURE8OSwClq3bg3fT1dX9927dzLy9vbt2zSrAwms+mAgLy+vn376qUmT
JqdPn1bTUYGrWaNGDchqCwsL+axWDMMw2ZKSkhIQEBAVFYXuS9n82Jw5c2h3
/9KlS3n41hzEnq/Zs2ezq898Cxw/fpzkbbE5SzQxMRFSffXq1V++fOEERNoI
5BIdADpixIj8PQCUyXdCQ0M7dOjQoEEDHR2dWrVqmZmZ7du3j9fclaGnpwfD
hsj98OGDzJ8iIyNJ3mZ77m1ycvKoUaN+/PFHBwcH+evIgy7R0tKSllT8/f25
dhiGyR3wElW7VTt27KCjx9CPwQcrtAdjVOPj40PTDvCNNWra4f79+0uWLDl3
7hyvKTP5y9GjR0nezp8/v3jI2/Xr1+vq6sLZvnLlCi8kaSN//PFHw4YN//Wv
f+nr68svcjH5C0a63JXw33//vXPnTlNTU5kcI0ZGRtz0FALDrlChAoqoV69e
Hz9+lPmr2HI+derUbN1CCuCHu3Lt2rVsi9rT0xNaGFd2dXVNTU3lsGSGYQqI
/fv3ly5dGr3N8OHDeXZac8Cg88MPP6BeDh8+rDlCEu5H+/btq1ev3qxZM3b2
mPwlKCiI5O28efOKh7w9ePAg9a7bt2/ndQotBSNjyZIloXDlM/AUKHD+k5KS
Xrx48S1Eb3769GnHjh1du3b18fF59uxZTlWPn5+fsbEx6ohUrZ2dXe3atem/
BXpyq/aSmZlJpwJ5eHjIO36hoaEkb9UJpBGXyvYMjtu3b6NevvvuuwYNGsTG
xn4Lhs0wTFEhVm9Hjx6tYpouPT2d59kKDahIfX19jAKol4sXL2rO5HNwcDCN
eiA+Pp5NgslHRGopLy+v4iFvw8LCqL1oWgwGoz6+vr40RBbm2UCHDx9u3769
ra2tg4PDt5DVavbs2YaGhhCk1apV69Wr18uXL9UfXEJCQqTaduLEiVFRUXv3
7qWZpV9//bWQ5yW0gtTUVIq6nzZtmrzjd+DAASo9dbL8oaZq1qyJDy9cuFB1
vz1hwgRaul25ciX3hwzDFCjTp0+nDmfJkiXKOhworM6dO7u5uXGao8LhzZs3
NPSA6OhozRmaXV1dKeEhnSbA8pbJR/z9/cmnKjappYKDg0mwo3ctHm9UoEDU
nD179vXr1xrVsYhATYyVhbB/JyMjY8aMGQ0aNBB6rU6dOidPnizeI++gQYMs
LS0xvsAb+emnn9Q/LObx48diLyeYNGnS06dPYT+fPn0aP348+Ta+vr4spmR4
8uQJ+RiLFi2S75o2bdpEUzp79uxRZ0qnSZMmMFeFC8EC1IuBgQEt3SYlJWlU
G2cYppjx4cMH2liEfgx+hbJVQjhptLeicePGgYGBfPxfQYMhm9J1gkePHmnI
QPDq1SuKLKIH45OkmPxlxYoVdA5jsTkYSCyCcN5ddYC6ad68+dixYzVqmwz6
PRICdnZ26iTPyQswknnz5lWuXFl0s0S7du0K+tZFS0xMTGRkJAY+ExMTOCQY
aKKiotQJW4KeJQ1LcchS3SSyXnfv3l1+e2kxJjU1NduYdnGy7bp16+S7poUL
F1LqDzXnVezt7f/973937NhRhZXu3LmTOsOZM2dymheGYQoU9F20uGBgYPDy
5UtlWynfvHkTEBBgbm6OHoxn3gqBa9euiRjg58+fa8gW19OnT9NTmZmZDRky
BAOZhjwYUzyA20M+VbZ7uLQFsQiyfv16lrfZUr9+fci6cuXKadTUGUQWaS7I
gYLujbdt26anpyejbQF0AaSf5pRJwbFhwwZqMuqslZ85c0ZXV5eKS19fXybS
CX0IhO0PP/xQoUKFtLS0b2G0gquGrqZdu3YODg7Lli2DqFf21jExMZQbWWH6
YhFFfPnyZXUmGTp06PD999+3bNkyMzNT4QdwEZLA6l+TYZhvnM+fP8+dO9fH
xyenwW/o8MWhtxhKVH8dAw1GXhp3io3zqbEEBQXRPCfG5fT0dA0Zl4X6mD17
9qNHjzQnZJopHowaNYpC3/fv3188QkQWLVpE69F+fn7cZ2aLmZkZhRJp2mbJ
ESNGkGVGRUXl9MESEhKuXr0aGRmZ7Xzg6dOnpXtIraysIHXFfy9duvQtiIJX
r14ZGhpCsdasWVN15FJKSopwYJTtaBD7HW7cuKFRFpUtSUlJFy5c2Ldv3549
ey5evAjZmK0b8PDhQxcXF+h9spkaNWosX75cmV8nTrY9dOiQfGfr6upKmS3V
bInt27eHvLWwsFAmb2NjYylRs62tLTS4hrg0DMMUJu/fv0dXEBMTo+ZYdubM
GQwE1apVy+n8pLe3N6kVfX39Bw8eZNuJvX79unz58spS7TH5yJYtW2gmoVGj
RsrGi0IG5tG0aVMaN4v9RjCmSOjfvz/5VMVmB4SInISbWjzeqECxtLSkHkbT
sqquXLmSpimCgoJyVI9hYWFt27Y1NTU1NzcfOXIkpK6y94qOjpbuIa1Xr15I
SEi3bt2oRZQo3MRWRYs4O0Z1vvFVq1ZRpQAnJyeFK/5im8+uXbu0pfRgIbt3
78YbNW/eHGYAsW9iYjJgwADVU8pw4fAVaEzpor+Ojg7tRJb/POyN5G1wcLD8
aN6pUye61IsXL9TxKm1sbGC6rVq1UuauoCrJpeGkUgzzbXL58uU+ffpYW1u3
aNFi5syZ6kzZzZo1Cyq1ZMmSOZoTw1gp9lGuWLFCnQ4HFyeBY2FhoUX7gP76
6y+UDEZJLZowFDtf7O3tNWTTUGJiIiX/x6inUaGDTLHBwcGB3PvQ0NDiMX/i
4uJCXqJCH5KRATKQ5G1MTIxGyVuxh3rjxo3qO+cZGRnk9pPWgJqYMGGCwpnh
tLQ0R0dHoU0wLm/duvXTp09TpkwRG0u3bNnyjQQAXL9+nZQXOgRlngYsRGTf
QnEdO3ZMYfuCpO3cuTMKdvLkydqy3/P8+fONGjUSq/YE/IGePXsqcwZgP6Kr
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
29vbzc0NojJTpkxFihQxEuX49evXFBX5//7v/3QUVsGCBen4Jjw83GBUWzwF
BcItX7687ZwgMCRvU7Fny9mzZ6knjB8/Xi6npCz++OOPSpUqkVf5oEGDxDNZ
EARB+KC4efMmrJcVK1bYxk/esGEDbf9++eWXr169ckrxBCH5gXgMDQ3dtm1b
YGCgkdzQkZGRffv2hR6EOIWiLFGiRM2aNU+ePBnngenRo0c9PDyUSSpBt27d
jAR0un37duXKlWHBFipUSFOHQvNmyJCBPtN42J+VK1fSqB8wYIA9q/jx48ch
ISErrGzZssW4lk9N0Bm3i4sLGiJVPn5QUBB5CCxdulQnur5gQk6dOkXxvsCh
Q4dSsf+8IAiCIGjy5MkT2PO2Nvz69evJ0E2bNq2kvxQ+EM6fP9+oUaMyZcpA
NhYtWtTHx+fp06c6+uXIkSMQs3TOpQSfoC98AgICKL0sXgyRu3jx4u7du3/6
6af412C8Ynx1586dp06dqnm49uLFCzJxMX6fPXtm0D+8Z8+elEsIOtdW1Ny7
d2/VqlV16tSBhM9tpUCBAnXr1v0AvR95H2Dbtm2pMnXahQsX/vnPf+IBK1Wq
JDltUxYDBgygS9Pu7u5Y3+VuiCAIgiAQa9asIefkjz76KKXI25iYmMuXL+/d
u3fFihXLli3bsWNHqrQ8Ux9v3ry5du0aLDHnqqQzZ85UrVqVJCcBhajj/Xvi
xAmWqG3atFm6dOnatWsnTZpEl9Y3b95sr/sFBweXKlWK3tiuXbvTp0//+uuv
zZs3/+STTzDuDHbaP//889atW5CumpUGKfrVV1/h87/77juD3hf4Xg5HgyKp
FA30uKenZ548edKkSYMX/OMf/3B1dU1jRedJUy6Y9DCZnD17NiwsLCIi4sWL
F8p6Ro+tX7/+3/72t6FDh6ZK58+3b996e3vjAdEny5Urt27dOmU+IMG0YELI
mzcvjeJ58+al1rvhgiAIgpAAVq5cSfIWmDzpA8p27tw5LOUwOCtWrOjm5gYj
PFeuXIULFxbXLPNz9erVDh06VKpUycPDQ8eNFhrNnpRzCLdv365WrRpJzsaN
Gw8YMIAih8NW1Lx7fuPGDXIPpuRZeIrffvsNKg+DpXz58vj91KlTNW3L8PBw
egH5AEPXk5Bs0KBByZIlHRXQiU/fvv/+e4N351EDpIgxdpSHPlA6/v7++Bwq
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
Tk9PzzVr1vj5+XE4CCGEEEJyFa9fv96yZUubNm3KlCkjwrZgwYLQuX369Bk6
dKi7u/sXX3yRP39+/NzNze358+fmbm+OYvHixRLgevbs2b///tvczSFpwN7e
XtbL5cuXOXaWw4ABA2rUqFG+fPkKFSrUqVPnhx9+iIiI4NkRIYQQQkhu4Pbt
26NHj65WrVrevHlhqBcpUuT777/39vYODg4ODw+PioqKjIwMCwvr3r07FO57
77338OFDukIyEXd39wIFCqDnz5w5Q4mUjUhISChatCgGztraOjo6movCcmja
tCkG5YMPPpDDh8KFC0PwqtxfhBBCCCEkp3LhwgUXFxcbGxuxA7/++utt27ZF
RET89ddfOub6/Pnzxcl47949WvKZSKNGjeRgITIyMisdTI8ePTpx4sTVq1fT
qqlv3bp1/fp1KvGwsDCpClSxYsXExERzN4f8PyZMmFCzZs3169d7eXk1a9ZM
pK6Pjw8vVmR3sO3cvn374MGDGNlNmzYdOnQIy5DDSgghhBDBz8/P0dERth9M
9DJlykyZMuXatWu///67QfW6bNkykbeQRZS3mcXr169LliwpTvP4+Pis7Nju
3bvXq1evadOmaVK4mB7t2rWDZIiLi8vl0+DEiROFCxfG2HXs2DEpKcnczSH/
j7t37wYEBLx8+RLTdfPmze+88w6GycPDQ2W31ufJkye8omvhBAYGYtfC76xa
tWpVqlSpcuXKH3/8MXaw/v377969G8PN4SOEEEJyM/v27WvYsKFo20aNGm3f
vj02NtaI93D58uWFChWysbHJYhWWs7l37x6ELYYASvPp06dZ9r1XrlyRwFr9
tEjGefz48fvvv4933bx5M5dfZty6davopsGDB8O0NndzsisxMTHr1q3r3Llz
x44dJ02alOkxDOHh4bLE+vXrl1J8Mpaem5vbZ599tmrVKizJXD6xLRD80vH0
9GzcuLGkgNABv5iqV68+cuRIbEqMKiGEEEJyJ3v27Klbt67ExLZv3/7kyZOp
ei7Gjx//1ltvtWrVio6qTCQwMFA8gD179szKu4HKFw8wGUyXt2jkBx98wGRK
YOHChdKHxt2CxAhhYWEQlRUrVpS96MMPP/z6669jY2NTPUBbvnz5/PnzTel2
yGc5kPnqq69S2rt+//13Z2dnSKcKFSo4OTn5+vqySpflEB0d3a9fPwyNTBLB
1tZW+09QtGjR5s2bY0dlrDIhhBCS2zhy5IjStl27dg0ODjbFHvj000+tra0n
TpxISz4TWb9+faFChbJeIv3www+SzwpWfZqCk//55x/J25MmUZwjGTdunBS9
XbJkCfSRuZuT/bh48WLr1q2lspLinXfe2bJliyoibJADBw5Urly5YcOGpgQ8
PHjwQLy3PXr0MJL1Hdvg1KlTK1WqhI2xTp06x44dy+XT20KIi4sbNGiQjCCo
X7/+L7/8snnzZgzQtm3bpk+f7ujoqJ1CeIGPjw/HjhBCCMk9nD59WsUkd+vW
LSQkxBRpk5SUZGtrm1ZPH0mVn3/+WSSSt7e3cZM+E4FErVq1qiQTg6GY1jtr
8+bNe/vtt7t06ZLLS0R9++23ckSwadOmLBu7HMPNmzdbtWolG5EOjRs3hm5N
aU5GRUXJDvbTTz+ZEhN+8uRJCZAYM2aM8ddDSe3cubNGjRpQuO3btzfSBpI1
JCYmjhw5slixYjIx3N3dAwIC4uPjJfMh/nz8+HFwcPDQoUNlFxXq1KkTFBSU
y2NLCCGEkFxCaGho8+bNxaR0c3MzUdv+m3xV87333qtduzZsy1x1MQ0K7vLl
yzB6ly9fvnr1aojQsLCwTDScnJycZDiysujtnTt3xBtSqFChdNw0xByoXLny
Bx98sG/fvtx81tGuXTtxG/33v//Nzf2g5dGjR5hRT548MT6pICS7du2qvUc5
YMCAggULyt8LFChw7ty5lJbDxo0bMW9LlChh4vY1YsQI0T7btm1L9RTi1atX
K1aswOe/8847W7du5amFeVmyZEnp0qXzJDN27NiUihdjyk2YMEHNH/Ddd9+x
DhQhhBCS40lKSpLatRKSevHiRdP1VHx8/KRJk2DG5x577+nTpxCzn3/+eePG
jatVq1auXLkKFSpUrVq1adOmEydOjI6OzrjMx1fAeBOZ+eDBgyxzFZ06dUr8
WR9//HE68lmhneLAxdvv37+fq447tODxJcL/xIkTvO4HtmzZAsnv5OTk4uIC
fWqkT6ZOnarCTUWM3Lx587PPPlNRptCYKcV748XQvz169MCGluqS8fX1LV++
PMRRjRo17t69a8pchTZ3dXVFS1q0aJGV2d6IDhcuXKhevTqW2AcffDBt2jTs
kEaGDxvyuHHjlMItVqzY0aNHeehECCGE5GzWrFljY2Mjoub06dNpNcgfPXqU
8cIZiYmJr1+/tvyQv6CgoK5du0LV6mQvEYoXL/7jjz9mPHYxNDRUCqc6ODg8
e/YssxqfKtu3b5eUv19++WX6AoxjYmIgYSABsjKm2qLA8ilRooTMhzSdFOVU
IB7r1Kmj1kubNm0ePnxoUI/s3r1bJKe80s3NTcooL168WO6hg+7du6c0Mxs0
aIBvmT59eqp31SGZ5Z64VfL9aOw8Jj7L2rVrsUDefvttjqy5ePHiRZcuXeQw
FroVv31SPZrAfNOekGBzYxZEQgghJAcTHh6unE3QuSkVt31DPHnyZMeOHX37
9m3btq2rqyvs2IiICIu1G318fFq0aCEBjbC3u3XrNnPmzNWrV69atQpGdf36
9WEwFytWTLoxI1+0d+/ed999VyIzszKUTqX8HTRoULor2hw5cqR///4XLlzI
nY7Lp0+fSj5egMWVa13Yik2bNsmZSfHixSFdCxQosG7dOv0FcuXKFawgpYIb
N24cHBwsW8HZs2fltMcqOYWywbB5TFepE431aHz1PXjwoFOnTqKPevXqlaYw
g2vXrolz2eAjkCxg69atchjbrl2727dvmzh2hw4dkrgUgLmUjlNcQgghhGQX
PDw8JHDr22+/jYmJyUpte/78+Y4dO1arVk1Fjn300UeOjo4QdxYYPHb06FGV
egvm8YYNG65fvw55/vr161evXj1+/BgvsLe3hwGPP02pYGIENSjQ+1lpRQ8b
NkzEO9S66S4tHSA0YHYa98VfunQpICAgramrsgUqHy+Ijo7OeQ+YViAhIWmx
rocPHy6zul69egkJCdqeefHixddff62u3H7wwQe7du1S3v/nz59XqVJFeXUN
hnzjA+VUYfv27UbCBjAz8UXiC27Tpk1oaGiaDtOw0qGv8d7x48ebMVF8fHx8
qreYcyRPnz51cHDImzcvFG6aqnJjCmkduPPmzUv3/kYIIYQQSwbWXeXKlWE3
2tnZZXG5Ulj+KnsSvr1JkybK9qhRo4al5Sby9/dX2nbAgAEhISH68g1G9YIF
C8T76efnlxHvQMuWLeW7fH19s9LLoHIiZdwBnRKQtAsXLmzevDk0zqhRo3Je
EtqbN2+KqxEaChokhz1dOpAzn2XLlgUEBEjPYI7pJLDdsmWLyEbBw8MjMTFR
23U9evRQ4tfT01N/ckLxibzduXNnSvI2MDDQxcVFXMnYcE6dOqWzuGJjY69f
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
ojDOpW+7du2K18DGnjx5MpRaZGQkrHSsO6kIbJXsnL106ZJ2dSjZLmBy6ofa
wv4/dOhQv3795EPs7e2dnZ3Xrl2L5WxRfkYfHx99eTtv3jzTVxkkCeanusAL
Od+xY8eVK1ceOHDgv//9L5YbppncSv7Pf/4D4YzJkPEMQuhwd3d3rKny5ctn
L9dtRETE3r17p0yZ8sUXX7Rt29bJyalFixaQ/K1aterSpQtmiFzrNnczUwF9
roLSBRcXl8TExLT+nqpevbr6HRQQEGDhkfyEEEIISSuw+iA9JG7WKjlWsHbt
2nIT8Kefflq1atWuXbtgjp46dSooKCg0NPTu3buPHj2Ki4t78uQJTIuXL1+a
bl3AgFcWKcxOWONG3quS82RcXaaPjRs3iiKDzZyRE/579+5J9+JBVE0KSXqj
XhMYGCgG/4QJEyB2JFdzvXr19J2VCnG7Qz0lJCRofy4SCXoK+qhkyZJWaalN
A4u9ePHiMkAYd9Ofet26dSK+YEUbfJfyxWtHUxWHTTVEsEyZMnhZ/fr1deQt
tC1EHPrW0dHR398fevbChQtiA8+ePTvj0wbTG0tgzJgxK/8vnp6eK5LB31ev
Xg1pgGeH1MIi2rJlCzpt586d+/btU5mNp06dekjD7t278YHyv2j2oEGDtEMD
GfLdd9+JOJ05c6a2/RBoSt5CJmur3miBSIGYRcNEQYtSxnKeOHGir6+vhTiq
Dh8+rCNvixQpcu3atTQpLMwEyFiVlsra2hqqs1atWjVr1ixbtqzsZp07d96/
f/+5c+d0amOlD4ysJPXC1ErTvpfpYBwxz01pAzZtzF7I2Bo1asgFbZ1TBfQb
ZkiaTsDMBfZhnYpm2FXSusafP3+OPVN9Qjqcv4QQQgixfPAb38/Pb8iQIdpq
I2JFw2KsXr06BC+URcOGDZs2bdqyZcs2bdo4Ozt/+umnLi4uUMHff//99OnT
oVBOnz5tPGBPaRzw1Vdf6des1KJKHKbJjZiJ/Pe//xVrCi05e/asNr1wmpDL
eujDy5cvi4vTwcFBJ+fqb7/9JuIFD4vvEoHWt29fIzanSGbY81oJHBwcDCWI
r/jhhx/w3nLlyuFzevbsaaLt+urVKwn/A9Bipquhbt265c+fv0KFCinFl06b
Nk0OK2BvK7eXiq9O9WozVIyVnvfWy8urcuXK6ARMy4CAACmrqu4dT548OVOc
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
nSdPnnz58kkZVl9f3/j4eMu0r/QJCwsTVxqkupub2/z584OCgvTLyJLciZeX
l8hbd3d3I7b048ePDx48OGPGjKlTp+ItxpM8Q9IeOXLE29s7W18b1JG3Pj4+
2VeqZzGrV6+WQmCZcncjICBAm0nYkouMQ3ermJ+iRYumNa/asWPHVLlbiNyz
Z8+apVgYIYQQQiwfSNFff/21fPnyciuqcuXKRsKStcCgDQ8Ph9WxefNmSN3g
4ODo6OjsImyFZ8+erV27dtmyZZAnV69eTV+RDpJTUfI21UBiTPsnT55A5/7+
+++pTiEsLljm2Xqm6chbE3cMgnnSu3fvAgUKzJw5M4M69Nq1a/iQhg0bKodm
ly5dMitX1ZsgKipKyVtMnrTK227duqngoq5duyYkJGTrFUQIIYSQN8eGDRsq
Vqwo2hZWx4oVK16/fp0mywE6FzZVNjU2IFvoriUGUcHJo0aNYiSkFh15C6ll
sarKorh06VK5cuUwqdJ9IBATE+Pj4zN06NAWLVqoNIBWyaWpLLni7b/JN0GU
vIVQffLkienvPX36tKp8BPbv389oAUIIIYToAxm7evXq6tWrSz4cGF3z58+P
i4ujpUoI2Lx5s6Sy+fnnny025tMsREdHK6liY2MDzcUDIlOQRGSfffaZic7H
pKSkyMjIGzduBAYGrly5csCAAZ9++mnt2rVVmC6wtbXF/Lx27Zola1sQHx+v
rZUMtWvinHn58uXnn3+uArDbtGnz6NEjzjdCCCGE6BAbGztp0iR7e3uV7tjD
w4PalhDF9u3bRd5OmDCB8lbLn3/+qSoiDR48OKW8W0SHxMTETZs2Xbp0yZR7
oxC2nTp1atmyZfPmzevVq1e+fHmVN1ioUKECRuHQoUPZ4lYI5ow2G6HpHv89
e/YULVpUvXHLli3MY0YIIYQQHWJiYgYOHKiNbevVq9f9+/ct30YiJMvYvXu3
CIqpU6dS3uoQERHh5eW1evXq8PBwC/cbWhSm3M4WLl68qPXSKqpUqfL111/P
mzfv+PHjkMDZqPOrVq2qfuMEBgaaovGjoqK094s7d+6cXUrOEUIIISTLePny
5YgRI7Tn4T/++OP169ezkZlESBZw6NChd999l4ENKfH69WuofoaJviESExOX
L1++YMGCWbNmYQbOnj171apVO3fuPHHixI0bN8xVDDojQJyq9FDLli2D0k/1
LZMnTy5YsKC8pVChQn5+fkyYTAghhBAdvLy8pJqP5JKaMmVKqmWACMmF+Pv7
Fy5cGMtk/PjxHTp0YIIpksUkJSU9ffo0Pj4+Li4uISEhux8mLF68WHK1gS+/
/BJPZ/z1x44dq1ChgnL4jhgxgsntCSGEEKLD33//XbduXblv27p161WrVsXE
xFDbEqKPKovcv3//t956q2bNmrCuzd0oQrIrFy5cUOHWRYsWxT+NhAxh9TVu
3FiFJTdp0uTmzZv8VUUIIYQQHf73v/9NmzatU6dOY8eODQoKYk0cQlIiPj5e
8gM3a9YsX758PXv2xHoxd6MIya68ePGiTZs2KgeykYxt165dc3Z2Vq/MkyfP
tm3bmFGKEEIIIQaJjY29evUqE3QQYpy///67QYMGefPmLVKkCAzslStXmnJb
kBCSEp6enio++aOPPvLy8tJfUyEhIVptCwYNGvT48WOexBJCCCGEEJIRPDw8
JLMNbPIrV64w/RohGSEmJsbBwUFVo7O3t58/f35YWJisrCdPnhw8eNDJyUmr
bXv06HHr1i0uPUIIIYQQQjJIeHi4o6OjtbX10KFDnz17Rv8RIRlk586d2gK4
ZcqUadq06VdfffXdd9+5uLjUqlVL3bcF3bp1Cw0NpbYlhBBCCCEk48CuDgoK
2rVr1927dxnMT0jGef78+Zo1a4oVK6Yt5gtJq4KWFd27dw8JCaG2JYQQQggh
JBOBsKXflpDMQhRuy5YttUHIOmp35MiRKmiZEEIIIYQQQgixTKBwL1y44OHh
0aJFC63ItbOz69Wr14YNG+7fv894CUIIIYQQQggh2YLY2Njg4GBvb+81a9Ys
WrRo48aNx44du3Xr1u+//854CUIIIYQQQggh2Yu///779evXz549+/PPP6lq
CSGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIydn8H+ZGits=
    "], {{0, 1339}, {1269, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{491.7391304347833, Automatic},
  ImageSizeRaw->{1269, 1339},
  PlotRange->{{0, 1269}, {0, 1339}}]], "Text",
 CellChangeTimes->{{3.855375153809692*^9, 
  3.8553751739345512`*^9}},ExpressionUUID->"01a10398-1191-4a0b-8be6-\
f501e4078ada"]
},
WindowSize->{1920, 1007},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
Magnification:>1.4 Inherited,
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (May 18, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 179, 2, 40, "Input",ExpressionUUID->"c9b6af60-1e74-426b-ae69-164071080d25"],
Cell[740, 24, 167, 3, 48, "Text",ExpressionUUID->"e295ffa2-1b1c-49f9-932f-5d982131a454"],
Cell[910, 29, 3303, 113, 230, "Input",ExpressionUUID->"4ef08d3d-d162-4fd7-94d5-7c8e7420ca5e"],
Cell[4216, 144, 4642, 104, 265, "Input",ExpressionUUID->"fe006742-e502-4e57-a7c2-e50c937da317"],
Cell[8861, 250, 1930, 46, 54, "Text",ExpressionUUID->"f805b54e-0991-47df-8262-c8b51f4fa7d2"],
Cell[10794, 298, 3903, 82, 181, "Input",ExpressionUUID->"3286a4c7-f56b-436d-b660-d704af5e6f66"],
Cell[CellGroupData[{
Cell[14722, 384, 234, 3, 40, "Input",ExpressionUUID->"1b53193e-922b-48fa-915b-5e7900d156fa"],
Cell[14959, 389, 6522, 214, 140, "Output",ExpressionUUID->"62de081e-fe7a-4b37-9446-e00ada104c2a"]
}, Open  ]],
Cell[21496, 606, 682, 16, 69, "Input",ExpressionUUID->"cfd7110d-1634-480a-91fd-faf51dec5af4"],
Cell[CellGroupData[{
Cell[22203, 626, 1272, 31, 69, "Input",ExpressionUUID->"39d37a88-2176-482b-8432-840e3f1918b2"],
Cell[23478, 659, 1209, 36, 110, "Output",ExpressionUUID->"1fc9740a-d827-42fe-8198-ccfc4308333c"]
}, Open  ]],
Cell[24702, 698, 3863, 125, 72, "Input",ExpressionUUID->"9dc70f68-a3c9-4721-ab5a-c2951a1c3ed1"],
Cell[CellGroupData[{
Cell[28590, 827, 290, 5, 40, "Input",ExpressionUUID->"2b2a7f95-15b5-4f28-a8e4-2c9c8a9770e0"],
Cell[28883, 834, 48211, 1457, 833, "Output",ExpressionUUID->"750a897b-f727-4e6f-8e35-4163700acfba"]
}, Open  ]],
Cell[77109, 2294, 457, 15, 48, "Text",ExpressionUUID->"3157e3e6-666c-43f8-9346-499bb424ab80"],
Cell[CellGroupData[{
Cell[77591, 2313, 2208, 52, 125, "Input",ExpressionUUID->"cc087c58-c3ae-4b02-9c85-1cb0c2237f56"],
Cell[79802, 2367, 6201, 198, 255, "Output",ExpressionUUID->"2c5e5390-1005-48fc-a275-20ab67bb139d"],
Cell[86006, 2567, 40263, 1168, 1011, "Output",ExpressionUUID->"0b2f8c9c-b402-464c-89c8-2f57efbb4d84"]
}, Open  ]],
Cell[126284, 3738, 279, 4, 48, "Text",ExpressionUUID->"cd03b4d2-7056-4d4a-8435-ddd2610c856a"],
Cell[126566, 3744, 1674, 44, 97, "Input",ExpressionUUID->"2724c6a2-a3f4-4bd5-89d0-1b306c8e372f"],
Cell[128243, 3790, 443, 11, 40, "Input",ExpressionUUID->"20c652c3-b412-4341-b514-7c056f422d47"],
Cell[CellGroupData[{
Cell[128711, 3805, 239, 4, 40, "Input",ExpressionUUID->"886286b6-0e33-4300-8416-770182b1f4f7"],
Cell[128953, 3811, 1342, 40, 70, "Output",ExpressionUUID->"0f8d5b9c-a67d-457a-a8d5-4fb6d5338340"]
}, Open  ]],
Cell[CellGroupData[{
Cell[130332, 3856, 216, 4, 40, "Input",ExpressionUUID->"62e01f9f-9683-4802-9d58-bcb4af49610d"],
Cell[130551, 3862, 26154, 789, 668, "Output",ExpressionUUID->"f79dd67c-4436-41a9-8f50-67982afeda48"]
}, Open  ]],
Cell[156720, 4654, 329, 10, 13, "Text",ExpressionUUID->"c546d01b-cf7f-4448-a418-42fc007bb4b4"],
Cell[CellGroupData[{
Cell[157074, 4668, 688, 12, 40, "Input",ExpressionUUID->"70a2529b-262d-476d-9f0b-2a31b60cc87e"],
Cell[157765, 4682, 26176, 789, 668, "Output",ExpressionUUID->"f719e13c-598f-4d8d-a70a-e984cfcbbc37"]
}, Open  ]],
Cell[183956, 5474, 883, 22, 40, "Input",ExpressionUUID->"f543fa1a-67ff-4889-bf47-606b71f18b4b"],
Cell[184842, 5498, 151, 3, 48, "Text",ExpressionUUID->"dd86f941-b65d-40f3-a8e7-552245acf12f"],
Cell[184996, 5503, 826, 22, 40, "Input",ExpressionUUID->"80563cc6-c355-42cd-9dd5-3f9ed6635224"],
Cell[CellGroupData[{
Cell[185847, 5529, 1152, 27, 69, "Input",ExpressionUUID->"58735067-bcba-41fd-bd96-0a17210a791b"],
Cell[187002, 5558, 16423, 474, 531, "Output",ExpressionUUID->"bd6b8706-06ef-4fb8-94f5-a15a9b514829"]
}, Open  ]],
Cell[203440, 6035, 711, 17, 40, "Input",ExpressionUUID->"bf0b49ee-e939-4334-a1ff-5e51fe45091f"],
Cell[CellGroupData[{
Cell[204176, 6056, 426, 7, 40, "Input",ExpressionUUID->"536834ba-2a2f-4574-b3f2-9067ac837f0a"],
Cell[204605, 6065, 11203, 326, 459, "Output",ExpressionUUID->"45a9e472-a509-40dd-b484-3c957a186f66"]
}, Open  ]],
Cell[215823, 6394, 455, 12, 40, "Input",ExpressionUUID->"28454338-42f7-4593-ae17-f7ca2a985183"],
Cell[216281, 6408, 822, 16, 40, "Input",ExpressionUUID->"d1b05f2f-6efb-403f-96c3-c3c6e20e163f"],
Cell[CellGroupData[{
Cell[217128, 6428, 276, 5, 40, "Input",ExpressionUUID->"34c72973-217d-46c7-8751-f1bfb97e101f"],
Cell[217407, 6435, 6108, 174, 290, "Output",ExpressionUUID->"50cf3574-8bb4-4509-b056-75da9683f585"]
}, Open  ]],
Cell[CellGroupData[{
Cell[223552, 6614, 1254, 35, 71, "Input",ExpressionUUID->"d7a7a360-bd44-48c2-a9b1-5bf6c46ca406"],
Cell[224809, 6651, 914, 25, 68, "Output",ExpressionUUID->"a4e5f808-8ddd-474f-8360-17b87eff1e51"]
}, Open  ]],
Cell[225738, 6679, 435, 11, 125, "Input",ExpressionUUID->"f986cf6e-4d32-4b87-b53b-b28b44781286"],
Cell[226176, 6692, 329, 10, 13, "Text",ExpressionUUID->"7f7d41d3-e05e-4934-9784-7755f1953f04"],
Cell[226508, 6704, 323616, 5310, 747, "Text",ExpressionUUID->"01a10398-1191-4a0b-8be6-f501e4078ada"]
}
]
*)

